
stm32f429zit6_i2cspi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08010a54  08010a54  00020a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d08  08010d08  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  08010d08  08010d08  00020d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d10  08010d10  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d10  08010d10  00020d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d14  08010d14  00020d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08010d18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030174  2**0
                  CONTENTS
 10 .bss          00006010  20000174  20000174  00030174  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006184  20006184  00030174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003091d  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f45  00000000  00000000  00060ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  00067a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002180  00000000  00000000  00069e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000b4a0  00000000  00000000  0006bfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031351  00000000  00000000  00077488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd8a3  00000000  00000000  000a87d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a607c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c34  00000000  00000000  001a60cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000174 	.word	0x20000174
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010a3c 	.word	0x08010a3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000178 	.word	0x20000178
 80001ec:	08010a3c 	.word	0x08010a3c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f001 ff55 	bl	80024b4 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f001 f896 	bl	8001740 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000614:	2301      	movs	r3, #1
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f002 f869 	bl	80026fc <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f001 f886 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000190 	.word	0x20000190
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006a2:	2302      	movs	r3, #2
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f003 f893 	bl	80037e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <ADC_Test>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Test(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	; 0x68
 80006d4:	af00      	add	r7, sp, #0
	  HAL_ADC_Start(&hadc1);
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <ADC_Test+0x64>)
 80006d8:	f001 ff30 	bl	800253c <HAL_ADC_Start>
	  uint16_t ADC_data = HAL_ADC_GetValue(&hadc1);
 80006dc:	4815      	ldr	r0, [pc, #84]	; (8000734 <ADC_Test+0x64>)
 80006de:	f001 ffff 	bl	80026e0 <HAL_ADC_GetValue>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	  if(ADC_data != 0)
 80006e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d019      	beq.n	8000724 <ADC_Test+0x54>
	  {
		  uint8_t buf[100] = {0, };
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2260      	movs	r2, #96	; 0x60
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00f fcce 	bl	801009c <memset>
		  sprintf((char *)&buf, "\r\nADC Data : %d\r\n", ADC_data);
 8000700:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000704:	463b      	mov	r3, r7
 8000706:	490c      	ldr	r1, [pc, #48]	; (8000738 <ADC_Test+0x68>)
 8000708:	4618      	mov	r0, r3
 800070a:	f00f fddd 	bl	80102c8 <siprintf>
		  HAL_UART_Transmit(&huart1, buf, strlen((char *)buf), 0xFF);
 800070e:	463b      	mov	r3, r7
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd6d 	bl	80001f0 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	4639      	mov	r1, r7
 800071c:	23ff      	movs	r3, #255	; 0xff
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <ADC_Test+0x6c>)
 8000720:	f008 fc85 	bl	800902e <HAL_UART_Transmit>
	  }
	  ADC_data=0;
 8000724:	2300      	movs	r3, #0
 8000726:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

}
 800072a:	bf00      	nop
 800072c:	3768      	adds	r7, #104	; 0x68
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000190 	.word	0x20000190
 8000738:	08010a54 	.word	0x08010a54
 800073c:	200007cc 	.word	0x200007cc

08000740 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <MX_CAN1_Init+0xac>)
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <MX_CAN1_Init+0xb0>)
 8000748:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <MX_CAN1_Init+0xac>)
 800074c:	2215      	movs	r2, #21
 800074e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_CAN1_Init+0xac>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <MX_CAN1_Init+0xac>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_CAN1_Init+0xac>)
 800075e:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000762:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_CAN1_Init+0xac>)
 8000766:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800076a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_CAN1_Init+0xac>)
 800076e:	2200      	movs	r2, #0
 8000770:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_CAN1_Init+0xac>)
 8000774:	2200      	movs	r2, #0
 8000776:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_CAN1_Init+0xac>)
 800077a:	2200      	movs	r2, #0
 800077c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_CAN1_Init+0xac>)
 8000780:	2200      	movs	r2, #0
 8000782:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_CAN1_Init+0xac>)
 8000786:	2200      	movs	r2, #0
 8000788:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_CAN1_Init+0xac>)
 800078c:	2200      	movs	r2, #0
 800078e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <MX_CAN1_Init+0xac>)
 8000792:	f002 f9e1 	bl	8002b58 <HAL_CAN_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 ffd0 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;              // 0x00000000 = 모든 ID
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	621a      	str	r2, [r3, #32]
 // sFilterConfig.SlaveStartFilterBank = 14;
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80007d6:	4907      	ldr	r1, [pc, #28]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_CAN1_Init+0xac>)
 80007da:	f002 fab9 	bl	8002d50 <HAL_CAN_ConfigFilter>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_CAN1_Init+0xa8>
  {
    Error_Handler();
 80007e4:	f000 ffac 	bl	8001740 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000021c 	.word	0x2000021c
 80007f0:	40006400 	.word	0x40006400
 80007f4:	200001f4 	.word	0x200001f4

080007f8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_CAN2_Init+0x64>)
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_CAN2_Init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_CAN2_Init+0x64>)
 8000804:	2215      	movs	r2, #21
 8000806:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_CAN2_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_CAN2_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_CAN2_Init+0x64>)
 8000816:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800081a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_CAN2_Init+0x64>)
 800081e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000822:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_CAN2_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_CAN2_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_CAN2_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_CAN2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_CAN2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_CAN2_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_CAN2_Init+0x64>)
 800084a:	f002 f985 	bl	8002b58 <HAL_CAN_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 ff74 	bl	8001740 <Error_Handler>
//  {
//    Error_Handler();
//  }
  /* USER CODE END CAN2_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000244 	.word	0x20000244
 8000860:	40006800 	.word	0x40006800

08000864 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a4e      	ldr	r2, [pc, #312]	; (80009bc <HAL_CAN_MspInit+0x158>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d13d      	bne.n	8000902 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000886:	4b4e      	ldr	r3, [pc, #312]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a4c      	ldr	r2, [pc, #304]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 800088e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000890:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d10d      	bne.n	80008b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a48      	ldr	r2, [pc, #288]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	4a41      	ldr	r2, [pc, #260]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	6313      	str	r3, [r2, #48]	; 0x30
 80008c4:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008d0:	2303      	movs	r3, #3
 80008d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008e0:	2309      	movs	r3, #9
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4837      	ldr	r0, [pc, #220]	; (80009c8 <HAL_CAN_MspInit+0x164>)
 80008ec:	f002 ff78 	bl	80037e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2105      	movs	r1, #5
 80008f4:	2014      	movs	r0, #20
 80008f6:	f002 ff27 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008fa:	2014      	movs	r0, #20
 80008fc:	f002 ff40 	bl	8003780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000900:	e058      	b.n	80009b4 <HAL_CAN_MspInit+0x150>
  else if(canHandle->Instance==CAN2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a31      	ldr	r2, [pc, #196]	; (80009cc <HAL_CAN_MspInit+0x168>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d153      	bne.n	80009b4 <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a24      	ldr	r2, [pc, #144]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 8000930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10d      	bne.n	8000956 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000972:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000984:	2309      	movs	r3, #9
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4810      	ldr	r0, [pc, #64]	; (80009d0 <HAL_CAN_MspInit+0x16c>)
 8000990:	f002 ff26 	bl	80037e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2105      	movs	r1, #5
 8000998:	2040      	movs	r0, #64	; 0x40
 800099a:	f002 fed5 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800099e:	2040      	movs	r0, #64	; 0x40
 80009a0:	f002 feee 	bl	8003780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2105      	movs	r1, #5
 80009a8:	2041      	movs	r0, #65	; 0x41
 80009aa:	f002 fecd 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80009ae:	2041      	movs	r0, #65	; 0x41
 80009b0:	f002 fee6 	bl	8003780 <HAL_NVIC_EnableIRQ>
}
 80009b4:	bf00      	nop
 80009b6:	3730      	adds	r7, #48	; 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40006400 	.word	0x40006400
 80009c0:	2000026c 	.word	0x2000026c
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40006800 	.word	0x40006800
 80009d0:	40020400 	.word	0x40020400

080009d4 <can_test>:

/* USER CODE BEGIN 1 */
//HAL_CAN_ERROR_RX_FOV

void can_test(void)
{
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	b0a1      	sub	sp, #132	; 0x84
 80009d8:	af06      	add	r7, sp, #24
//	if(HAL_CAN_Start(&hcan1) != HAL_OK)
//	{
//		      Error_Handler();
//	}

    txHeader.StdId = 0x102;                 // Standard Identifier, 0 ~ 0x7FF
 80009da:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <can_test+0xdc>)
 80009dc:	f44f 7281 	mov.w	r2, #258	; 0x102
 80009e0:	601a      	str	r2, [r3, #0]
    txHeader.ExtId = 0x01;                  // Extended Identifier, 0 ~ 0x1FFFFFFF
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <can_test+0xdc>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
    txHeader.RTR = CAN_RTR_DATA;            // trans message frame type, DATA or REMOTE
 80009e8:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <can_test+0xdc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;              // trans message identifi type, STD or EXT
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <can_test+0xdc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 8;                       // trans Frame length, 0 ~ 8 byte
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <can_test+0xdc>)
 80009f6:	2208      	movs	r2, #8
 80009f8:	611a      	str	r2, [r3, #16]
    txHeader.TransmitGlobalTime = ENABLE;  // trans frame time stamp counter value capture.
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <can_test+0xdc>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	751a      	strb	r2, [r3, #20]

	txMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8000a00:	482c      	ldr	r0, [pc, #176]	; (8000ab4 <can_test+0xe0>)
 8000a02:	f002 fb60 	bl	80030c6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a2b      	ldr	r2, [pc, #172]	; (8000ab8 <can_test+0xe4>)
 8000a0a:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <can_test+0xe4>)
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <can_test+0xe8>)
 8000a10:	4927      	ldr	r1, [pc, #156]	; (8000ab0 <can_test+0xdc>)
 8000a12:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <can_test+0xe0>)
 8000a14:	f002 fa7c 	bl	8002f10 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&hcan1, txMailbox)){}
 8000a18:	bf00      	nop
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <can_test+0xe4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <can_test+0xe0>)
 8000a22:	f002 fb85 	bl	8003130 <HAL_CAN_IsTxMessagePending>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1f6      	bne.n	8000a1a <can_test+0x46>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 8000a2c:	bf00      	nop
 8000a2e:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <can_test+0xe0>)
 8000a30:	f002 fb49 	bl	80030c6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d1f9      	bne.n	8000a2e <can_test+0x5a>

		uint8_t can_data[100]={0, };
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	2260      	movs	r2, #96	; 0x60
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00f fb28 	bl	801009c <memset>
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <can_test+0xe8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a50:	469c      	mov	ip, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <can_test+0xe8>)
 8000a54:	785b      	ldrb	r3, [r3, #1]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a56:	469e      	mov	lr, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <can_test+0xe8>)
 8000a5a:	789b      	ldrb	r3, [r3, #2]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a5c:	461a      	mov	r2, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <can_test+0xe8>)
 8000a60:	78db      	ldrb	r3, [r3, #3]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a62:	4619      	mov	r1, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <can_test+0xe8>)
 8000a66:	791b      	ldrb	r3, [r3, #4]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a68:	461c      	mov	r4, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <can_test+0xe8>)
 8000a6c:	795b      	ldrb	r3, [r3, #5]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a6e:	461d      	mov	r5, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <can_test+0xe8>)
 8000a72:	799b      	ldrb	r3, [r3, #6]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a74:	461e      	mov	r6, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <can_test+0xe8>)
 8000a78:	79db      	ldrb	r3, [r3, #7]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a7a:	1d38      	adds	r0, r7, #4
 8000a7c:	9305      	str	r3, [sp, #20]
 8000a7e:	9604      	str	r6, [sp, #16]
 8000a80:	9503      	str	r5, [sp, #12]
 8000a82:	9402      	str	r4, [sp, #8]
 8000a84:	9101      	str	r1, [sp, #4]
 8000a86:	9200      	str	r2, [sp, #0]
 8000a88:	4673      	mov	r3, lr
 8000a8a:	4662      	mov	r2, ip
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <can_test+0xec>)
 8000a8e:	f00f fc1b 	bl	80102c8 <siprintf>
	    HAL_UART_Transmit(&huart1, can_data, strlen(can_data), 0xFF);
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fbab 	bl	80001f0 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	1d39      	adds	r1, r7, #4
 8000aa0:	23ff      	movs	r3, #255	; 0xff
 8000aa2:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <can_test+0xf0>)
 8000aa4:	f008 fac3 	bl	800902e <HAL_UART_Transmit>

//	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);



}
 8000aa8:	bf00      	nop
 8000aaa:	376c      	adds	r7, #108	; 0x6c
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab0:	200001d8 	.word	0x200001d8
 8000ab4:	2000021c 	.word	0x2000021c
 8000ab8:	200001f0 	.word	0x200001f0
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	08010a68 	.word	0x08010a68
 8000ac4:	200007cc 	.word	0x200007cc

08000ac8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <vApplicationGetIdleTaskMemory+0x30>)
 8000ade:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000288 	.word	0x20000288
 8000af8:	2000033c 	.word	0x2000033c

08000afc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000afc:	b5b0      	push	{r4, r5, r7, lr}
 8000afe:	b0a6      	sub	sp, #152	; 0x98
 8000b00:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of hBinarySem01 */
  osSemaphoreDef(hBinarySem01);
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  hBinarySem01Handle = osSemaphoreCreate(osSemaphore(hBinarySem01), 1);
 8000b0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00c fa60 	bl	800cfda <osSemaphoreCreate>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_FREERTOS_Init+0xe8>)
 8000b1e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000b20:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <MX_FREERTOS_Init+0xec>)
 8000b22:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b26:	461d      	mov	r5, r3
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00c f9ed 	bl	800cf1a <osThreadCreate>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a2a      	ldr	r2, [pc, #168]	; (8000bec <MX_FREERTOS_Init+0xf0>)
 8000b44:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <MX_FREERTOS_Init+0xf4>)
 8000b48:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b4c:	461d      	mov	r5, r3
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00c f9da 	bl	800cf1a <osThreadCreate>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <MX_FREERTOS_Init+0xf8>)
 8000b6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityBelowNormal, 0, 128);
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_FREERTOS_Init+0xfc>)
 8000b6e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b72:	461d      	mov	r5, r3
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000b80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00c f9c7 	bl	800cf1a <osThreadCreate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <MX_FREERTOS_Init+0x100>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask */
  osThreadDef(hSemTask, SemaphoreTask, osPriorityNormal, 0, 128);
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_FREERTOS_Init+0x104>)
 8000b94:	f107 0420 	add.w	r4, r7, #32
 8000b98:	461d      	mov	r5, r3
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTaskHandle = osThreadCreate(osThread(hSemTask), NULL);
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f00c f9b4 	bl	800cf1a <osThreadCreate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <MX_FREERTOS_Init+0x108>)
 8000bb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of SemaphoTask2 */
  osThreadDef(SemaphoTask2, SemaTask, osPriorityNormal, 0, 128);
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_FREERTOS_Init+0x10c>)
 8000bba:	1d3c      	adds	r4, r7, #4
 8000bbc:	461d      	mov	r5, r3
 8000bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SemaphoTask2Handle = osThreadCreate(osThread(SemaphoTask2), NULL);
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00c f9a3 	bl	800cf1a <osThreadCreate>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <MX_FREERTOS_Init+0x110>)
 8000bd8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bda:	bf00      	nop
 8000bdc:	3798      	adds	r7, #152	; 0x98
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000284 	.word	0x20000284
 8000be8:	08010afc 	.word	0x08010afc
 8000bec:	20000270 	.word	0x20000270
 8000bf0:	08010b18 	.word	0x08010b18
 8000bf4:	20000274 	.word	0x20000274
 8000bf8:	08010b34 	.word	0x08010b34
 8000bfc:	20000278 	.word	0x20000278
 8000c00:	08010b50 	.word	0x08010b50
 8000c04:	2000027c 	.word	0x2000027c
 8000c08:	08010b6c 	.word	0x08010b6c
 8000c0c:	20000280 	.word	0x20000280

08000c10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c18:	f00e fd10 	bl	800f63c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    ADC_Test();
 8000c1c:	f7ff fd58 	bl	80006d0 <ADC_Test>
    can_test();
 8000c20:	f7ff fed8 	bl	80009d4 <can_test>
    osDelay(1000);
 8000c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c28:	f00c f9c3 	bl	800cfb2 <osDelay>
  {
 8000c2c:	e7f6      	b.n	8000c1c <StartDefaultTask+0xc>

08000c2e <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	l3gd20_Start();
 8000c36:	f000 f9f3 	bl	8001020 <l3gd20_Start>
    //HAL_TIM_Base_Start_IT(&htim1);
    osDelay(1500);
 8000c3a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c3e:	f00c f9b8 	bl	800cfb2 <osDelay>
	l3gd20_Start();
 8000c42:	e7f8      	b.n	8000c36 <StartTask02+0x8>

08000c44 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	pwm_duty_control();
 8000c4c:	f001 fad4 	bl	80021f8 <pwm_duty_control>
    osDelay(200);
 8000c50:	20c8      	movs	r0, #200	; 0xc8
 8000c52:	f00c f9ae 	bl	800cfb2 <osDelay>
	pwm_duty_control();
 8000c56:	e7f9      	b.n	8000c4c <StartTask03+0x8>

08000c58 <SemaphoreTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SemaphoreTask */
void SemaphoreTask(void const * argument)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SemaphoreTask */
  /* Infinite loop */
  for(;;)
  {
	stmpe811_Test();
 8000c60:	f001 f882 	bl	8001d68 <stmpe811_Test>
    osDelay(2500);
 8000c64:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000c68:	f00c f9a3 	bl	800cfb2 <osDelay>
	stmpe811_Test();
 8000c6c:	e7f8      	b.n	8000c60 <SemaphoreTask+0x8>
	...

08000c70 <SemaTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SemaTask */
void SemaTask(void const * argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SemaTask */
  /* Infinite loop */
  for(;;)
  {
	if(hBinarySem01Handle != NULL)
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <SemaTask+0x60>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d023      	beq.n	8000cc8 <SemaTask+0x58>
	{
		if(osSemaphoreWait(hBinarySem01Handle, 0) == osOK)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <SemaTask+0x60>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00c f9da 	bl	800d040 <osSemaphoreWait>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d11a      	bne.n	8000cc8 <SemaTask+0x58>
				  {
					  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c98:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <SemaTask+0x64>)
 8000c9a:	f002 ff4d 	bl	8003b38 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <SemaTask+0x64>)
 8000ca6:	f002 ff47 	bl	8003b38 <HAL_GPIO_WritePin>
					  osDelay(100);
 8000caa:	2064      	movs	r0, #100	; 0x64
 8000cac:	f00c f981 	bl	800cfb2 <osDelay>
					  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <SemaTask+0x64>)
 8000cb8:	f002 ff3e 	bl	8003b38 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <SemaTask+0x64>)
 8000cc4:	f002 ff38 	bl	8003b38 <HAL_GPIO_WritePin>
				  }
	}
    osDelay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f00c f972 	bl	800cfb2 <osDelay>
	if(hBinarySem01Handle != NULL)
 8000cce:	e7d3      	b.n	8000c78 <SemaTask+0x8>
 8000cd0:	20000284 	.word	0x20000284
 8000cd4:	40021800 	.word	0x40021800

08000cd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a61      	ldr	r2, [pc, #388]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0320 	and.w	r3, r3, #32
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	4b5b      	ldr	r3, [pc, #364]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a5a      	ldr	r2, [pc, #360]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b58      	ldr	r3, [pc, #352]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	4b54      	ldr	r3, [pc, #336]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a53      	ldr	r2, [pc, #332]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a4c      	ldr	r2, [pc, #304]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b4a      	ldr	r3, [pc, #296]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a45      	ldr	r2, [pc, #276]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a3e      	ldr	r2, [pc, #248]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d84:	f043 0310 	orr.w	r3, r3, #16
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b3c      	ldr	r3, [pc, #240]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a37      	ldr	r2, [pc, #220]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_PIN_Pin|LCD_CSX_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2106      	movs	r1, #6
 8000dd2:	482b      	ldr	r0, [pc, #172]	; (8000e80 <MX_GPIO_Init+0x1a8>)
 8000dd4:	f002 feb0 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RDX_Pin|LCD_WRX_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000dde:	4829      	ldr	r0, [pc, #164]	; (8000e84 <MX_GPIO_Init+0x1ac>)
 8000de0:	f002 feaa 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000dea:	4827      	ldr	r0, [pc, #156]	; (8000e88 <MX_GPIO_Init+0x1b0>)
 8000dec:	f002 fea4 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_PIN_Pin|LCD_CSX_Pin;
 8000df0:	2306      	movs	r3, #6
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	481e      	ldr	r0, [pc, #120]	; (8000e80 <MX_GPIO_Init+0x1a8>)
 8000e08:	f002 fcea 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8000e0c:	f248 0301 	movw	r3, #32769	; 0x8001
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <MX_GPIO_Init+0x1b4>)
 8000e24:	f002 fcdc 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|LCD_WRX_Pin;
 8000e28:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4810      	ldr	r0, [pc, #64]	; (8000e84 <MX_GPIO_Init+0x1ac>)
 8000e42:	f002 fccd 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480a      	ldr	r0, [pc, #40]	; (8000e88 <MX_GPIO_Init+0x1b0>)
 8000e60:	f002 fcbe 	bl	80037e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2105      	movs	r1, #5
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f002 fc6d 	bl	8003748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f002 fc86 	bl	8003780 <HAL_NVIC_EnableIRQ>

}
 8000e74:	bf00      	nop
 8000e76:	3738      	adds	r7, #56	; 0x38
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40021800 	.word	0x40021800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <MX_I2C3_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <MX_I2C3_Init+0x7c>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ece:	f002 fe65 	bl	8003b9c <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 fc32 	bl	8001740 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ee0:	f003 fe1b 	bl	8004b1a <HAL_I2CEx_ConfigAnalogFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000eea:	f000 fc29 	bl	8001740 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ef2:	f003 fe4e 	bl	8004b92 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 fc20 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000053c 	.word	0x2000053c
 8000f08:	40005c00 	.word	0x40005c00
 8000f0c:	000186a0 	.word	0x000186a0

08000f10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a29      	ldr	r2, [pc, #164]	; (8000fd4 <HAL_I2C_MspInit+0xc4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d14b      	bne.n	8000fca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = SDA_Pin;
 8000f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4815      	ldr	r0, [pc, #84]	; (8000fdc <HAL_I2C_MspInit+0xcc>)
 8000f88:	f002 fc2a 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 8000f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f92:	2312      	movs	r3, #18
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <HAL_I2C_MspInit+0xd0>)
 8000faa:	f002 fc19 	bl	80037e0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40005c00 	.word	0x40005c00
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <l3gd20Init>:
uint8_t id_get_tx[2] = {0, };



void l3gd20Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	uint8_t cmd_init_write[2] = {0x20, 0x0F};
 8000fea:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 8000fee:	80bb      	strh	r3, [r7, #4]
	// write CTRL_REG1 to NORMAL MODE
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <l3gd20Init+0x34>)
 8000ff6:	f002 fd9f 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, cmd_init_write, 2, 0xFF);
 8000ffa:	1d39      	adds	r1, r7, #4
 8000ffc:	23ff      	movs	r3, #255	; 0xff
 8000ffe:	2202      	movs	r2, #2
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <l3gd20Init+0x38>)
 8001002:	f006 fa3a 	bl	800747a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2102      	movs	r1, #2
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <l3gd20Init+0x34>)
 800100c:	f002 fd94 	bl	8003b38 <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40020800 	.word	0x40020800
 800101c:	2000063c 	.word	0x2000063c

08001020 <l3gd20_Start>:

void l3gd20_Start(void) // Gyro Start
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	b0ad      	sub	sp, #180	; 0xb4
 8001024:	af04      	add	r7, sp, #16
	uint8_t ms_init_write[2] = {0x28, 0x40};
 8001026:	f244 0328 	movw	r3, #16424	; 0x4028
 800102a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	uint8_t test_read_init[2] = {0xA8, }, read_buff[2]={0, },
 800102e:	23a8      	movs	r3, #168	; 0xa8
 8001030:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8001034:	2300      	movs	r3, #0
 8001036:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

			X_L_Read_INIT[2] = {0xE8, }, X_L_Read_BUF[2]={0, },
 800103a:	23e8      	movs	r3, #232	; 0xe8
 800103c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			X_H_Read_INIT[2] = {0xA9, }, X_H_Read_BUF[2]={0, },
 8001046:	23a9      	movs	r3, #169	; 0xa9
 8001048:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800104c:	2300      	movs	r3, #0
 800104e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			Y_L_Read_INIT[2] = {0xAA, }, Y_L_Read_BUF[2]={0, },
 8001052:	23aa      	movs	r3, #170	; 0xaa
 8001054:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8001058:	2300      	movs	r3, #0
 800105a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			Y_H_Read_INIT[2] = {0xAB, }, Y_H_Read_BUF[2]={0, },
 800105e:	23ab      	movs	r3, #171	; 0xab
 8001060:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8001064:	2300      	movs	r3, #0
 8001066:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			Z_L_Read_INIT[2] = {0xAC, }, Z_L_Read_BUF[2]={0, },
 800106a:	23ac      	movs	r3, #172	; 0xac
 800106c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8001070:	2300      	movs	r3, #0
 8001072:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			Z_H_Read_INIT[2] = {0xAD, }, Z_H_Read_BUF[2]={0, };
 8001076:	23ad      	movs	r3, #173	; 0xad
 8001078:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800107c:	2300      	movs	r3, #0
 800107e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64


	// write CTRL_REG1 to NORMAL MODE

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	4845      	ldr	r0, [pc, #276]	; (800119c <l3gd20_Start+0x17c>)
 8001088:	f002 fd56 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, ms_init_write, 2, 0xFF);
 800108c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001090:	23ff      	movs	r3, #255	; 0xff
 8001092:	2202      	movs	r2, #2
 8001094:	4842      	ldr	r0, [pc, #264]	; (80011a0 <l3gd20_Start+0x180>)
 8001096:	f006 f9f0 	bl	800747a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2102      	movs	r1, #2
 800109e:	483f      	ldr	r0, [pc, #252]	; (800119c <l3gd20_Start+0x17c>)
 80010a0:	f002 fd4a 	bl	8003b38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2102      	movs	r1, #2
 80010a8:	483c      	ldr	r0, [pc, #240]	; (800119c <l3gd20_Start+0x17c>)
 80010aa:	f002 fd45 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi5, test_read_init, read_buff, 2, 0xFF);
 80010ae:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80010b2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2302      	movs	r3, #2
 80010bc:	4838      	ldr	r0, [pc, #224]	; (80011a0 <l3gd20_Start+0x180>)
 80010be:	f006 fc29 	bl	8007914 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2102      	movs	r1, #2
 80010c6:	4835      	ldr	r0, [pc, #212]	; (800119c <l3gd20_Start+0x17c>)
 80010c8:	f002 fd36 	bl	8003b38 <HAL_GPIO_WritePin>

    // ms bit '1' Auto read test
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2102      	movs	r1, #2
 80010d0:	4832      	ldr	r0, [pc, #200]	; (800119c <l3gd20_Start+0x17c>)
 80010d2:	f002 fd31 	bl	8003b38 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi5, X_L_Read_INIT, X_L_Read_BUF, 2, 0xFF);
 80010d6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80010da:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2302      	movs	r3, #2
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <l3gd20_Start+0x180>)
 80010e6:	f006 fc15 	bl	8007914 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi5,  X_H_Read_BUF, 2, 0xFF);
 80010ea:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80010ee:	23ff      	movs	r3, #255	; 0xff
 80010f0:	2202      	movs	r2, #2
 80010f2:	482b      	ldr	r0, [pc, #172]	; (80011a0 <l3gd20_Start+0x180>)
 80010f4:	f006 fafd 	bl	80076f2 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi5,  Y_L_Read_BUF, 2, 0xFF);
 80010f8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80010fc:	23ff      	movs	r3, #255	; 0xff
 80010fe:	2202      	movs	r2, #2
 8001100:	4827      	ldr	r0, [pc, #156]	; (80011a0 <l3gd20_Start+0x180>)
 8001102:	f006 faf6 	bl	80076f2 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi5,  Y_H_Read_BUF, 2, 0xFF);
 8001106:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800110a:	23ff      	movs	r3, #255	; 0xff
 800110c:	2202      	movs	r2, #2
 800110e:	4824      	ldr	r0, [pc, #144]	; (80011a0 <l3gd20_Start+0x180>)
 8001110:	f006 faef 	bl	80076f2 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi5,  Z_L_Read_BUF, 2, 0xFF);
 8001114:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	2202      	movs	r2, #2
 800111c:	4820      	ldr	r0, [pc, #128]	; (80011a0 <l3gd20_Start+0x180>)
 800111e:	f006 fae8 	bl	80076f2 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi5,  Z_H_Read_BUF, 2, 0xFF);
 8001122:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001126:	23ff      	movs	r3, #255	; 0xff
 8001128:	2202      	movs	r2, #2
 800112a:	481d      	ldr	r0, [pc, #116]	; (80011a0 <l3gd20_Start+0x180>)
 800112c:	f006 fae1 	bl	80076f2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2102      	movs	r1, #2
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <l3gd20_Start+0x17c>)
 8001136:	f002 fcff 	bl	8003b38 <HAL_GPIO_WritePin>

	uint8_t gyroData_test[100]={0, };
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2260      	movs	r2, #96	; 0x60
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00e ffa9 	bl	801009c <memset>
	sprintf((char *)gyroData_test, "\n Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
			X_L_Read_BUF[1], X_H_Read_BUF[1], Y_L_Read_BUF[1], Y_H_Read_BUF[1], Z_L_Read_BUF[1], Z_H_Read_BUF[1]);
 800114a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
	sprintf((char *)gyroData_test, "\n Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
 800114e:	461d      	mov	r5, r3
			X_L_Read_BUF[1], X_H_Read_BUF[1], Y_L_Read_BUF[1], Y_H_Read_BUF[1], Z_L_Read_BUF[1], Z_H_Read_BUF[1]);
 8001150:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
	sprintf((char *)gyroData_test, "\n Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
 8001154:	461e      	mov	r6, r3
			X_L_Read_BUF[1], X_H_Read_BUF[1], Y_L_Read_BUF[1], Y_H_Read_BUF[1], Z_L_Read_BUF[1], Z_H_Read_BUF[1]);
 8001156:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800115a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800115e:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001162:	f897 0065 	ldrb.w	r0, [r7, #101]	; 0x65
	sprintf((char *)gyroData_test, "\n Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
 8001166:	4604      	mov	r4, r0
 8001168:	4638      	mov	r0, r7
 800116a:	9403      	str	r4, [sp, #12]
 800116c:	9102      	str	r1, [sp, #8]
 800116e:	9201      	str	r2, [sp, #4]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4633      	mov	r3, r6
 8001174:	462a      	mov	r2, r5
 8001176:	490b      	ldr	r1, [pc, #44]	; (80011a4 <l3gd20_Start+0x184>)
 8001178:	f00f f8a6 	bl	80102c8 <siprintf>
	HAL_UART_Transmit(&huart1, gyroData_test, strlen(gyroData_test), 0xFF);
 800117c:	463b      	mov	r3, r7
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f836 	bl	80001f0 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	4639      	mov	r1, r7
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <l3gd20_Start+0x188>)
 800118e:	f007 ff4e 	bl	800902e <HAL_UART_Transmit>

//	sprintf((char *)gyroData_tx, "Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
//			xl_rx[1], xh_rx[1], yl_rx[1], yh_rx[1], zl_rx[1], zh_rx[1]);
//	HAL_UART_Transmit(&huart1, gyroData_tx, strlen(gyroData_tx), 0xFF);

}
 8001192:	bf00      	nop
 8001194:	37a4      	adds	r7, #164	; 0xa4
 8001196:	46bd      	mov	sp, r7
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	bf00      	nop
 800119c:	40020800 	.word	0x40020800
 80011a0:	2000063c 	.word	0x2000063c
 80011a4:	08010b88 	.word	0x08010b88
 80011a8:	200007cc 	.word	0x200007cc

080011ac <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2234      	movs	r2, #52	; 0x34
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00e ff6f 	bl	801009c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011c0:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <MX_LTDC_Init+0xfc>)
 80011c2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011d6:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80011dc:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011de:	2209      	movs	r2, #9
 80011e0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80011e8:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011ea:	221d      	movs	r2, #29
 80011ec:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011f0:	2203      	movs	r2, #3
 80011f2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011f6:	f240 120d 	movw	r2, #269	; 0x10d
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <MX_LTDC_Init+0xf8>)
 80011fe:	f240 1243 	movw	r2, #323	; 0x143
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <MX_LTDC_Init+0xf8>)
 8001206:	f240 1217 	movw	r2, #279	; 0x117
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <MX_LTDC_Init+0xf8>)
 800120e:	f240 1247 	movw	r2, #327	; 0x147
 8001212:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <MX_LTDC_Init+0xf8>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_LTDC_Init+0xf8>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_LTDC_Init+0xf8>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800122c:	481d      	ldr	r0, [pc, #116]	; (80012a4 <MX_LTDC_Init+0xf8>)
 800122e:	f003 fcef 	bl	8004c10 <HAL_LTDC_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001238:	f000 fa82 	bl	8001740 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001240:	23f0      	movs	r3, #240	; 0xf0
 8001242:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001248:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800124c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800124e:	2302      	movs	r3, #2
 8001250:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001252:	23ff      	movs	r3, #255	; 0xff
 8001254:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001260:	2305      	movs	r3, #5
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001268:	23f0      	movs	r3, #240	; 0xf0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800126c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_LTDC_Init+0xf8>)
 800128c:	f003 fd90 	bl	8004db0 <HAL_LTDC_ConfigLayer>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001296:	f000 fa53 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3738      	adds	r7, #56	; 0x38
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000590 	.word	0x20000590
 80012a8:	40016800 	.word	0x40016800

080012ac <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b09c      	sub	sp, #112	; 0x70
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c8:	2230      	movs	r2, #48	; 0x30
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00e fee5 	bl	801009c <memset>
  if(ltdcHandle->Instance==LTDC)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a90      	ldr	r2, [pc, #576]	; (8001518 <HAL_LTDC_MspInit+0x26c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	f040 8118 	bne.w	800150e <HAL_LTDC_MspInit+0x262>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012de:	2308      	movs	r3, #8
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80012e2:	233c      	movs	r3, #60	; 0x3c
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80012e6:	2302      	movs	r3, #2
 80012e8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012ea:	2300      	movs	r3, #0
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f2:	4618      	mov	r0, r3
 80012f4:	f005 fe78 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80012fe:	f000 fa1f 	bl	8001740 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
 8001306:	4b85      	ldr	r3, [pc, #532]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a84      	ldr	r2, [pc, #528]	; (800151c <HAL_LTDC_MspInit+0x270>)
 800130c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b82      	ldr	r3, [pc, #520]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
 8001322:	4b7e      	ldr	r3, [pc, #504]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a7d      	ldr	r2, [pc, #500]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001328:	f043 0320 	orr.w	r3, r3, #32
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b7b      	ldr	r3, [pc, #492]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
 800133e:	4b77      	ldr	r3, [pc, #476]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a76      	ldr	r2, [pc, #472]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b74      	ldr	r3, [pc, #464]	; (800151c <HAL_LTDC_MspInit+0x270>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	623b      	str	r3, [r7, #32]
 8001354:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	4b70      	ldr	r3, [pc, #448]	; (800151c <HAL_LTDC_MspInit+0x270>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a6f      	ldr	r2, [pc, #444]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b6d      	ldr	r3, [pc, #436]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	4b69      	ldr	r3, [pc, #420]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a68      	ldr	r2, [pc, #416]	; (800151c <HAL_LTDC_MspInit+0x270>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b66      	ldr	r3, [pc, #408]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	4b62      	ldr	r3, [pc, #392]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a61      	ldr	r2, [pc, #388]	; (800151c <HAL_LTDC_MspInit+0x270>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b5f      	ldr	r3, [pc, #380]	; (800151c <HAL_LTDC_MspInit+0x270>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b5b      	ldr	r3, [pc, #364]	; (800151c <HAL_LTDC_MspInit+0x270>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a5a      	ldr	r2, [pc, #360]	; (800151c <HAL_LTDC_MspInit+0x270>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b58      	ldr	r3, [pc, #352]	; (800151c <HAL_LTDC_MspInit+0x270>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_LTDC_MspInit+0x270>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a53      	ldr	r2, [pc, #332]	; (800151c <HAL_LTDC_MspInit+0x270>)
 80013d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <HAL_LTDC_MspInit+0x270>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PG10     ------> LTDC_G3
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013f4:	230e      	movs	r3, #14
 80013f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013fc:	4619      	mov	r1, r3
 80013fe:	4848      	ldr	r0, [pc, #288]	; (8001520 <HAL_LTDC_MspInit+0x274>)
 8001400:	f002 f9ee 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001404:	2308      	movs	r3, #8
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001410:	2302      	movs	r3, #2
 8001412:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001414:	230e      	movs	r3, #14
 8001416:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800141c:	4619      	mov	r1, r3
 800141e:	4841      	ldr	r0, [pc, #260]	; (8001524 <HAL_LTDC_MspInit+0x278>)
 8001420:	f002 f9de 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 8001424:	f641 0350 	movw	r3, #6224	; 0x1850
 8001428:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001436:	230e      	movs	r3, #14
 8001438:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800143e:	4619      	mov	r1, r3
 8001440:	4838      	ldr	r0, [pc, #224]	; (8001524 <HAL_LTDC_MspInit+0x278>)
 8001442:	f002 f9cd 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001446:	2303      	movs	r3, #3
 8001448:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001456:	2309      	movs	r3, #9
 8001458:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800145e:	4619      	mov	r1, r3
 8001460:	4831      	ldr	r0, [pc, #196]	; (8001528 <HAL_LTDC_MspInit+0x27c>)
 8001462:	f002 f9bd 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001466:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800146a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001478:	230e      	movs	r3, #14
 800147a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001480:	4619      	mov	r1, r3
 8001482:	482a      	ldr	r0, [pc, #168]	; (800152c <HAL_LTDC_MspInit+0x280>)
 8001484:	f002 f9ac 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001488:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800148c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800149a:	230e      	movs	r3, #14
 800149c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4820      	ldr	r0, [pc, #128]	; (8001528 <HAL_LTDC_MspInit+0x27c>)
 80014a6:	f002 f99b 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80014aa:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80014ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014bc:	230e      	movs	r3, #14
 80014be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014c4:	4619      	mov	r1, r3
 80014c6:	481a      	ldr	r0, [pc, #104]	; (8001530 <HAL_LTDC_MspInit+0x284>)
 80014c8:	f002 f98a 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014cc:	23c0      	movs	r3, #192	; 0xc0
 80014ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014dc:	230e      	movs	r3, #14
 80014de:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014e4:	4619      	mov	r1, r3
 80014e6:	4813      	ldr	r0, [pc, #76]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 80014e8:	f002 f97a 	bl	80037e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014fe:	2309      	movs	r3, #9
 8001500:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001502:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001506:	4619      	mov	r1, r3
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <HAL_LTDC_MspInit+0x28c>)
 800150a:	f002 f969 	bl	80037e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3770      	adds	r7, #112	; 0x70
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40016800 	.word	0x40016800
 800151c:	40023800 	.word	0x40023800
 8001520:	40021400 	.word	0x40021400
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40021000 	.word	0x40021000
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40020800 	.word	0x40020800
 8001538:	40021800 	.word	0x40021800

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001540:	f000 ff52 	bl	80023e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001544:	f000 f820 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001548:	f7ff fbc6 	bl	8000cd8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800154c:	f000 feb0 	bl	80022b0 <MX_USART1_UART_Init>
  MX_SPI5_Init();
 8001550:	f000 f8fc 	bl	800174c <MX_SPI5_Init>
  MX_I2C3_Init();
 8001554:	f7ff fc9c 	bl	8000e90 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001558:	f7ff fe28 	bl	80011ac <MX_LTDC_Init>
  MX_TIM1_Init();
 800155c:	f000 fc7c 	bl	8001e58 <MX_TIM1_Init>
  MX_TIM10_Init();
 8001560:	f000 fd34 	bl	8001fcc <MX_TIM10_Init>
  MX_TIM7_Init();
 8001564:	f000 fcfc 	bl	8001f60 <MX_TIM7_Init>
  MX_ADC1_Init();
 8001568:	f7ff f81c 	bl	80005a4 <MX_ADC1_Init>
  MX_CAN1_Init();
 800156c:	f7ff f8e8 	bl	8000740 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001570:	f7ff f942 	bl	80007f8 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  l3gd20Init();
 8001574:	f7ff fd36 	bl	8000fe4 <l3gd20Init>
  stmpe811_init();
 8001578:	f000 fa7e 	bl	8001a78 <stmpe811_init>
  //HAL_TIM_Base_Start_IT(&htim1); // TIM -> disable (Cause RTOS)

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();  // Free RTOS INIT
 800157c:	f7ff fabe 	bl	8000afc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();  // Free RTOS Enable
 8001580:	f00b fcc4 	bl	800cf0c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001584:	e7fe      	b.n	8001584 <main+0x48>
	...

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	; 0x50
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	2230      	movs	r2, #48	; 0x30
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f00e fd80 	bl	801009c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <SystemClock_Config+0xcc>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a27      	ldr	r2, [pc, #156]	; (8001654 <SystemClock_Config+0xcc>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <SystemClock_Config+0xcc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <SystemClock_Config+0xd0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <SystemClock_Config+0xd0>)
 80015d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <SystemClock_Config+0xd0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ee:	2302      	movs	r3, #2
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f8:	2304      	movs	r3, #4
 80015fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015fc:	23a8      	movs	r3, #168	; 0xa8
 80015fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001600:	2302      	movs	r3, #2
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001604:	2307      	movs	r3, #7
 8001606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	4618      	mov	r0, r3
 800160e:	f005 f821 	bl	8006654 <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001618:	f000 f892 	bl	8001740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161c:	230f      	movs	r3, #15
 800161e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001620:	2302      	movs	r3, #2
 8001622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800162c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2105      	movs	r1, #5
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fa82 	bl	8006b44 <HAL_RCC_ClockConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001646:	f000 f87b 	bl	8001740 <Error_Handler>
  }
}
 800164a:	bf00      	nop
 800164c:	3750      	adds	r7, #80	; 0x50
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000

0800165c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d104      	bne.n	8001676 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		osSemaphoreRelease(hBinarySem01Handle);
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_GPIO_EXTI_Callback+0x24>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f00b fd33 	bl	800d0dc <osSemaphoreRelease>
	}
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000284 	.word	0x20000284

08001684 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 flag = 1;
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000638 	.word	0x20000638

080016a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12f      	bne.n	8001716 <HAL_TIM_PeriodElapsedCallback+0x72>
  {
		uint8_t flag;

		flag++;
 80016b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016ba:	3301      	adds	r3, #1
 80016bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t ff[30]={0};
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	831a      	strh	r2, [r3, #24]
		sprintf((char *)ff,"\n Interrupt count : %d \r\n",flag);
 80016d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	4913      	ldr	r1, [pc, #76]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00e fdf0 	bl	80102c8 <siprintf>
		HAL_UART_Transmit(&huart1, ff, strlen(ff), 0xFF);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fd7f 	bl	80001f0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f107 0108 	add.w	r1, r7, #8
 80016fa:	23ff      	movs	r3, #255	; 0xff
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016fe:	f007 fc96 	bl	800902e <HAL_UART_Transmit>

		if(flag==0xFF)
 8001702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001706:	2bff      	cmp	r3, #255	; 0xff
 8001708:	d105      	bne.n	8001716 <HAL_TIM_PeriodElapsedCallback+0x72>
		{
	      flag=0;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      HAL_TIM_Base_Stop_IT(&htim1);
 8001710:	4809      	ldr	r0, [pc, #36]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001712:	f006 fdaf 	bl	8008274 <HAL_TIM_Base_Stop_IT>
		}
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_TIM_PeriodElapsedCallback+0x80>
    HAL_IncTick();
 8001720:	f000 fe84 	bl	800242c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	; 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40010000 	.word	0x40010000
 8001730:	08010bc0 	.word	0x08010bc0
 8001734:	200007cc 	.word	0x200007cc
 8001738:	200006f0 	.word	0x200006f0
 800173c:	40001000 	.word	0x40001000

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x8>
	...

0800174c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001752:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <MX_SPI5_Init+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001758:	f44f 7282 	mov.w	r2, #260	; 0x104
 800175c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_SPI5_Init+0x64>)
 800176c:	2202      	movs	r2, #2
 800176e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001772:	2201      	movs	r2, #1
 8001774:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001780:	2218      	movs	r2, #24
 8001782:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_SPI5_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_SPI5_Init+0x64>)
 8001798:	220a      	movs	r2, #10
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_SPI5_Init+0x64>)
 800179e:	f005 fde3 	bl	8007368 <HAL_SPI_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80017a8:	f7ff ffca 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2000063c 	.word	0x2000063c
 80017b4:	40015000 	.word	0x40015000

080017b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_SPI_MspInit+0x94>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d134      	bne.n	8001844 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_SPI_MspInit+0x98>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <HAL_SPI_MspInit+0x98>)
 80017e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_SPI_MspInit+0x98>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_SPI_MspInit+0x98>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_SPI_MspInit+0x98>)
 8001800:	f043 0320 	orr.w	r3, r3, #32
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_SPI_MspInit+0x98>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001812:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001824:	2305      	movs	r3, #5
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4809      	ldr	r0, [pc, #36]	; (8001854 <HAL_SPI_MspInit+0x9c>)
 8001830:	f001 ffd6 	bl	80037e0 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 7, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2107      	movs	r1, #7
 8001838:	2055      	movs	r0, #85	; 0x55
 800183a:	f001 ff85 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 800183e:	2055      	movs	r0, #85	; 0x55
 8001840:	f001 ff9e 	bl	8003780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40015000 	.word	0x40015000
 8001850:	40023800 	.word	0x40023800
 8001854:	40021400 	.word	0x40021400

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_MspInit+0x54>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_MspInit+0x54>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_MspInit+0x54>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_MspInit+0x54>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_MspInit+0x54>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_MspInit+0x54>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	210f      	movs	r1, #15
 800189a:	f06f 0001 	mvn.w	r0, #1
 800189e:	f001 ff53 	bl	8003748 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	; 0x38
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_InitTick+0xe4>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a32      	ldr	r2, [pc, #200]	; (8001994 <HAL_InitTick+0xe4>)
 80018ca:	f043 0310 	orr.w	r3, r3, #16
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_InitTick+0xe4>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018dc:	f107 0210 	add.w	r2, r7, #16
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 fb4c 	bl	8006f84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018f6:	f005 fb1d 	bl	8006f34 <HAL_RCC_GetPCLK1Freq>
 80018fa:	6378      	str	r0, [r7, #52]	; 0x34
 80018fc:	e004      	b.n	8001908 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018fe:	f005 fb19 	bl	8006f34 <HAL_RCC_GetPCLK1Freq>
 8001902:	4603      	mov	r3, r0
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190a:	4a23      	ldr	r2, [pc, #140]	; (8001998 <HAL_InitTick+0xe8>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0c9b      	lsrs	r3, r3, #18
 8001912:	3b01      	subs	r3, #1
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_InitTick+0xec>)
 8001918:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <HAL_InitTick+0xf0>)
 800191a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_InitTick+0xec>)
 800191e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001922:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001924:	4a1d      	ldr	r2, [pc, #116]	; (800199c <HAL_InitTick+0xec>)
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001928:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_InitTick+0xec>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_InitTick+0xec>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_InitTick+0xec>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800193c:	4817      	ldr	r0, [pc, #92]	; (800199c <HAL_InitTick+0xec>)
 800193e:	f006 fbd9 	bl	80080f4 <HAL_TIM_Base_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001948:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800194c:	2b00      	cmp	r3, #0
 800194e:	d11b      	bne.n	8001988 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001950:	4812      	ldr	r0, [pc, #72]	; (800199c <HAL_InitTick+0xec>)
 8001952:	f006 fc1f 	bl	8008194 <HAL_TIM_Base_Start_IT>
 8001956:	4603      	mov	r3, r0
 8001958:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800195c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001960:	2b00      	cmp	r3, #0
 8001962:	d111      	bne.n	8001988 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001964:	2036      	movs	r0, #54	; 0x36
 8001966:	f001 ff0b 	bl	8003780 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d808      	bhi.n	8001982 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	2036      	movs	r0, #54	; 0x36
 8001976:	f001 fee7 	bl	8003748 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_InitTick+0xf4>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e002      	b.n	8001988 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001988:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800198c:	4618      	mov	r0, r3
 800198e:	3738      	adds	r7, #56	; 0x38
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	431bde83 	.word	0x431bde83
 800199c:	20000694 	.word	0x20000694
 80019a0:	40001000 	.word	0x40001000
 80019a4:	20000014 	.word	0x20000014

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <MemManage_Handler+0x4>

080019ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80019d8:	2001      	movs	r0, #1
 80019da:	f002 f8c7 	bl	8003b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <CAN1_RX0_IRQHandler+0x10>)
 80019ea:	f001 fbc5 	bl	8003178 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000021c 	.word	0x2000021c

080019f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <TIM1_UP_TIM10_IRQHandler+0x14>)
 80019fe:	f006 fd7f 	bl	8008500 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001a04:	f006 fd7c 	bl	8008500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200006f0 	.word	0x200006f0
 8001a10:	20000780 	.word	0x20000780

08001a14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM6_DAC_IRQHandler+0x10>)
 8001a1a:	f006 fd71 	bl	8008500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000694 	.word	0x20000694

08001a28 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <CAN2_RX0_IRQHandler+0x10>)
 8001a2e:	f001 fba3 	bl	8003178 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000244 	.word	0x20000244

08001a3c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <CAN2_RX1_IRQHandler+0x10>)
 8001a42:	f001 fb99 	bl	8003178 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000244 	.word	0x20000244

08001a50 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <OTG_HS_IRQHandler+0x10>)
 8001a56:	f003 fcd0 	bl	80053fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20005a48 	.word	0x20005a48

08001a64 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <SPI5_IRQHandler+0x10>)
 8001a6a:	f006 f8f5 	bl	8007c58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000063c 	.word	0x2000063c

08001a78 <stmpe811_init>:
uint16_t STMPE811_addr=0x82;
uint8_t T_buffer[8];
uint8_t R_buffer[8];

void stmpe811_init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af04      	add	r7, sp, #16
    T_buffer[7] = 0x00;
 8001a7e:	4b77      	ldr	r3, [pc, #476]	; (8001c5c <stmpe811_init+0x1e4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	71da      	strb	r2, [r3, #7]
    R_buffer[7] = 0x00;
 8001a84:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <stmpe811_init+0x1e8>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	71da      	strb	r2, [r3, #7]

    T_buffer[0] = 0x02;  // Reset bit 1
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <stmpe811_init+0x1e4>)
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x03, 1, T_buffer, 1, 1000);
 8001a90:	4b74      	ldr	r3, [pc, #464]	; (8001c64 <stmpe811_init+0x1ec>)
 8001a92:	8819      	ldrh	r1, [r3, #0]
 8001a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a98:	9302      	str	r3, [sp, #8]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <stmpe811_init+0x1e4>)
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	4870      	ldr	r0, [pc, #448]	; (8001c68 <stmpe811_init+0x1f0>)
 8001aa8:	f002 f9bc 	bl	8003e24 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8001aac:	200a      	movs	r0, #10
 8001aae:	f000 fcdd 	bl	800246c <HAL_Delay>

    T_buffer[0] = 0x00;  // Reset bit 0
 8001ab2:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <stmpe811_init+0x1e4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x03, 1, T_buffer, 1, 1000);
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <stmpe811_init+0x1ec>)
 8001aba:	8819      	ldrh	r1, [r3, #0]
 8001abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <stmpe811_init+0x1e4>)
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	4866      	ldr	r0, [pc, #408]	; (8001c68 <stmpe811_init+0x1f0>)
 8001ad0:	f002 f9a8 	bl	8003e24 <HAL_I2C_Mem_Write>
    HAL_Delay(2);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f000 fcc9 	bl	800246c <HAL_Delay>

    T_buffer[0] = 0x08;  // GPIO, TSC, ADC clock on
 8001ada:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <stmpe811_init+0x1e4>)
 8001adc:	2208      	movs	r2, #8
 8001ade:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x04, 1, T_buffer, 1, 1000);
 8001ae0:	4b60      	ldr	r3, [pc, #384]	; (8001c64 <stmpe811_init+0x1ec>)
 8001ae2:	8819      	ldrh	r1, [r3, #0]
 8001ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae8:	9302      	str	r3, [sp, #8]
 8001aea:	2301      	movs	r3, #1
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <stmpe811_init+0x1e4>)
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2204      	movs	r2, #4
 8001af6:	485c      	ldr	r0, [pc, #368]	; (8001c68 <stmpe811_init+0x1f0>)
 8001af8:	f002 f994 	bl	8003e24 <HAL_I2C_Mem_Write>

    T_buffer[0] = 0x49;  // sampling time: 80, 12-bit ADC
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <stmpe811_init+0x1e4>)
 8001afe:	2249      	movs	r2, #73	; 0x49
 8001b00:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x20, 1, T_buffer, 1, 1000);
 8001b02:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <stmpe811_init+0x1ec>)
 8001b04:	8819      	ldrh	r1, [r3, #0]
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <stmpe811_init+0x1e4>)
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	2220      	movs	r2, #32
 8001b18:	4853      	ldr	r0, [pc, #332]	; (8001c68 <stmpe811_init+0x1f0>)
 8001b1a:	f002 f983 	bl	8003e24 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f000 fca4 	bl	800246c <HAL_Delay>

    T_buffer[0] = 0x01;  // ADC frequency: 3.25MHz
 8001b24:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <stmpe811_init+0x1e4>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x21, 1, T_buffer, 1, 1000);
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	; (8001c64 <stmpe811_init+0x1ec>)
 8001b2c:	8819      	ldrh	r1, [r3, #0]
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	2301      	movs	r3, #1
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <stmpe811_init+0x1e4>)
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	2221      	movs	r2, #33	; 0x21
 8001b40:	4849      	ldr	r0, [pc, #292]	; (8001c68 <stmpe811_init+0x1f0>)
 8001b42:	f002 f96f 	bl	8003e24 <HAL_I2C_Mem_Write>

    T_buffer[0] = 0x9A;  // Average 4 samples, detect delay 500 us, settling time 500 us
 8001b46:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <stmpe811_init+0x1e4>)
 8001b48:	229a      	movs	r2, #154	; 0x9a
 8001b4a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x41, 1, T_buffer, 1, 1000);
 8001b4c:	4b45      	ldr	r3, [pc, #276]	; (8001c64 <stmpe811_init+0x1ec>)
 8001b4e:	8819      	ldrh	r1, [r3, #0]
 8001b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	2301      	movs	r3, #1
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <stmpe811_init+0x1e4>)
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	2241      	movs	r2, #65	; 0x41
 8001b62:	4841      	ldr	r0, [pc, #260]	; (8001c68 <stmpe811_init+0x1f0>)
 8001b64:	f002 f95e 	bl	8003e24 <HAL_I2C_Mem_Write>

    T_buffer[0] = 0x01;  // FIFO threshold: 0x01
 8001b68:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <stmpe811_init+0x1e4>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x4A, 1, T_buffer, 1, 1000);
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <stmpe811_init+0x1ec>)
 8001b70:	8819      	ldrh	r1, [r3, #0]
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	9302      	str	r3, [sp, #8]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <stmpe811_init+0x1e4>)
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	224a      	movs	r2, #74	; 0x4a
 8001b84:	4838      	ldr	r0, [pc, #224]	; (8001c68 <stmpe811_init+0x1f0>)
 8001b86:	f002 f94d 	bl	8003e24 <HAL_I2C_Mem_Write>

    T_buffer[0] = 0x01;  // Reset FIFO bit 1
 8001b8a:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <stmpe811_init+0x1e4>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x4B, 1, T_buffer, 1, 1000);
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <stmpe811_init+0x1ec>)
 8001b92:	8819      	ldrh	r1, [r3, #0]
 8001b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b98:	9302      	str	r3, [sp, #8]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <stmpe811_init+0x1e4>)
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	224b      	movs	r2, #75	; 0x4b
 8001ba6:	4830      	ldr	r0, [pc, #192]	; (8001c68 <stmpe811_init+0x1f0>)
 8001ba8:	f002 f93c 	bl	8003e24 <HAL_I2C_Mem_Write>

    T_buffer[0] = 0x00;  // Reset FIFO bit 0
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <stmpe811_init+0x1e4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x4B, 1, T_buffer, 1, 1000);
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <stmpe811_init+0x1ec>)
 8001bb4:	8819      	ldrh	r1, [r3, #0]
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <stmpe811_init+0x1e4>)
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	224b      	movs	r2, #75	; 0x4b
 8001bc8:	4827      	ldr	r0, [pc, #156]	; (8001c68 <stmpe811_init+0x1f0>)
 8001bca:	f002 f92b 	bl	8003e24 <HAL_I2C_Mem_Write>

    T_buffer[0] = 0x01;  // Touchscreen controller fraction: 1, whole part: 7
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <stmpe811_init+0x1e4>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x56, 1, T_buffer, 1, 1000);
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <stmpe811_init+0x1ec>)
 8001bd6:	8819      	ldrh	r1, [r3, #0]
 8001bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	2301      	movs	r3, #1
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <stmpe811_init+0x1e4>)
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2301      	movs	r3, #1
 8001be8:	2256      	movs	r2, #86	; 0x56
 8001bea:	481f      	ldr	r0, [pc, #124]	; (8001c68 <stmpe811_init+0x1f0>)
 8001bec:	f002 f91a 	bl	8003e24 <HAL_I2C_Mem_Write>

    T_buffer[0] = 0x01;  // Maximum current of TSC: 80mA
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <stmpe811_init+0x1e4>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x58, 1, T_buffer, 1, 1000);
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <stmpe811_init+0x1ec>)
 8001bf8:	8819      	ldrh	r1, [r3, #0]
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	9302      	str	r3, [sp, #8]
 8001c00:	2301      	movs	r3, #1
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <stmpe811_init+0x1e4>)
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	2258      	movs	r2, #88	; 0x58
 8001c0c:	4816      	ldr	r0, [pc, #88]	; (8001c68 <stmpe811_init+0x1f0>)
 8001c0e:	f002 f909 	bl	8003e24 <HAL_I2C_Mem_Write>

    T_buffer[0] = 0xFF;  // Clear all interrupt status
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <stmpe811_init+0x1e4>)
 8001c14:	22ff      	movs	r2, #255	; 0xff
 8001c16:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x0B, 1, T_buffer, 1, 1000);
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <stmpe811_init+0x1ec>)
 8001c1a:	8819      	ldrh	r1, [r3, #0]
 8001c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c20:	9302      	str	r3, [sp, #8]
 8001c22:	2301      	movs	r3, #1
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <stmpe811_init+0x1e4>)
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	220b      	movs	r2, #11
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <stmpe811_init+0x1f0>)
 8001c30:	f002 f8f8 	bl	8003e24 <HAL_I2C_Mem_Write>

    T_buffer[0] = 0x01;  // Enable TSC
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <stmpe811_init+0x1e4>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x40, 1, T_buffer, 1, 1000);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <stmpe811_init+0x1ec>)
 8001c3c:	8819      	ldrh	r1, [r3, #0]
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2301      	movs	r3, #1
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <stmpe811_init+0x1e4>)
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	2240      	movs	r2, #64	; 0x40
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <stmpe811_init+0x1f0>)
 8001c52:	f002 f8e7 	bl	8003e24 <HAL_I2C_Mem_Write>

}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200006dc 	.word	0x200006dc
 8001c60:	200006e4 	.word	0x200006e4
 8001c64:	20000008 	.word	0x20000008
 8001c68:	2000053c 	.word	0x2000053c

08001c6c <stmpe811_read>:

uint8_t stmpe811_read(uint8_t* x, uint8_t* y)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af04      	add	r7, sp, #16
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
       HAL_I2C_Mem_Read(&hi2c3, STMPE811_addr, 0x40, 1, R_buffer, 1, 1000);
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <stmpe811_read+0xe4>)
 8001c78:	8819      	ldrh	r1, [r3, #0]
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2301      	movs	r3, #1
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <stmpe811_read+0xe8>)
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	4832      	ldr	r0, [pc, #200]	; (8001d58 <stmpe811_read+0xec>)
 8001c8e:	f002 f9c3 	bl	8004018 <HAL_I2C_Mem_Read>
       HAL_Delay(1);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f000 fbea 	bl	800246c <HAL_Delay>

       if (R_buffer[0] & 0x80)  // if touch is detected
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <stmpe811_read+0xe8>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	da51      	bge.n	8001d46 <stmpe811_read+0xda>
       {
		  // FIFO number
		  HAL_I2C_Mem_Read(&hi2c3, STMPE811_addr, 0x4C, 1, R_buffer + 1, 1, 1000);
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <stmpe811_read+0xe4>)
 8001ca4:	8819      	ldrh	r1, [r3, #0]
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <stmpe811_read+0xf0>)
 8001ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cac:	9202      	str	r2, [sp, #8]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	9201      	str	r2, [sp, #4]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	224c      	movs	r2, #76	; 0x4c
 8001cb8:	4827      	ldr	r0, [pc, #156]	; (8001d58 <stmpe811_read+0xec>)
 8001cba:	f002 f9ad 	bl	8004018 <HAL_I2C_Mem_Read>
		  // x, y, and z(pressure) data
		  // 0xD7 STMPE611 non-auto-increment
		  // 0x07 STMPE811 non-auto-increment
		  HAL_I2C_Mem_Read(&hi2c3, STMPE811_addr, 0xD7, 1, R_buffer + 2, 4, 1000);
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <stmpe811_read+0xe4>)
 8001cc0:	8819      	ldrh	r1, [r3, #0]
 8001cc2:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <stmpe811_read+0xf4>)
 8001cc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc8:	9202      	str	r2, [sp, #8]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	9201      	str	r2, [sp, #4]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	22d7      	movs	r2, #215	; 0xd7
 8001cd4:	4820      	ldr	r0, [pc, #128]	; (8001d58 <stmpe811_read+0xec>)
 8001cd6:	f002 f99f 	bl	8004018 <HAL_I2C_Mem_Read>
       else
       {
        return 0;
       }

       *x = (R_buffer[2] << 4) | (R_buffer[3] >> 4);
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <stmpe811_read+0xe8>)
 8001cdc:	789b      	ldrb	r3, [r3, #2]
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	b25a      	sxtb	r2, r3
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <stmpe811_read+0xe8>)
 8001ce4:	78db      	ldrb	r3, [r3, #3]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	b25b      	sxtb	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	701a      	strb	r2, [r3, #0]
       *y = ((R_buffer[3] & 0x0F) <<8) | R_buffer[4];
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <stmpe811_read+0xe8>)
 8001cf8:	791a      	ldrb	r2, [r3, #4]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	701a      	strb	r2, [r3, #0]
//     *z = R_buffer[5];  // for debugging
       T_buffer[0] = 0x01;  // Reset FIFO bit 1
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <stmpe811_read+0xf8>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
       HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x4B, 1, T_buffer, 1, 1000);
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <stmpe811_read+0xe4>)
 8001d06:	8819      	ldrh	r1, [r3, #0]
 8001d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0c:	9302      	str	r3, [sp, #8]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <stmpe811_read+0xf8>)
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2301      	movs	r3, #1
 8001d18:	224b      	movs	r2, #75	; 0x4b
 8001d1a:	480f      	ldr	r0, [pc, #60]	; (8001d58 <stmpe811_read+0xec>)
 8001d1c:	f002 f882 	bl	8003e24 <HAL_I2C_Mem_Write>

       T_buffer[0] = 0x00;  // Reset FIFO bit 0
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <stmpe811_read+0xf8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
       HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x4B, 1, T_buffer, 1, 1000);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <stmpe811_read+0xe4>)
 8001d28:	8819      	ldrh	r1, [r3, #0]
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	2301      	movs	r3, #1
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <stmpe811_read+0xf8>)
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	224b      	movs	r2, #75	; 0x4b
 8001d3c:	4806      	ldr	r0, [pc, #24]	; (8001d58 <stmpe811_read+0xec>)
 8001d3e:	f002 f871 	bl	8003e24 <HAL_I2C_Mem_Write>

       return 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <stmpe811_read+0xdc>
        return 0;
 8001d46:	2300      	movs	r3, #0

}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000008 	.word	0x20000008
 8001d54:	200006e4 	.word	0x200006e4
 8001d58:	2000053c 	.word	0x2000053c
 8001d5c:	200006e5 	.word	0x200006e5
 8001d60:	200006e6 	.word	0x200006e6
 8001d64:	200006dc 	.word	0x200006dc

08001d68 <stmpe811_Test>:

void stmpe811_Test(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09a      	sub	sp, #104	; 0x68
 8001d6c:	af00      	add	r7, sp, #0
	//ili9341 Touch Screen
//	uint16_t frame_buffer[76800];  // frame buffer for 240 x 320 TFT-LCD
	uint16_t x0 = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t y0 = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
//	unsigned char n_str1[12];
//	unsigned char n_str2[12];
//	unsigned char n_str3[12];
//	unsigned char n_str4[12];
//
	stmpe811_read(&x0, &y0);
 8001d7a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001d7e:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff71 	bl	8001c6c <stmpe811_read>
//	else
//	{
//	   ILI9341_str(100, 50, 24, 0xFFFF, 0xFFFF, c_str4);
//	}

	uint8_t i2cdata[100]={0, };
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2260      	movs	r2, #96	; 0x60
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00e f981 	bl	801009c <memset>
	sprintf((char *)&i2cdata, "\n location : %d %d\r\n", x0, y0);
 8001d9a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001da4:	4638      	mov	r0, r7
 8001da6:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <stmpe811_Test+0x58>)
 8001da8:	f00e fa8e 	bl	80102c8 <siprintf>
	HAL_UART_Transmit(&huart1, i2cdata, 50, 0xFF);
 8001dac:	4639      	mov	r1, r7
 8001dae:	23ff      	movs	r3, #255	; 0xff
 8001db0:	2232      	movs	r2, #50	; 0x32
 8001db2:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <stmpe811_Test+0x5c>)
 8001db4:	f007 f93b 	bl	800902e <HAL_UART_Transmit>
	//		ILI9341_str(165, 90, 20, 0xFFFF, 0x001F, n_str1);
	//		ILI9341_str(235, 90, 20, 0xFFFF, 0x001F, n_str2);
	//		ILI9341_str(175, 120, 20, 0xFFFF, 0xF800, n_str3);
	//		ILI9341_str(245, 120, 20, 0xFFFF, 0xF800, n_str4);
	//		HAL_Delay(200);
}
 8001db8:	bf00      	nop
 8001dba:	3768      	adds	r7, #104	; 0x68
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	08010bdc 	.word	0x08010bdc
 8001dc4:	200007cc 	.word	0x200007cc

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <_sbrk+0x5c>)
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <_sbrk+0x60>)
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <_sbrk+0x64>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <_sbrk+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d207      	bcs.n	8001e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df8:	f00e f916 	bl	8010028 <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	220c      	movs	r2, #12
 8001e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e009      	b.n	8001e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <_sbrk+0x64>)
 8001e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20030000 	.word	0x20030000
 8001e28:	00000400 	.word	0x00000400
 8001e2c:	200006ec 	.word	0x200006ec
 8001e30:	20006188 	.word	0x20006188

08001e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <SystemInit+0x20>)
 8001e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <SystemInit+0x20>)
 8001e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b092      	sub	sp, #72	; 0x48
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
 8001e78:	615a      	str	r2, [r3, #20]
 8001e7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2220      	movs	r2, #32
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f00e f90a 	bl	801009c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e88:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001e8a:	4a34      	ldr	r2, [pc, #208]	; (8001f5c <MX_TIM1_Init+0x104>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 41.99-1;
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001e90:	2228      	movs	r2, #40	; 0x28
 8001e92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001e9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ea0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eb4:	4828      	ldr	r0, [pc, #160]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001eb6:	f006 fa0c 	bl	80082d2 <HAL_TIM_PWM_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ec0:	f7ff fc3e 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4821      	ldr	r0, [pc, #132]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001ed4:	f006 ff7c 	bl	8008dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ede:	f7ff fc2f 	bl	8001740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee2:	2360      	movs	r3, #96	; 0x60
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 41999;
 8001ee6:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f04:	2200      	movs	r2, #0
 8001f06:	4619      	mov	r1, r3
 8001f08:	4813      	ldr	r0, [pc, #76]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001f0a:	f006 fc01 	bl	8008710 <HAL_TIM_PWM_ConfigChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001f14:	f7ff fc14 	bl	8001740 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4807      	ldr	r0, [pc, #28]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001f3c:	f006 ffc4 	bl	8008ec8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001f46:	f7ff fbfb 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <MX_TIM1_Init+0x100>)
 8001f4c:	f000 f8f2 	bl	8002134 <HAL_TIM_MspPostInit>

}
 8001f50:	bf00      	nop
 8001f52:	3748      	adds	r7, #72	; 0x48
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200006f0 	.word	0x200006f0
 8001f5c:	40010000 	.word	0x40010000

08001f60 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f66:	463b      	mov	r3, r7
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f70:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <MX_TIM7_Init+0x68>)
 8001f72:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f86:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f8e:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001f90:	f006 f8b0 	bl	80080f4 <HAL_TIM_Base_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f9a:	f7ff fbd1 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4806      	ldr	r0, [pc, #24]	; (8001fc4 <MX_TIM7_Init+0x64>)
 8001fac:	f006 ff10 	bl	8008dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001fb6:	f7ff fbc3 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000738 	.word	0x20000738
 8001fc8:	40001400 	.word	0x40001400

08001fcc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	615a      	str	r2, [r3, #20]
 8001fe2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <MX_TIM10_Init+0x94>)
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <MX_TIM10_Init+0x98>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 41.99-1;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <MX_TIM10_Init+0x94>)
 8001fec:	2228      	movs	r2, #40	; 0x28
 8001fee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <MX_TIM10_Init+0x94>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <MX_TIM10_Init+0x94>)
 8001ff8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ffc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MX_TIM10_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b16      	ldr	r3, [pc, #88]	; (8002060 <MX_TIM10_Init+0x94>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800200a:	4815      	ldr	r0, [pc, #84]	; (8002060 <MX_TIM10_Init+0x94>)
 800200c:	f006 f872 	bl	80080f4 <HAL_TIM_Base_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002016:	f7ff fb93 	bl	8001740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800201a:	4811      	ldr	r0, [pc, #68]	; (8002060 <MX_TIM10_Init+0x94>)
 800201c:	f006 f959 	bl	80082d2 <HAL_TIM_PWM_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002026:	f7ff fb8b 	bl	8001740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202a:	2360      	movs	r3, #96	; 0x60
 800202c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2200      	movs	r2, #0
 800203e:	4619      	mov	r1, r3
 8002040:	4807      	ldr	r0, [pc, #28]	; (8002060 <MX_TIM10_Init+0x94>)
 8002042:	f006 fb65 	bl	8008710 <HAL_TIM_PWM_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800204c:	f7ff fb78 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <MX_TIM10_Init+0x94>)
 8002052:	f000 f86f 	bl	8002134 <HAL_TIM_MspPostInit>

}
 8002056:	bf00      	nop
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000780 	.word	0x20000780
 8002064:	40014400 	.word	0x40014400

08002068 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <HAL_TIM_PWM_MspInit+0x48>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d115      	bne.n	80020a6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_TIM_PWM_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <HAL_TIM_PWM_MspInit+0x4c>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_TIM_PWM_MspInit+0x4c>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2106      	movs	r1, #6
 800209a:	2019      	movs	r0, #25
 800209c:	f001 fb54 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020a0:	2019      	movs	r0, #25
 80020a2:	f001 fb6d 	bl	8003780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40023800 	.word	0x40023800

080020b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_TIM_Base_MspInit+0x70>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_TIM_Base_MspInit+0x74>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a16      	ldr	r2, [pc, #88]	; (800212c <HAL_TIM_Base_MspInit+0x74>)
 80020d4:	f043 0320 	orr.w	r3, r3, #32
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_TIM_Base_MspInit+0x74>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80020e6:	e01a      	b.n	800211e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_TIM_Base_MspInit+0x78>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d115      	bne.n	800211e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_TIM_Base_MspInit+0x74>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a0c      	ldr	r2, [pc, #48]	; (800212c <HAL_TIM_Base_MspInit+0x74>)
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_TIM_Base_MspInit+0x74>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2106      	movs	r1, #6
 8002112:	2019      	movs	r0, #25
 8002114:	f001 fb18 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002118:	2019      	movs	r0, #25
 800211a:	f001 fb31 	bl	8003780 <HAL_NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40001400 	.word	0x40001400
 800212c:	40023800 	.word	0x40023800
 8002130:	40014400 	.word	0x40014400

08002134 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_TIM_MspPostInit+0xb0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d11f      	bne.n	8002196 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_TIM_MspPostInit+0xb4>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_TIM_MspPostInit+0xb4>)
 8002160:	f043 0310 	orr.w	r3, r3, #16
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_TIM_MspPostInit+0xb4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_PIN_Pin;
 8002172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002184:	2301      	movs	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM1_PIN_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	4817      	ldr	r0, [pc, #92]	; (80021ec <HAL_TIM_MspPostInit+0xb8>)
 8002190:	f001 fb26 	bl	80037e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002194:	e022      	b.n	80021dc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM10)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <HAL_TIM_MspPostInit+0xbc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d11d      	bne.n	80021dc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_TIM_MspPostInit+0xb4>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_TIM_MspPostInit+0xb4>)
 80021aa:	f043 0320 	orr.w	r3, r3, #32
 80021ae:	6313      	str	r3, [r2, #48]	; 0x30
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_TIM_MspPostInit+0xb4>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM10_PIN_Pin;
 80021bc:	2340      	movs	r3, #64	; 0x40
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80021cc:	2303      	movs	r3, #3
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM10_PIN_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4807      	ldr	r0, [pc, #28]	; (80021f4 <HAL_TIM_MspPostInit+0xc0>)
 80021d8:	f001 fb02 	bl	80037e0 <HAL_GPIO_Init>
}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40014400 	.word	0x40014400
 80021f4:	40021400 	.word	0x40021400

080021f8 <pwm_duty_control>:

uint16_t arr=0;
uint16_t pul_count=41999;

void pwm_duty_control(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b09a      	sub	sp, #104	; 0x68
 80021fc:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80021fe:	2100      	movs	r1, #0
 8002200:	4824      	ldr	r0, [pc, #144]	; (8002294 <pwm_duty_control+0x9c>)
 8002202:	f006 f8b5 	bl	8008370 <HAL_TIM_PWM_Start>
   // TIM1->CCR1 = (uint16_t)(41999-(uint16_t)(419.99*50));
   // duty 50% change
   //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);

   arr++;
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <pwm_duty_control+0xa0>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <pwm_duty_control+0xa0>)
 8002210:	801a      	strh	r2, [r3, #0]
   if(arr >= 100)arr=0;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <pwm_duty_control+0xa0>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	2b63      	cmp	r3, #99	; 0x63
 8002218:	d902      	bls.n	8002220 <pwm_duty_control+0x28>
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <pwm_duty_control+0xa0>)
 800221c:	2200      	movs	r2, #0
 800221e:	801a      	strh	r2, [r3, #0]
   TIM1->CCR1 = (pul_count-((pul_count/100)*arr));
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <pwm_duty_control+0xa4>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <pwm_duty_control+0xa4>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	4a1d      	ldr	r2, [pc, #116]	; (80022a0 <pwm_duty_control+0xa8>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <pwm_duty_control+0xa0>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	1aca      	subs	r2, r1, r3
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <pwm_duty_control+0xac>)
 8002242:	635a      	str	r2, [r3, #52]	; 0x34
   HAL_Delay(10);
 8002244:	200a      	movs	r0, #10
 8002246:	f000 f911 	bl	800246c <HAL_Delay>

   uint8_t get_in[100]={0, };
 800224a:	2300      	movs	r3, #0
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2260      	movs	r2, #96	; 0x60
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f00d ff21 	bl	801009c <memset>
   unsigned char percen = '%';
 800225a:	2325      	movs	r3, #37	; 0x25
 800225c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   sprintf(&get_in, "Duty rate : %d %c \r\n",(100-arr), percen);
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <pwm_duty_control+0xa0>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8002268:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800226c:	4638      	mov	r0, r7
 800226e:	490e      	ldr	r1, [pc, #56]	; (80022a8 <pwm_duty_control+0xb0>)
 8002270:	f00e f82a 	bl	80102c8 <siprintf>
   HAL_UART_Transmit(&huart1, get_in, strlen(get_in), 0xff);
 8002274:	463b      	mov	r3, r7
 8002276:	4618      	mov	r0, r3
 8002278:	f7fd ffba 	bl	80001f0 <strlen>
 800227c:	4603      	mov	r3, r0
 800227e:	b29a      	uxth	r2, r3
 8002280:	4639      	mov	r1, r7
 8002282:	23ff      	movs	r3, #255	; 0xff
 8002284:	4809      	ldr	r0, [pc, #36]	; (80022ac <pwm_duty_control+0xb4>)
 8002286:	f006 fed2 	bl	800902e <HAL_UART_Transmit>

}
 800228a:	bf00      	nop
 800228c:	3768      	adds	r7, #104	; 0x68
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200006f0 	.word	0x200006f0
 8002298:	200007c8 	.word	0x200007c8
 800229c:	20000010 	.word	0x20000010
 80022a0:	51eb851f 	.word	0x51eb851f
 80022a4:	40010000 	.word	0x40010000
 80022a8:	08010bf4 	.word	0x08010bf4
 80022ac:	200007cc 	.word	0x200007cc

080022b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <MX_USART1_UART_Init+0x50>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022e8:	f006 fe54 	bl	8008f94 <HAL_UART_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022f2:	f7ff fa25 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200007cc 	.word	0x200007cc
 8002300:	40011000 	.word	0x40011000

08002304 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <HAL_UART_MspInit+0x84>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d12c      	bne.n	8002380 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_UART_MspInit+0x88>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_UART_MspInit+0x88>)
 8002330:	f043 0310 	orr.w	r3, r3, #16
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_UART_MspInit+0x88>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_UART_MspInit+0x88>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_UART_MspInit+0x88>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_UART_MspInit+0x88>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800235e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002370:	2307      	movs	r3, #7
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_UART_MspInit+0x8c>)
 800237c:	f001 fa30 	bl	80037e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002380:	bf00      	nop
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40011000 	.word	0x40011000
 800238c:	40023800 	.word	0x40023800
 8002390:	40020000 	.word	0x40020000

08002394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002398:	480d      	ldr	r0, [pc, #52]	; (80023d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800239a:	490e      	ldr	r1, [pc, #56]	; (80023d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a0:	e002      	b.n	80023a8 <LoopCopyDataInit>

080023a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a6:	3304      	adds	r3, #4

080023a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ac:	d3f9      	bcc.n	80023a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023b0:	4c0b      	ldr	r4, [pc, #44]	; (80023e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b4:	e001      	b.n	80023ba <LoopFillZerobss>

080023b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b8:	3204      	adds	r2, #4

080023ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023bc:	d3fb      	bcc.n	80023b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023be:	f7ff fd39 	bl	8001e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c2:	f00d fe37 	bl	8010034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c6:	f7ff f8b9 	bl	800153c <main>
  bx  lr    
 80023ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d4:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80023d8:	08010d18 	.word	0x08010d18
  ldr r2, =_sbss
 80023dc:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80023e0:	20006184 	.word	0x20006184

080023e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC_IRQHandler>
	...

080023e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <HAL_Init+0x40>)
 80023f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_Init+0x40>)
 80023fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_Init+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_Init+0x40>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002410:	2003      	movs	r0, #3
 8002412:	f001 f98e 	bl	8003732 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002416:	200f      	movs	r0, #15
 8002418:	f7ff fa4a 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800241c:	f7ff fa1c 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023c00 	.word	0x40023c00

0800242c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x20>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x24>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4413      	add	r3, r2
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_IncTick+0x24>)
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000018 	.word	0x20000018
 8002450:	20000810 	.word	0x20000810

08002454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return uwTick;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_GetTick+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000810 	.word	0x20000810

0800246c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff ffee 	bl	8002454 <HAL_GetTick>
 8002478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d005      	beq.n	8002492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_Delay+0x44>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002492:	bf00      	nop
 8002494:	f7ff ffde 	bl	8002454 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d8f7      	bhi.n	8002494 <HAL_Delay+0x28>
  {
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000018 	.word	0x20000018

080024b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e033      	b.n	8002532 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe f8b8 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024fa:	f023 0302 	bic.w	r3, r3, #2
 80024fe:	f043 0202 	orr.w	r2, r3, #2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa2a 	bl	8002960 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	f043 0201 	orr.w	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
 8002522:	e001      	b.n	8002528 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_ADC_Start+0x1a>
 8002552:	2302      	movs	r3, #2
 8002554:	e0b2      	b.n	80026bc <HAL_ADC_Start+0x180>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d018      	beq.n	800259e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800257c:	4b52      	ldr	r3, [pc, #328]	; (80026c8 <HAL_ADC_Start+0x18c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_ADC_Start+0x190>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0c9a      	lsrs	r2, r3, #18
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002590:	e002      	b.n	8002598 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3b01      	subs	r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f9      	bne.n	8002592 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d17a      	bne.n	80026a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ea:	d106      	bne.n	80025fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	f023 0206 	bic.w	r2, r3, #6
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	645a      	str	r2, [r3, #68]	; 0x44
 80025f8:	e002      	b.n	8002600 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002608:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <HAL_ADC_Start+0x194>)
 800260a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002614:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12a      	bne.n	8002678 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <HAL_ADC_Start+0x198>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d015      	beq.n	8002658 <HAL_ADC_Start+0x11c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a29      	ldr	r2, [pc, #164]	; (80026d8 <HAL_ADC_Start+0x19c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d105      	bne.n	8002642 <HAL_ADC_Start+0x106>
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <HAL_ADC_Start+0x194>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a25      	ldr	r2, [pc, #148]	; (80026dc <HAL_ADC_Start+0x1a0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d136      	bne.n	80026ba <HAL_ADC_Start+0x17e>
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_ADC_Start+0x194>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d130      	bne.n	80026ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d129      	bne.n	80026ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	e020      	b.n	80026ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <HAL_ADC_Start+0x198>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d11b      	bne.n	80026ba <HAL_ADC_Start+0x17e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d114      	bne.n	80026ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	e00b      	b.n	80026ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f043 0210 	orr.w	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	40012300 	.word	0x40012300
 80026d4:	40012000 	.word	0x40012000
 80026d8:	40012100 	.word	0x40012100
 80026dc:	40012200 	.word	0x40012200

080026e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x1c>
 8002714:	2302      	movs	r3, #2
 8002716:	e113      	b.n	8002940 <HAL_ADC_ConfigChannel+0x244>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b09      	cmp	r3, #9
 8002726:	d925      	bls.n	8002774 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68d9      	ldr	r1, [r3, #12]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	3b1e      	subs	r3, #30
 800273e:	2207      	movs	r2, #7
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43da      	mvns	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	400a      	ands	r2, r1
 800274c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68d9      	ldr	r1, [r3, #12]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	b29b      	uxth	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	4603      	mov	r3, r0
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4403      	add	r3, r0
 8002766:	3b1e      	subs	r3, #30
 8002768:	409a      	lsls	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	e022      	b.n	80027ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6919      	ldr	r1, [r3, #16]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	2207      	movs	r2, #7
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	400a      	ands	r2, r1
 8002796:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6919      	ldr	r1, [r3, #16]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4403      	add	r3, r0
 80027b0:	409a      	lsls	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d824      	bhi.n	800280c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	3b05      	subs	r3, #5
 80027d4:	221f      	movs	r2, #31
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	400a      	ands	r2, r1
 80027e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	3b05      	subs	r3, #5
 80027fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
 800280a:	e04c      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d824      	bhi.n	800285e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3b23      	subs	r3, #35	; 0x23
 8002826:	221f      	movs	r2, #31
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43da      	mvns	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	400a      	ands	r2, r1
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	4618      	mov	r0, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	3b23      	subs	r3, #35	; 0x23
 8002850:	fa00 f203 	lsl.w	r2, r0, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
 800285c:	e023      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	3b41      	subs	r3, #65	; 0x41
 8002870:	221f      	movs	r2, #31
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	400a      	ands	r2, r1
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	4618      	mov	r0, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	3b41      	subs	r3, #65	; 0x41
 800289a:	fa00 f203 	lsl.w	r2, r0, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <HAL_ADC_ConfigChannel+0x250>)
 80028a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a28      	ldr	r2, [pc, #160]	; (8002950 <HAL_ADC_ConfigChannel+0x254>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d10f      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x1d8>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b12      	cmp	r3, #18
 80028ba:	d10b      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_ADC_ConfigChannel+0x254>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d12b      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x23a>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1c      	ldr	r2, [pc, #112]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <HAL_ADC_ConfigChannel+0x1f4>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b11      	cmp	r3, #17
 80028ee:	d122      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a11      	ldr	r2, [pc, #68]	; (8002954 <HAL_ADC_ConfigChannel+0x258>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d111      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_ADC_ConfigChannel+0x25c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a11      	ldr	r2, [pc, #68]	; (800295c <HAL_ADC_ConfigChannel+0x260>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	0c9a      	lsrs	r2, r3, #18
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002928:	e002      	b.n	8002930 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	3b01      	subs	r3, #1
 800292e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f9      	bne.n	800292a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	40012300 	.word	0x40012300
 8002950:	40012000 	.word	0x40012000
 8002954:	10000012 	.word	0x10000012
 8002958:	2000000c 	.word	0x2000000c
 800295c:	431bde83 	.word	0x431bde83

08002960 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002968:	4b79      	ldr	r3, [pc, #484]	; (8002b50 <ADC_Init+0x1f0>)
 800296a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	021a      	lsls	r2, r3, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6899      	ldr	r1, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <ADC_Init+0x1f4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d022      	beq.n	8002a3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	e00f      	b.n	8002a5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0202 	bic.w	r2, r2, #2
 8002a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6899      	ldr	r1, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7e1b      	ldrb	r3, [r3, #24]
 8002a78:	005a      	lsls	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	035a      	lsls	r2, r3, #13
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	e007      	b.n	8002ad4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	051a      	lsls	r2, r3, #20
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6899      	ldr	r1, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b16:	025a      	lsls	r2, r3, #9
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	029a      	lsls	r2, r3, #10
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40012300 	.word	0x40012300
 8002b54:	0f000001 	.word	0x0f000001

08002b58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0ed      	b.n	8002d46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd fe74 	bl	8000864 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b8c:	f7ff fc62 	bl	8002454 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b92:	e012      	b.n	8002bba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b94:	f7ff fc5e 	bl	8002454 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b0a      	cmp	r3, #10
 8002ba0:	d90b      	bls.n	8002bba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0c5      	b.n	8002d46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0e5      	beq.n	8002b94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0202 	bic.w	r2, r2, #2
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd8:	f7ff fc3c 	bl	8002454 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bde:	e012      	b.n	8002c06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002be0:	f7ff fc38 	bl	8002454 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b0a      	cmp	r3, #10
 8002bec:	d90b      	bls.n	8002c06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e09f      	b.n	8002d46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e5      	bne.n	8002be0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e1b      	ldrb	r3, [r3, #24]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d108      	bne.n	8002c2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e007      	b.n	8002c3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7e5b      	ldrb	r3, [r3, #25]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e007      	b.n	8002c68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7e9b      	ldrb	r3, [r3, #26]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0220 	orr.w	r2, r2, #32
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e007      	b.n	8002c92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0220 	bic.w	r2, r2, #32
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7edb      	ldrb	r3, [r3, #27]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d108      	bne.n	8002cac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0210 	bic.w	r2, r2, #16
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0210 	orr.w	r2, r2, #16
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7f1b      	ldrb	r3, [r3, #28]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0208 	orr.w	r2, r2, #8
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e007      	b.n	8002ce6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0208 	bic.w	r2, r2, #8
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7f5b      	ldrb	r3, [r3, #29]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0204 	orr.w	r2, r2, #4
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e007      	b.n	8002d10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0204 	bic.w	r2, r2, #4
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	ea42 0103 	orr.w	r1, r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	1e5a      	subs	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d003      	beq.n	8002d76 <HAL_CAN_ConfigFilter+0x26>
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	f040 80be 	bne.w	8002ef2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002d76:	4b65      	ldr	r3, [pc, #404]	; (8002f0c <HAL_CAN_ConfigFilter+0x1bc>)
 8002d78:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	431a      	orrs	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2201      	movs	r2, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	401a      	ands	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d123      	bne.n	8002e20 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002dfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3248      	adds	r2, #72	; 0x48
 8002e00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	3348      	adds	r3, #72	; 0x48
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d122      	bne.n	8002e6e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	3248      	adds	r2, #72	; 0x48
 8002e4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e64:	6979      	ldr	r1, [r7, #20]
 8002e66:	3348      	adds	r3, #72	; 0x48
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	401a      	ands	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e88:	e007      	b.n	8002e9a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	401a      	ands	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002eb4:	e007      	b.n	8002ec6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ee4:	f023 0201 	bic.w	r2, r3, #1
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e006      	b.n	8002f00 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40006400 	.word	0x40006400

08002f10 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f24:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d003      	beq.n	8002f3c <HAL_CAN_AddTxMessage+0x2c>
 8002f34:	7ffb      	ldrb	r3, [r7, #31]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	f040 80b8 	bne.w	80030ac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80a0 	beq.w	800309c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	0e1b      	lsrs	r3, r3, #24
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d907      	bls.n	8002f7c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e09e      	b.n	80030ba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	409a      	lsls	r2, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f98:	68f9      	ldr	r1, [r7, #12]
 8002f9a:	6809      	ldr	r1, [r1, #0]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3318      	adds	r3, #24
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	440b      	add	r3, r1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e00f      	b.n	8002fca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fb4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002fbe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3318      	adds	r3, #24
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	440b      	add	r3, r1
 8002fc8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3318      	adds	r3, #24
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	440b      	add	r3, r1
 8002fda:	3304      	adds	r3, #4
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	7d1b      	ldrb	r3, [r3, #20]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d111      	bne.n	800300a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3318      	adds	r3, #24
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	6811      	ldr	r1, [r2, #0]
 8002ffa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3318      	adds	r3, #24
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	440b      	add	r3, r1
 8003006:	3304      	adds	r3, #4
 8003008:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3307      	adds	r3, #7
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	061a      	lsls	r2, r3, #24
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3306      	adds	r3, #6
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3305      	adds	r3, #5
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	4313      	orrs	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	3204      	adds	r2, #4
 800302a:	7812      	ldrb	r2, [r2, #0]
 800302c:	4610      	mov	r0, r2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	6811      	ldr	r1, [r2, #0]
 8003032:	ea43 0200 	orr.w	r2, r3, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	440b      	add	r3, r1
 800303c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003040:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3303      	adds	r3, #3
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	061a      	lsls	r2, r3, #24
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3302      	adds	r3, #2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3301      	adds	r3, #1
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	4313      	orrs	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	4610      	mov	r0, r2
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	6811      	ldr	r1, [r2, #0]
 8003068:	ea43 0200 	orr.w	r2, r3, r0
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	440b      	add	r3, r1
 8003072:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003076:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3318      	adds	r3, #24
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	4413      	add	r3, r2
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	6811      	ldr	r1, [r2, #0]
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3318      	adds	r3, #24
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	440b      	add	r3, r1
 8003096:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	e00e      	b.n	80030ba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e006      	b.n	80030ba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	; 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80030da:	7afb      	ldrb	r3, [r7, #11]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d002      	beq.n	80030e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80030e0:	7afb      	ldrb	r3, [r7, #11]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d11d      	bne.n	8003122 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3301      	adds	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003144:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003146:	7afb      	ldrb	r3, [r7, #11]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d002      	beq.n	8003152 <HAL_CAN_IsTxMessagePending+0x22>
 800314c:	7afb      	ldrb	r3, [r7, #11]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d10b      	bne.n	800316a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	069b      	lsls	r3, r3, #26
 800315c:	401a      	ands	r2, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	069b      	lsls	r3, r3, #26
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003166:	2301      	movs	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800316a:	68fb      	ldr	r3, [r7, #12]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d07c      	beq.n	80032b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d023      	beq.n	8003210 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f983 	bl	80034e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80031e0:	e016      	b.n	8003210 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
 80031f4:	e00c      	b.n	8003210 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d004      	beq.n	800320a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
 8003208:	e002      	b.n	8003210 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f989 	bl	8003522 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d024      	beq.n	8003264 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003222:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f963 	bl	80034fa <HAL_CAN_TxMailbox1CompleteCallback>
 8003234:	e016      	b.n	8003264 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
 8003248:	e00c      	b.n	8003264 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003250:	2b00      	cmp	r3, #0
 8003252:	d004      	beq.n	800325e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	e002      	b.n	8003264 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f969 	bl	8003536 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d024      	beq.n	80032b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003276:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f943 	bl	800350e <HAL_CAN_TxMailbox2CompleteCallback>
 8003288:	e016      	b.n	80032b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
 800329c:	e00c      	b.n	80032b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
 80032b0:	e002      	b.n	80032b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f949 	bl	800354a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2210      	movs	r2, #16
 80032da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d006      	beq.n	80032fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2208      	movs	r2, #8
 80032f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f930 	bl	800355e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fe f9b4 	bl	8001684 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00c      	beq.n	8003340 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003336:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2210      	movs	r2, #16
 800333e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2208      	movs	r2, #8
 800335a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f912 	bl	8003586 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f8f9 	bl	8003572 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d006      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2210      	movs	r2, #16
 800339a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f8fc 	bl	800359a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2208      	movs	r2, #8
 80033bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8f5 	bl	80035ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d07b      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d072      	beq.n	80034be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003432:	2b00      	cmp	r3, #0
 8003434:	d043      	beq.n	80034be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800343c:	2b00      	cmp	r3, #0
 800343e:	d03e      	beq.n	80034be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003446:	2b60      	cmp	r3, #96	; 0x60
 8003448:	d02b      	beq.n	80034a2 <HAL_CAN_IRQHandler+0x32a>
 800344a:	2b60      	cmp	r3, #96	; 0x60
 800344c:	d82e      	bhi.n	80034ac <HAL_CAN_IRQHandler+0x334>
 800344e:	2b50      	cmp	r3, #80	; 0x50
 8003450:	d022      	beq.n	8003498 <HAL_CAN_IRQHandler+0x320>
 8003452:	2b50      	cmp	r3, #80	; 0x50
 8003454:	d82a      	bhi.n	80034ac <HAL_CAN_IRQHandler+0x334>
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d019      	beq.n	800348e <HAL_CAN_IRQHandler+0x316>
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d826      	bhi.n	80034ac <HAL_CAN_IRQHandler+0x334>
 800345e:	2b30      	cmp	r3, #48	; 0x30
 8003460:	d010      	beq.n	8003484 <HAL_CAN_IRQHandler+0x30c>
 8003462:	2b30      	cmp	r3, #48	; 0x30
 8003464:	d822      	bhi.n	80034ac <HAL_CAN_IRQHandler+0x334>
 8003466:	2b10      	cmp	r3, #16
 8003468:	d002      	beq.n	8003470 <HAL_CAN_IRQHandler+0x2f8>
 800346a:	2b20      	cmp	r3, #32
 800346c:	d005      	beq.n	800347a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800346e:	e01d      	b.n	80034ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	f043 0308 	orr.w	r3, r3, #8
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003478:	e019      	b.n	80034ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	f043 0310 	orr.w	r3, r3, #16
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003482:	e014      	b.n	80034ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	f043 0320 	orr.w	r3, r3, #32
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800348c:	e00f      	b.n	80034ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003496:	e00a      	b.n	80034ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034a0:	e005      	b.n	80034ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034aa:	e000      	b.n	80034ae <HAL_CAN_IRQHandler+0x336>
            break;
 80034ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2204      	movs	r2, #4
 80034c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f872 	bl	80035c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	; 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <__NVIC_GetPriorityGrouping+0x18>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0307 	and.w	r3, r3, #7
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4907      	ldr	r1, [pc, #28]	; (8003674 <__NVIC_EnableIRQ+0x38>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2001      	movs	r0, #1
 800365e:	fa00 f202 	lsl.w	r2, r0, r2
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	2b00      	cmp	r3, #0
 800368a:	db0a      	blt.n	80036a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	490c      	ldr	r1, [pc, #48]	; (80036c4 <__NVIC_SetPriority+0x4c>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	440b      	add	r3, r1
 800369c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a0:	e00a      	b.n	80036b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4908      	ldr	r1, [pc, #32]	; (80036c8 <__NVIC_SetPriority+0x50>)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3b04      	subs	r3, #4
 80036b0:	0112      	lsls	r2, r2, #4
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	440b      	add	r3, r1
 80036b6:	761a      	strb	r2, [r3, #24]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f1c3 0307 	rsb	r3, r3, #7
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf28      	it	cs
 80036ea:	2304      	movcs	r3, #4
 80036ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d902      	bls.n	80036fc <NVIC_EncodePriority+0x30>
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3b03      	subs	r3, #3
 80036fa:	e000      	b.n	80036fe <NVIC_EncodePriority+0x32>
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	401a      	ands	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003714:	f04f 31ff 	mov.w	r1, #4294967295
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43d9      	mvns	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	4313      	orrs	r3, r2
         );
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ff4c 	bl	80035d8 <__NVIC_SetPriorityGrouping>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800375a:	f7ff ff61 	bl	8003620 <__NVIC_GetPriorityGrouping>
 800375e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	6978      	ldr	r0, [r7, #20]
 8003766:	f7ff ffb1 	bl	80036cc <NVIC_EncodePriority>
 800376a:	4602      	mov	r2, r0
 800376c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff80 	bl	8003678 <__NVIC_SetPriority>
}
 8003778:	bf00      	nop
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff ff54 	bl	800363c <__NVIC_EnableIRQ>
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d004      	beq.n	80037ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2280      	movs	r2, #128	; 0x80
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e00c      	b.n	80037d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2205      	movs	r2, #5
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	e177      	b.n	8003aec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037fc:	2201      	movs	r2, #1
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	429a      	cmp	r2, r3
 8003816:	f040 8166 	bne.w	8003ae6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d005      	beq.n	8003832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382e:	2b02      	cmp	r3, #2
 8003830:	d130      	bne.n	8003894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	2203      	movs	r2, #3
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003868:	2201      	movs	r2, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 0201 	and.w	r2, r3, #1
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	2b03      	cmp	r3, #3
 800389e:	d017      	beq.n	80038d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d123      	bne.n	8003924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	08da      	lsrs	r2, r3, #3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3208      	adds	r2, #8
 80038e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	220f      	movs	r2, #15
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	08da      	lsrs	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3208      	adds	r2, #8
 800391e:	69b9      	ldr	r1, [r7, #24]
 8003920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	2203      	movs	r2, #3
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0203 	and.w	r2, r3, #3
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80c0 	beq.w	8003ae6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <HAL_GPIO_Init+0x324>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	4a65      	ldr	r2, [pc, #404]	; (8003b04 <HAL_GPIO_Init+0x324>)
 8003970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003974:	6453      	str	r3, [r2, #68]	; 0x44
 8003976:	4b63      	ldr	r3, [pc, #396]	; (8003b04 <HAL_GPIO_Init+0x324>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003982:	4a61      	ldr	r2, [pc, #388]	; (8003b08 <HAL_GPIO_Init+0x328>)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <HAL_GPIO_Init+0x32c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d037      	beq.n	8003a1e <HAL_GPIO_Init+0x23e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a57      	ldr	r2, [pc, #348]	; (8003b10 <HAL_GPIO_Init+0x330>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d031      	beq.n	8003a1a <HAL_GPIO_Init+0x23a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a56      	ldr	r2, [pc, #344]	; (8003b14 <HAL_GPIO_Init+0x334>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d02b      	beq.n	8003a16 <HAL_GPIO_Init+0x236>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a55      	ldr	r2, [pc, #340]	; (8003b18 <HAL_GPIO_Init+0x338>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d025      	beq.n	8003a12 <HAL_GPIO_Init+0x232>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a54      	ldr	r2, [pc, #336]	; (8003b1c <HAL_GPIO_Init+0x33c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01f      	beq.n	8003a0e <HAL_GPIO_Init+0x22e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a53      	ldr	r2, [pc, #332]	; (8003b20 <HAL_GPIO_Init+0x340>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d019      	beq.n	8003a0a <HAL_GPIO_Init+0x22a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <HAL_GPIO_Init+0x344>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <HAL_GPIO_Init+0x226>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a51      	ldr	r2, [pc, #324]	; (8003b28 <HAL_GPIO_Init+0x348>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00d      	beq.n	8003a02 <HAL_GPIO_Init+0x222>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a50      	ldr	r2, [pc, #320]	; (8003b2c <HAL_GPIO_Init+0x34c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d007      	beq.n	80039fe <HAL_GPIO_Init+0x21e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4f      	ldr	r2, [pc, #316]	; (8003b30 <HAL_GPIO_Init+0x350>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d101      	bne.n	80039fa <HAL_GPIO_Init+0x21a>
 80039f6:	2309      	movs	r3, #9
 80039f8:	e012      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 80039fa:	230a      	movs	r3, #10
 80039fc:	e010      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 80039fe:	2308      	movs	r3, #8
 8003a00:	e00e      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 8003a02:	2307      	movs	r3, #7
 8003a04:	e00c      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 8003a06:	2306      	movs	r3, #6
 8003a08:	e00a      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 8003a0a:	2305      	movs	r3, #5
 8003a0c:	e008      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 8003a0e:	2304      	movs	r3, #4
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 8003a12:	2303      	movs	r3, #3
 8003a14:	e004      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e002      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_GPIO_Init+0x240>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f002 0203 	and.w	r2, r2, #3
 8003a26:	0092      	lsls	r2, r2, #2
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a30:	4935      	ldr	r1, [pc, #212]	; (8003b08 <HAL_GPIO_Init+0x328>)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <HAL_GPIO_Init+0x354>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a62:	4a34      	ldr	r2, [pc, #208]	; (8003b34 <HAL_GPIO_Init+0x354>)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a68:	4b32      	ldr	r3, [pc, #200]	; (8003b34 <HAL_GPIO_Init+0x354>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a8c:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <HAL_GPIO_Init+0x354>)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a92:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_GPIO_Init+0x354>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <HAL_GPIO_Init+0x354>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003abc:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <HAL_GPIO_Init+0x354>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ae0:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <HAL_GPIO_Init+0x354>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	f67f ae84 	bls.w	80037fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	40020000 	.word	0x40020000
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40020800 	.word	0x40020800
 8003b18:	40020c00 	.word	0x40020c00
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40021400 	.word	0x40021400
 8003b24:	40021800 	.word	0x40021800
 8003b28:	40021c00 	.word	0x40021c00
 8003b2c:	40022000 	.word	0x40022000
 8003b30:	40022400 	.word	0x40022400
 8003b34:	40013c00 	.word	0x40013c00

08003b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
 8003b44:	4613      	mov	r3, r2
 8003b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b48:	787b      	ldrb	r3, [r7, #1]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b54:	e003      	b.n	8003b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	041a      	lsls	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	619a      	str	r2, [r3, #24]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b82:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fd66 	bl	800165c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40013c00 	.word	0x40013c00

08003b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e12b      	b.n	8003e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd f9a4 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	; 0x24
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c00:	f003 f998 	bl	8006f34 <HAL_RCC_GetPCLK1Freq>
 8003c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4a81      	ldr	r2, [pc, #516]	; (8003e10 <HAL_I2C_Init+0x274>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d807      	bhi.n	8003c20 <HAL_I2C_Init+0x84>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a80      	ldr	r2, [pc, #512]	; (8003e14 <HAL_I2C_Init+0x278>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	bf94      	ite	ls
 8003c18:	2301      	movls	r3, #1
 8003c1a:	2300      	movhi	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e006      	b.n	8003c2e <HAL_I2C_Init+0x92>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a7d      	ldr	r2, [pc, #500]	; (8003e18 <HAL_I2C_Init+0x27c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	bf94      	ite	ls
 8003c28:	2301      	movls	r3, #1
 8003c2a:	2300      	movhi	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e0e7      	b.n	8003e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a78      	ldr	r2, [pc, #480]	; (8003e1c <HAL_I2C_Init+0x280>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	0c9b      	lsrs	r3, r3, #18
 8003c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a6a      	ldr	r2, [pc, #424]	; (8003e10 <HAL_I2C_Init+0x274>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d802      	bhi.n	8003c70 <HAL_I2C_Init+0xd4>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	e009      	b.n	8003c84 <HAL_I2C_Init+0xe8>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	4a69      	ldr	r2, [pc, #420]	; (8003e20 <HAL_I2C_Init+0x284>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	3301      	adds	r3, #1
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	495c      	ldr	r1, [pc, #368]	; (8003e10 <HAL_I2C_Init+0x274>)
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	d819      	bhi.n	8003cd8 <HAL_I2C_Init+0x13c>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1e59      	subs	r1, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cb8:	400b      	ands	r3, r1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_I2C_Init+0x138>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1e59      	subs	r1, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd2:	e051      	b.n	8003d78 <HAL_I2C_Init+0x1dc>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	e04f      	b.n	8003d78 <HAL_I2C_Init+0x1dc>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d111      	bne.n	8003d04 <HAL_I2C_Init+0x168>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	440b      	add	r3, r1
 8003cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e012      	b.n	8003d2a <HAL_I2C_Init+0x18e>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e58      	subs	r0, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6859      	ldr	r1, [r3, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	0099      	lsls	r1, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Init+0x196>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e022      	b.n	8003d78 <HAL_I2C_Init+0x1dc>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10e      	bne.n	8003d58 <HAL_I2C_Init+0x1bc>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1e58      	subs	r0, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	440b      	add	r3, r1
 8003d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d56:	e00f      	b.n	8003d78 <HAL_I2C_Init+0x1dc>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e58      	subs	r0, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	0099      	lsls	r1, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	6809      	ldr	r1, [r1, #0]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6911      	ldr	r1, [r2, #16]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	4311      	orrs	r1, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	000186a0 	.word	0x000186a0
 8003e14:	001e847f 	.word	0x001e847f
 8003e18:	003d08ff 	.word	0x003d08ff
 8003e1c:	431bde83 	.word	0x431bde83
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	461a      	mov	r2, r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	817b      	strh	r3, [r7, #10]
 8003e36:	460b      	mov	r3, r1
 8003e38:	813b      	strh	r3, [r7, #8]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e3e:	f7fe fb09 	bl	8002454 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	f040 80d9 	bne.w	8004004 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	2319      	movs	r3, #25
 8003e58:	2201      	movs	r2, #1
 8003e5a:	496d      	ldr	r1, [pc, #436]	; (8004010 <HAL_I2C_Mem_Write+0x1ec>)
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fc7f 	bl	8004760 <I2C_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e0cc      	b.n	8004006 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_I2C_Mem_Write+0x56>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e0c5      	b.n	8004006 <HAL_I2C_Mem_Write+0x1e2>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d007      	beq.n	8003ea0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2221      	movs	r2, #33	; 0x21
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2240      	movs	r2, #64	; 0x40
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a4d      	ldr	r2, [pc, #308]	; (8004014 <HAL_I2C_Mem_Write+0x1f0>)
 8003ee0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ee2:	88f8      	ldrh	r0, [r7, #6]
 8003ee4:	893a      	ldrh	r2, [r7, #8]
 8003ee6:	8979      	ldrh	r1, [r7, #10]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fab6 	bl	8004464 <I2C_RequestMemoryWrite>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d052      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e081      	b.n	8004006 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fd00 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e06b      	b.n	8004006 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_I2C_Mem_Write+0x180>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d017      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1aa      	bne.n	8003f02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fcec 	bl	800498e <I2C_WaitOnBTFFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d107      	bne.n	8003fd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e016      	b.n	8004006 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	00100002 	.word	0x00100002
 8004014:	ffff0000 	.word	0xffff0000

08004018 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08c      	sub	sp, #48	; 0x30
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	461a      	mov	r2, r3
 8004026:	4603      	mov	r3, r0
 8004028:	817b      	strh	r3, [r7, #10]
 800402a:	460b      	mov	r3, r1
 800402c:	813b      	strh	r3, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004032:	f7fe fa0f 	bl	8002454 <HAL_GetTick>
 8004036:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b20      	cmp	r3, #32
 8004042:	f040 8208 	bne.w	8004456 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	2319      	movs	r3, #25
 800404c:	2201      	movs	r2, #1
 800404e:	497b      	ldr	r1, [pc, #492]	; (800423c <HAL_I2C_Mem_Read+0x224>)
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fb85 	bl	8004760 <I2C_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
 800405e:	e1fb      	b.n	8004458 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_I2C_Mem_Read+0x56>
 800406a:	2302      	movs	r3, #2
 800406c:	e1f4      	b.n	8004458 <HAL_I2C_Mem_Read+0x440>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d007      	beq.n	8004094 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2222      	movs	r2, #34	; 0x22
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2240      	movs	r2, #64	; 0x40
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a5b      	ldr	r2, [pc, #364]	; (8004240 <HAL_I2C_Mem_Read+0x228>)
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040d6:	88f8      	ldrh	r0, [r7, #6]
 80040d8:	893a      	ldrh	r2, [r7, #8]
 80040da:	8979      	ldrh	r1, [r7, #10]
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	4603      	mov	r3, r0
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fa52 	bl	8004590 <I2C_RequestMemoryRead>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e1b0      	b.n	8004458 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d113      	bne.n	8004126 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e184      	b.n	8004430 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	2b01      	cmp	r3, #1
 800412c:	d11b      	bne.n	8004166 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e164      	b.n	8004430 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	2b02      	cmp	r3, #2
 800416c:	d11b      	bne.n	80041a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	e144      	b.n	8004430 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041bc:	e138      	b.n	8004430 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	f200 80f1 	bhi.w	80043aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d123      	bne.n	8004218 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fc1b 	bl	8004a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e139      	b.n	8004458 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004216:	e10b      	b.n	8004430 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	2b02      	cmp	r3, #2
 800421e:	d14e      	bne.n	80042be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	2200      	movs	r2, #0
 8004228:	4906      	ldr	r1, [pc, #24]	; (8004244 <HAL_I2C_Mem_Read+0x22c>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fa98 	bl	8004760 <I2C_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e10e      	b.n	8004458 <HAL_I2C_Mem_Read+0x440>
 800423a:	bf00      	nop
 800423c:	00100002 	.word	0x00100002
 8004240:	ffff0000 	.word	0xffff0000
 8004244:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042bc:	e0b8      	b.n	8004430 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	2200      	movs	r2, #0
 80042c6:	4966      	ldr	r1, [pc, #408]	; (8004460 <HAL_I2C_Mem_Read+0x448>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fa49 	bl	8004760 <I2C_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0bf      	b.n	8004458 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2200      	movs	r2, #0
 8004322:	494f      	ldr	r1, [pc, #316]	; (8004460 <HAL_I2C_Mem_Read+0x448>)
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fa1b 	bl	8004760 <I2C_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e091      	b.n	8004458 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043a8:	e042      	b.n	8004430 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fb2e 	bl	8004a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e04c      	b.n	8004458 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d118      	bne.n	8004430 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f aec2 	bne.w	80041be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e000      	b.n	8004458 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
  }
}
 8004458:	4618      	mov	r0, r3
 800445a:	3728      	adds	r7, #40	; 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	00010004 	.word	0x00010004

08004464 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	4608      	mov	r0, r1
 800446e:	4611      	mov	r1, r2
 8004470:	461a      	mov	r2, r3
 8004472:	4603      	mov	r3, r0
 8004474:	817b      	strh	r3, [r7, #10]
 8004476:	460b      	mov	r3, r1
 8004478:	813b      	strh	r3, [r7, #8]
 800447a:	4613      	mov	r3, r2
 800447c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	2200      	movs	r2, #0
 8004496:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f960 	bl	8004760 <I2C_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b4:	d103      	bne.n	80044be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e05f      	b.n	8004582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	492d      	ldr	r1, [pc, #180]	; (800458c <I2C_RequestMemoryWrite+0x128>)
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f998 	bl	800480e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e04c      	b.n	8004582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	6a39      	ldr	r1, [r7, #32]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fa02 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b04      	cmp	r3, #4
 8004514:	d107      	bne.n	8004526 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e02b      	b.n	8004582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d105      	bne.n	800453c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004530:	893b      	ldrh	r3, [r7, #8]
 8004532:	b2da      	uxtb	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	611a      	str	r2, [r3, #16]
 800453a:	e021      	b.n	8004580 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800453c:	893b      	ldrh	r3, [r7, #8]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	b29b      	uxth	r3, r3
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800454a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454c:	6a39      	ldr	r1, [r7, #32]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f9dc 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2b04      	cmp	r3, #4
 8004560:	d107      	bne.n	8004572 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e005      	b.n	8004582 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004576:	893b      	ldrh	r3, [r7, #8]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	00010002 	.word	0x00010002

08004590 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	4608      	mov	r0, r1
 800459a:	4611      	mov	r1, r2
 800459c:	461a      	mov	r2, r3
 800459e:	4603      	mov	r3, r0
 80045a0:	817b      	strh	r3, [r7, #10]
 80045a2:	460b      	mov	r3, r1
 80045a4:	813b      	strh	r3, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f8c2 	bl	8004760 <I2C_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f0:	d103      	bne.n	80045fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0aa      	b.n	8004754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045fe:	897b      	ldrh	r3, [r7, #10]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800460c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	6a3a      	ldr	r2, [r7, #32]
 8004612:	4952      	ldr	r1, [pc, #328]	; (800475c <I2C_RequestMemoryRead+0x1cc>)
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f8fa 	bl	800480e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e097      	b.n	8004754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	6a39      	ldr	r1, [r7, #32]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f964 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b04      	cmp	r3, #4
 8004650:	d107      	bne.n	8004662 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004660:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e076      	b.n	8004754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800466c:	893b      	ldrh	r3, [r7, #8]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	611a      	str	r2, [r3, #16]
 8004676:	e021      	b.n	80046bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004678:	893b      	ldrh	r3, [r7, #8]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	b29b      	uxth	r3, r3
 800467e:	b2da      	uxtb	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004688:	6a39      	ldr	r1, [r7, #32]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f93e 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	2b04      	cmp	r3, #4
 800469c:	d107      	bne.n	80046ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e050      	b.n	8004754 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b2:	893b      	ldrh	r3, [r7, #8]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046be:	6a39      	ldr	r1, [r7, #32]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f923 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d107      	bne.n	80046e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e035      	b.n	8004754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	2200      	movs	r2, #0
 8004700:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f82b 	bl	8004760 <I2C_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471e:	d103      	bne.n	8004728 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004726:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e013      	b.n	8004754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800472c:	897b      	ldrh	r3, [r7, #10]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	6a3a      	ldr	r2, [r7, #32]
 8004740:	4906      	ldr	r1, [pc, #24]	; (800475c <I2C_RequestMemoryRead+0x1cc>)
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f863 	bl	800480e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	00010002 	.word	0x00010002

08004760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004770:	e025      	b.n	80047be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d021      	beq.n	80047be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477a:	f7fd fe6b 	bl	8002454 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d302      	bcc.n	8004790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d116      	bne.n	80047be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e023      	b.n	8004806 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10d      	bne.n	80047e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	43da      	mvns	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	e00c      	b.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	43da      	mvns	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf0c      	ite	eq
 80047f6:	2301      	moveq	r3, #1
 80047f8:	2300      	movne	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	429a      	cmp	r2, r3
 8004802:	d0b6      	beq.n	8004772 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800481c:	e051      	b.n	80048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482c:	d123      	bne.n	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004846:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0204 	orr.w	r2, r3, #4
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e046      	b.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d021      	beq.n	80048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fd fde9 	bl	8002454 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d116      	bne.n	80048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e020      	b.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d10c      	bne.n	80048e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	43da      	mvns	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	e00b      	b.n	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	43da      	mvns	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4013      	ands	r3, r2
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d18d      	bne.n	800481e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004918:	e02d      	b.n	8004976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f8ce 	bl	8004abc <I2C_IsAcknowledgeFailed>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e02d      	b.n	8004986 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d021      	beq.n	8004976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fd fd8f 	bl	8002454 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d116      	bne.n	8004976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e007      	b.n	8004986 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004980:	2b80      	cmp	r3, #128	; 0x80
 8004982:	d1ca      	bne.n	800491a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800499a:	e02d      	b.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f88d 	bl	8004abc <I2C_IsAcknowledgeFailed>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e02d      	b.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b2:	d021      	beq.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b4:	f7fd fd4e 	bl	8002454 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d302      	bcc.n	80049ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d116      	bne.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e007      	b.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d1ca      	bne.n	800499c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a1c:	e042      	b.n	8004aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d119      	bne.n	8004a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0210 	mvn.w	r2, #16
 8004a34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e029      	b.n	8004ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a60:	f7fd fcf8 	bl	8002454 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d116      	bne.n	8004aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	f043 0220 	orr.w	r2, r3, #32
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e007      	b.n	8004ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d1b5      	bne.n	8004a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad2:	d11b      	bne.n	8004b0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004adc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	f043 0204 	orr.w	r2, r3, #4
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d129      	bne.n	8004b84 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2224      	movs	r2, #36	; 0x24
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0210 	bic.w	r2, r2, #16
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d12a      	bne.n	8004c02 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004bcc:	89fb      	ldrh	r3, [r7, #14]
 8004bce:	f023 030f 	bic.w	r3, r3, #15
 8004bd2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	89fa      	ldrh	r2, [r7, #14]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0bf      	b.n	8004da2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fb38 	bl	80012ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004c52:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c68:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b4a      	ldr	r3, [pc, #296]	; (8004dac <HAL_LTDC_Init+0x19c>)
 8004c84:	400b      	ands	r3, r1
 8004c86:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68d9      	ldr	r1, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b3e      	ldr	r3, [pc, #248]	; (8004dac <HAL_LTDC_Init+0x19c>)
 8004cb2:	400b      	ands	r3, r1
 8004cb4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68d9      	ldr	r1, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1a      	ldr	r2, [r3, #32]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6919      	ldr	r1, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b33      	ldr	r3, [pc, #204]	; (8004dac <HAL_LTDC_Init+0x19c>)
 8004ce0:	400b      	ands	r3, r1
 8004ce2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6919      	ldr	r1, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6959      	ldr	r1, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4b27      	ldr	r3, [pc, #156]	; (8004dac <HAL_LTDC_Init+0x19c>)
 8004d0e:	400b      	ands	r3, r1
 8004d10:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	041b      	lsls	r3, r3, #16
 8004d18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6959      	ldr	r1, [r3, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0206 	orr.w	r2, r2, #6
 8004d7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	f000f800 	.word	0xf000f800

08004db0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004db0:	b5b0      	push	{r4, r5, r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_LTDC_ConfigLayer+0x1a>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e02c      	b.n	8004e24 <HAL_LTDC_ConfigLayer+0x74>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2134      	movs	r1, #52	; 0x34
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	4413      	add	r3, r2
 8004de6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f811 	bl	8004e2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bdb0      	pop	{r4, r5, r7, pc}

08004e2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b089      	sub	sp, #36	; 0x24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e48:	4413      	add	r3, r2
 8004e4a:	041b      	lsls	r3, r3, #16
 8004e4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	01db      	lsls	r3, r3, #7
 8004e58:	4413      	add	r3, r2
 8004e5a:	3384      	adds	r3, #132	; 0x84
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	4611      	mov	r1, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	01d2      	lsls	r2, r2, #7
 8004e68:	440a      	add	r2, r1
 8004e6a:	3284      	adds	r2, #132	; 0x84
 8004e6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004e70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	01db      	lsls	r3, r3, #7
 8004e90:	440b      	add	r3, r1
 8004e92:	3384      	adds	r3, #132	; 0x84
 8004e94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eaa:	4413      	add	r3, r2
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	01db      	lsls	r3, r3, #7
 8004eba:	4413      	add	r3, r2
 8004ebc:	3384      	adds	r3, #132	; 0x84
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	01d2      	lsls	r2, r2, #7
 8004eca:	440a      	add	r2, r1
 8004ecc:	3284      	adds	r2, #132	; 0x84
 8004ece:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ed2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee2:	4413      	add	r3, r2
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	01db      	lsls	r3, r3, #7
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3384      	adds	r3, #132	; 0x84
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	01db      	lsls	r3, r3, #7
 8004f06:	4413      	add	r3, r2
 8004f08:	3384      	adds	r3, #132	; 0x84
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	4611      	mov	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	01d2      	lsls	r2, r2, #7
 8004f16:	440a      	add	r2, r1
 8004f18:	3284      	adds	r2, #132	; 0x84
 8004f1a:	f023 0307 	bic.w	r3, r3, #7
 8004f1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	01db      	lsls	r3, r3, #7
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3384      	adds	r3, #132	; 0x84
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	01db      	lsls	r3, r3, #7
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3384      	adds	r3, #132	; 0x84
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	01db      	lsls	r3, r3, #7
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3384      	adds	r3, #132	; 0x84
 8004f70:	461a      	mov	r2, r3
 8004f72:	2300      	movs	r3, #0
 8004f74:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	01db      	lsls	r3, r3, #7
 8004f90:	440b      	add	r3, r1
 8004f92:	3384      	adds	r3, #132	; 0x84
 8004f94:	4619      	mov	r1, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	01db      	lsls	r3, r3, #7
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3384      	adds	r3, #132	; 0x84
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	01d2      	lsls	r2, r2, #7
 8004fb6:	440a      	add	r2, r1
 8004fb8:	3284      	adds	r2, #132	; 0x84
 8004fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	01db      	lsls	r3, r3, #7
 8004fca:	4413      	add	r3, r2
 8004fcc:	3384      	adds	r3, #132	; 0x84
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	01db      	lsls	r3, r3, #7
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3384      	adds	r3, #132	; 0x84
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	4611      	mov	r1, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	01d2      	lsls	r2, r2, #7
 8004ff0:	440a      	add	r2, r1
 8004ff2:	3284      	adds	r2, #132	; 0x84
 8004ff4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ff8:	f023 0307 	bic.w	r3, r3, #7
 8004ffc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	68f9      	ldr	r1, [r7, #12]
 8005008:	6809      	ldr	r1, [r1, #0]
 800500a:	4608      	mov	r0, r1
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	01c9      	lsls	r1, r1, #7
 8005010:	4401      	add	r1, r0
 8005012:	3184      	adds	r1, #132	; 0x84
 8005014:	4313      	orrs	r3, r2
 8005016:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	01db      	lsls	r3, r3, #7
 8005022:	4413      	add	r3, r2
 8005024:	3384      	adds	r3, #132	; 0x84
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	01db      	lsls	r3, r3, #7
 8005032:	4413      	add	r3, r2
 8005034:	3384      	adds	r3, #132	; 0x84
 8005036:	461a      	mov	r2, r3
 8005038:	2300      	movs	r3, #0
 800503a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	01db      	lsls	r3, r3, #7
 8005046:	4413      	add	r3, r2
 8005048:	3384      	adds	r3, #132	; 0x84
 800504a:	461a      	mov	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800505a:	2304      	movs	r3, #4
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	e01b      	b.n	8005098 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d102      	bne.n	800506e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005068:	2303      	movs	r3, #3
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	e014      	b.n	8005098 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d00b      	beq.n	800508e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800507a:	2b02      	cmp	r3, #2
 800507c:	d007      	beq.n	800508e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005082:	2b03      	cmp	r3, #3
 8005084:	d003      	beq.n	800508e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800508a:	2b07      	cmp	r3, #7
 800508c:	d102      	bne.n	8005094 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800508e:	2302      	movs	r3, #2
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	e001      	b.n	8005098 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005094:	2301      	movs	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	01db      	lsls	r3, r3, #7
 80050a2:	4413      	add	r3, r2
 80050a4:	3384      	adds	r3, #132	; 0x84
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	4611      	mov	r1, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	01d2      	lsls	r2, r2, #7
 80050b2:	440a      	add	r2, r1
 80050b4:	3284      	adds	r2, #132	; 0x84
 80050b6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80050ba:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	1acb      	subs	r3, r1, r3
 80050d2:	69f9      	ldr	r1, [r7, #28]
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	6809      	ldr	r1, [r1, #0]
 80050de:	4608      	mov	r0, r1
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	01c9      	lsls	r1, r1, #7
 80050e4:	4401      	add	r1, r0
 80050e6:	3184      	adds	r1, #132	; 0x84
 80050e8:	4313      	orrs	r3, r2
 80050ea:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	01db      	lsls	r3, r3, #7
 80050f6:	4413      	add	r3, r2
 80050f8:	3384      	adds	r3, #132	; 0x84
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	4611      	mov	r1, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	01d2      	lsls	r2, r2, #7
 8005106:	440a      	add	r2, r1
 8005108:	3284      	adds	r2, #132	; 0x84
 800510a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800510e:	f023 0307 	bic.w	r3, r3, #7
 8005112:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	01db      	lsls	r3, r3, #7
 800511e:	4413      	add	r3, r2
 8005120:	3384      	adds	r3, #132	; 0x84
 8005122:	461a      	mov	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	01db      	lsls	r3, r3, #7
 8005134:	4413      	add	r3, r2
 8005136:	3384      	adds	r3, #132	; 0x84
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	4611      	mov	r1, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	01d2      	lsls	r2, r2, #7
 8005144:	440a      	add	r2, r1
 8005146:	3284      	adds	r2, #132	; 0x84
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	6013      	str	r3, [r2, #0]
}
 800514e:	bf00      	nop
 8005150:	3724      	adds	r7, #36	; 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800515a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515c:	b08f      	sub	sp, #60	; 0x3c
 800515e:	af0a      	add	r7, sp, #40	; 0x28
 8005160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e10f      	b.n	800538c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f00a fc38 	bl	800f9fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2203      	movs	r2, #3
 8005190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f004 fbc9 	bl	8009942 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	687e      	ldr	r6, [r7, #4]
 80051b8:	466d      	mov	r5, sp
 80051ba:	f106 0410 	add.w	r4, r6, #16
 80051be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80051ce:	1d33      	adds	r3, r6, #4
 80051d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051d2:	6838      	ldr	r0, [r7, #0]
 80051d4:	f004 faa0 	bl	8009718 <USB_CoreInit>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e0d0      	b.n	800538c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f004 fbb7 	bl	8009964 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
 80051fa:	e04a      	b.n	8005292 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	333d      	adds	r3, #61	; 0x3d
 800520c:	2201      	movs	r2, #1
 800520e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005210:	7bfa      	ldrb	r2, [r7, #15]
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	333c      	adds	r3, #60	; 0x3c
 8005220:	7bfa      	ldrb	r2, [r7, #15]
 8005222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	b298      	uxth	r0, r3
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	3344      	adds	r3, #68	; 0x44
 8005238:	4602      	mov	r2, r0
 800523a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	3340      	adds	r3, #64	; 0x40
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	3348      	adds	r3, #72	; 0x48
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005264:	7bfa      	ldrb	r2, [r7, #15]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	334c      	adds	r3, #76	; 0x4c
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	3354      	adds	r3, #84	; 0x54
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	3301      	adds	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	7bfa      	ldrb	r2, [r7, #15]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	429a      	cmp	r2, r3
 800529a:	d3af      	bcc.n	80051fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]
 80052a0:	e044      	b.n	800532c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80052ca:	7bfa      	ldrb	r2, [r7, #15]
 80052cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052ce:	7bfa      	ldrb	r2, [r7, #15]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80052e0:	2200      	movs	r2, #0
 80052e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052fa:	7bfa      	ldrb	r2, [r7, #15]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005310:	7bfa      	ldrb	r2, [r7, #15]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	3301      	adds	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
 800532c:	7bfa      	ldrb	r2, [r7, #15]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d3b5      	bcc.n	80052a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	687e      	ldr	r6, [r7, #4]
 800533e:	466d      	mov	r5, sp
 8005340:	f106 0410 	add.w	r4, r6, #16
 8005344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800534a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800534c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005350:	e885 0003 	stmia.w	r5, {r0, r1}
 8005354:	1d33      	adds	r3, r6, #4
 8005356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005358:	6838      	ldr	r0, [r7, #0]
 800535a:	f004 fb4f 	bl	80099fc <USB_DevInit>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e00d      	b.n	800538c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f005 fc9e 	bl	800acc6 <USB_DevDisconnect>

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005394 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_PCD_Start+0x1c>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e020      	b.n	80053f2 <HAL_PCD_Start+0x5e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d109      	bne.n	80053d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d005      	beq.n	80053d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f004 faa1 	bl	8009920 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f005 fc4e 	bl	800ac84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053fa:	b590      	push	{r4, r7, lr}
 80053fc:	b08d      	sub	sp, #52	; 0x34
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f005 fd0c 	bl	800ae2e <USB_GetMode>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	f040 848a 	bne.w	8005d32 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f005 fc70 	bl	800ad08 <USB_ReadInterrupts>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8480 	beq.w	8005d30 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f005 fc5d 	bl	800ad08 <USB_ReadInterrupts>
 800544e:	4603      	mov	r3, r0
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b02      	cmp	r3, #2
 8005456:	d107      	bne.n	8005468 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f002 0202 	and.w	r2, r2, #2
 8005466:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f005 fc4b 	bl	800ad08 <USB_ReadInterrupts>
 8005472:	4603      	mov	r3, r0
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b10      	cmp	r3, #16
 800547a:	d161      	bne.n	8005540 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0210 	bic.w	r2, r2, #16
 800548a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	3304      	adds	r3, #4
 80054aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	0c5b      	lsrs	r3, r3, #17
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d124      	bne.n	8005502 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d035      	beq.n	8005530 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	091b      	lsrs	r3, r3, #4
 80054cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	6a38      	ldr	r0, [r7, #32]
 80054d8:	f005 fa82 	bl	800a9e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054e8:	441a      	add	r2, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054fa:	441a      	add	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	621a      	str	r2, [r3, #32]
 8005500:	e016      	b.n	8005530 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	0c5b      	lsrs	r3, r3, #17
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	2b06      	cmp	r3, #6
 800550c:	d110      	bne.n	8005530 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005514:	2208      	movs	r2, #8
 8005516:	4619      	mov	r1, r3
 8005518:	6a38      	ldr	r0, [r7, #32]
 800551a:	f005 fa61 	bl	800a9e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800552a:	441a      	add	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0210 	orr.w	r2, r2, #16
 800553e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f005 fbdf 	bl	800ad08 <USB_ReadInterrupts>
 800554a:	4603      	mov	r3, r0
 800554c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005550:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005554:	f040 80a7 	bne.w	80056a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f005 fbe4 	bl	800ad2e <USB_ReadDevAllOutEpInterrupt>
 8005566:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005568:	e099      	b.n	800569e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 808e 	beq.w	8005692 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	4611      	mov	r1, r2
 8005580:	4618      	mov	r0, r3
 8005582:	f005 fc08 	bl	800ad96 <USB_ReadDevOutEPInterrupt>
 8005586:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00c      	beq.n	80055ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	461a      	mov	r2, r3
 80055a0:	2301      	movs	r3, #1
 80055a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80055a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fec2 	bl	8006330 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	461a      	mov	r2, r3
 80055c4:	2308      	movs	r3, #8
 80055c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80055c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 ff98 	bl	8006500 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	461a      	mov	r2, r3
 80055e8:	2310      	movs	r3, #16
 80055ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d030      	beq.n	8005658 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b80      	cmp	r3, #128	; 0x80
 8005600:	d109      	bne.n	8005616 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005614:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	4413      	add	r3, r2
 8005628:	3304      	adds	r3, #4
 800562a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	78db      	ldrb	r3, [r3, #3]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d108      	bne.n	8005646 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	b2db      	uxtb	r3, r3
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f00a fadd 	bl	800fc00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	461a      	mov	r2, r3
 8005654:	2302      	movs	r3, #2
 8005656:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	461a      	mov	r2, r3
 8005670:	2320      	movs	r3, #32
 8005672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	461a      	mov	r2, r3
 800568c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005690:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	3301      	adds	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f47f af62 	bne.w	800556a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f005 fb2c 	bl	800ad08 <USB_ReadInterrupts>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056ba:	f040 80db 	bne.w	8005874 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f005 fb4d 	bl	800ad62 <USB_ReadDevAllInEpInterrupt>
 80056c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80056ce:	e0cd      	b.n	800586c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80c2 	beq.w	8005860 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	4611      	mov	r1, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f005 fb73 	bl	800add2 <USB_ReadDevInEPInterrupt>
 80056ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d057      	beq.n	80057a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	2201      	movs	r2, #1
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	43db      	mvns	r3, r3
 8005712:	69f9      	ldr	r1, [r7, #28]
 8005714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005718:	4013      	ands	r3, r2
 800571a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005728:	461a      	mov	r2, r3
 800572a:	2301      	movs	r3, #1
 800572c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d132      	bne.n	800579c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	334c      	adds	r3, #76	; 0x4c
 8005746:	6819      	ldr	r1, [r3, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4403      	add	r3, r0
 8005756:	3348      	adds	r3, #72	; 0x48
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4419      	add	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4403      	add	r3, r0
 800576a:	334c      	adds	r3, #76	; 0x4c
 800576c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d113      	bne.n	800579c <HAL_PCD_IRQHandler+0x3a2>
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005778:	4613      	mov	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	3354      	adds	r3, #84	; 0x54
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d108      	bne.n	800579c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005794:	461a      	mov	r2, r3
 8005796:	2101      	movs	r1, #1
 8005798:	f005 fb7a 	bl	800ae90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f00a f9a7 	bl	800faf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057be:	461a      	mov	r2, r3
 80057c0:	2308      	movs	r3, #8
 80057c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f003 0310 	and.w	r3, r3, #16
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	461a      	mov	r2, r3
 80057dc:	2310      	movs	r3, #16
 80057de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	461a      	mov	r2, r3
 80057f8:	2340      	movs	r3, #64	; 0x40
 80057fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d023      	beq.n	800584e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005808:	6a38      	ldr	r0, [r7, #32]
 800580a:	f004 fa5b 	bl	8009cc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800580e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	3338      	adds	r3, #56	; 0x38
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	3304      	adds	r3, #4
 8005820:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	78db      	ldrb	r3, [r3, #3]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d108      	bne.n	800583c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2200      	movs	r2, #0
 800582e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	b2db      	uxtb	r3, r3
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f00a f9f4 	bl	800fc24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	461a      	mov	r2, r3
 800584a:	2302      	movs	r3, #2
 800584c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fcdb 	bl	8006216 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	3301      	adds	r3, #1
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	f47f af2e 	bne.w	80056d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f005 fa45 	bl	800ad08 <USB_ReadInterrupts>
 800587e:	4603      	mov	r3, r0
 8005880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005888:	d122      	bne.n	80058d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d108      	bne.n	80058ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80058b0:	2100      	movs	r1, #0
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fec2 	bl	800663c <HAL_PCDEx_LPM_Callback>
 80058b8:	e002      	b.n	80058c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f00a f992 	bl	800fbe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80058ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f005 fa17 	bl	800ad08 <USB_ReadInterrupts>
 80058da:	4603      	mov	r3, r0
 80058dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e4:	d112      	bne.n	800590c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d102      	bne.n	80058fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f00a f94e 	bl	800fb98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800590a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f005 f9f9 	bl	800ad08 <USB_ReadInterrupts>
 8005916:	4603      	mov	r3, r0
 8005918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800591c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005920:	f040 80b7 	bne.w	8005a92 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2110      	movs	r1, #16
 800593e:	4618      	mov	r0, r3
 8005940:	f004 f9c0 	bl	8009cc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005944:	2300      	movs	r3, #0
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005948:	e046      	b.n	80059d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	461a      	mov	r2, r3
 8005958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800595c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800597c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598a:	461a      	mov	r2, r3
 800598c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005990:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	3301      	adds	r3, #1
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3b3      	bcc.n	800594a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80059f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a0e:	f043 030b 	orr.w	r3, r3, #11
 8005a12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a24:	f043 030b 	orr.w	r3, r3, #11
 8005a28:	6453      	str	r3, [r2, #68]	; 0x44
 8005a2a:	e015      	b.n	8005a58 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005a42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a52:	f043 030b 	orr.w	r3, r3, #11
 8005a56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6818      	ldr	r0, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f005 fa07 	bl	800ae90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f005 f936 	bl	800ad08 <USB_ReadInterrupts>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa6:	d124      	bne.n	8005af2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f005 f9cc 	bl	800ae4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f004 f981 	bl	8009dbe <USB_GetDevSpeed>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681c      	ldr	r4, [r3, #0]
 8005ac8:	f001 fa28 	bl	8006f1c <HAL_RCC_GetHCLKFreq>
 8005acc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f003 fe80 	bl	80097dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f00a f832 	bl	800fb46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f005 f906 	bl	800ad08 <USB_ReadInterrupts>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d10a      	bne.n	8005b1c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f00a f80f 	bl	800fb2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695a      	ldr	r2, [r3, #20]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f002 0208 	and.w	r2, r2, #8
 8005b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f005 f8f1 	bl	800ad08 <USB_ReadInterrupts>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b80      	cmp	r3, #128	; 0x80
 8005b2e:	d122      	bne.n	8005b76 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b40:	e014      	b.n	8005b6c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b46:	4613      	mov	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d105      	bne.n	8005b66 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb27 	bl	80061b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3e5      	bcc.n	8005b42 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f005 f8c4 	bl	800ad08 <USB_ReadInterrupts>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b8a:	d13b      	bne.n	8005c04 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b90:	e02b      	b.n	8005bea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	3340      	adds	r3, #64	; 0x40
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d115      	bne.n	8005be4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005bb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	da12      	bge.n	8005be4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	333f      	adds	r3, #63	; 0x3f
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fae8 	bl	80061b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	3301      	adds	r3, #1
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d3ce      	bcc.n	8005b92 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f005 f87d 	bl	800ad08 <USB_ReadInterrupts>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c18:	d155      	bne.n	8005cc6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1e:	e045      	b.n	8005cac <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c34:	4613      	mov	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d12e      	bne.n	8005ca6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da2b      	bge.n	8005ca6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005c5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d121      	bne.n	8005ca6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c66:	4613      	mov	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c74:	2201      	movs	r2, #1
 8005c76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ca2:	6053      	str	r3, [r2, #4]
            break;
 8005ca4:	e007      	b.n	8005cb6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	3301      	adds	r3, #1
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d3b4      	bcc.n	8005c20 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f005 f81c 	bl	800ad08 <USB_ReadInterrupts>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cda:	d10a      	bne.n	8005cf2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f009 ffb3 	bl	800fc48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f005 f806 	bl	800ad08 <USB_ReadInterrupts>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d115      	bne.n	8005d32 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f009 ffa3 	bl	800fc64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6859      	ldr	r1, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	e000      	b.n	8005d32 <HAL_PCD_IRQHandler+0x938>
      return;
 8005d30:	bf00      	nop
    }
  }
}
 8005d32:	3734      	adds	r7, #52	; 0x34
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd90      	pop	{r4, r7, pc}

08005d38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_PCD_SetAddress+0x1a>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e013      	b.n	8005d7a <HAL_PCD_SetAddress+0x42>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f004 ff64 	bl	800ac38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	4608      	mov	r0, r1
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4603      	mov	r3, r0
 8005d92:	70fb      	strb	r3, [r7, #3]
 8005d94:	460b      	mov	r3, r1
 8005d96:	803b      	strh	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	da0f      	bge.n	8005dc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	f003 020f 	and.w	r2, r3, #15
 8005dae:	4613      	mov	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	3338      	adds	r3, #56	; 0x38
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4413      	add	r3, r2
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	705a      	strb	r2, [r3, #1]
 8005dc6:	e00f      	b.n	8005de8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	f003 020f 	and.w	r2, r3, #15
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4413      	add	r3, r2
 8005dde:	3304      	adds	r3, #4
 8005de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005df4:	883a      	ldrh	r2, [r7, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	78ba      	ldrb	r2, [r7, #2]
 8005dfe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d004      	beq.n	8005e12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e12:	78bb      	ldrb	r3, [r7, #2]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d102      	bne.n	8005e1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_PCD_EP_Open+0xaa>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e00e      	b.n	8005e4a <HAL_PCD_EP_Open+0xc8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68f9      	ldr	r1, [r7, #12]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f003 ffe4 	bl	8009e08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005e48:	7afb      	ldrb	r3, [r7, #11]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da0f      	bge.n	8005e86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	3338      	adds	r3, #56	; 0x38
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	4413      	add	r3, r2
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	705a      	strb	r2, [r3, #1]
 8005e84:	e00f      	b.n	8005ea6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	f003 020f 	and.w	r2, r3, #15
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	f003 030f 	and.w	r3, r3, #15
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_PCD_EP_Close+0x6e>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e00e      	b.n	8005ede <HAL_PCD_EP_Close+0x8c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68f9      	ldr	r1, [r7, #12]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f004 f822 	bl	8009f18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b086      	sub	sp, #24
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
 8005ef8:	f003 020f 	and.w	r2, r3, #15
 8005efc:	4613      	mov	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f28:	7afb      	ldrb	r3, [r7, #11]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d102      	bne.n	8005f42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f42:	7afb      	ldrb	r3, [r7, #11]
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	6979      	ldr	r1, [r7, #20]
 8005f5a:	f004 fb01 	bl	800a560 <USB_EP0StartXfer>
 8005f5e:	e008      	b.n	8005f72 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	f004 f8af 	bl	800a0d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	f003 020f 	and.w	r2, r3, #15
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fbc:	7afb      	ldrb	r3, [r7, #11]
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	3338      	adds	r3, #56	; 0x38
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	f003 030f 	and.w	r3, r3, #15
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d102      	bne.n	8006006 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	6979      	ldr	r1, [r7, #20]
 800601e:	f004 fa9f 	bl	800a560 <USB_EP0StartXfer>
 8006022:	e008      	b.n	8006036 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	f004 f84d 	bl	800a0d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	f003 020f 	and.w	r2, r3, #15
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d901      	bls.n	800605e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e050      	b.n	8006100 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800605e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006062:	2b00      	cmp	r3, #0
 8006064:	da0f      	bge.n	8006086 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006066:	78fb      	ldrb	r3, [r7, #3]
 8006068:	f003 020f 	and.w	r2, r3, #15
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	3338      	adds	r3, #56	; 0x38
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	4413      	add	r3, r2
 800607a:	3304      	adds	r3, #4
 800607c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	705a      	strb	r2, [r3, #1]
 8006084:	e00d      	b.n	80060a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006086:	78fa      	ldrb	r2, [r7, #3]
 8006088:	4613      	mov	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	3304      	adds	r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_PCD_EP_SetStall+0x82>
 80060be:	2302      	movs	r3, #2
 80060c0:	e01e      	b.n	8006100 <HAL_PCD_EP_SetStall+0xc0>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f004 fcdd 	bl	800aa90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	b2d9      	uxtb	r1, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060f0:	461a      	mov	r2, r3
 80060f2:	f004 fecd 	bl	800ae90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	f003 020f 	and.w	r2, r3, #15
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	429a      	cmp	r2, r3
 8006120:	d901      	bls.n	8006126 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e042      	b.n	80061ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800612a:	2b00      	cmp	r3, #0
 800612c:	da0f      	bge.n	800614e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	f003 020f 	and.w	r2, r3, #15
 8006134:	4613      	mov	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	3338      	adds	r3, #56	; 0x38
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4413      	add	r3, r2
 8006142:	3304      	adds	r3, #4
 8006144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	705a      	strb	r2, [r3, #1]
 800614c:	e00f      	b.n	800616e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	f003 020f 	and.w	r2, r3, #15
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	4413      	add	r3, r2
 8006164:	3304      	adds	r3, #4
 8006166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_PCD_EP_ClrStall+0x86>
 800618a:	2302      	movs	r3, #2
 800618c:	e00e      	b.n	80061ac <HAL_PCD_EP_ClrStall+0xa4>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	4618      	mov	r0, r3
 800619e:	f004 fce5 	bl	800ab6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80061c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	da0c      	bge.n	80061e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	f003 020f 	and.w	r2, r3, #15
 80061ce:	4613      	mov	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	3338      	adds	r3, #56	; 0x38
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4413      	add	r3, r2
 80061dc:	3304      	adds	r3, #4
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	e00c      	b.n	80061fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	f003 020f 	and.w	r2, r3, #15
 80061e8:	4613      	mov	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	4413      	add	r3, r2
 80061f8:	3304      	adds	r3, #4
 80061fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68f9      	ldr	r1, [r7, #12]
 8006202:	4618      	mov	r0, r3
 8006204:	f004 fb04 	bl	800a810 <USB_EPStopXfer>
 8006208:	4603      	mov	r3, r0
 800620a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800620c:	7afb      	ldrb	r3, [r7, #11]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b08a      	sub	sp, #40	; 0x28
 800621a:	af02      	add	r7, sp, #8
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	3338      	adds	r3, #56	; 0x38
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	4413      	add	r3, r2
 800623a:	3304      	adds	r3, #4
 800623c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1a      	ldr	r2, [r3, #32]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	429a      	cmp	r2, r3
 8006248:	d901      	bls.n	800624e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e06c      	b.n	8006328 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	429a      	cmp	r2, r3
 8006262:	d902      	bls.n	800626a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	3303      	adds	r3, #3
 800626e:	089b      	lsrs	r3, r3, #2
 8006270:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006272:	e02b      	b.n	80062cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	429a      	cmp	r2, r3
 8006288:	d902      	bls.n	8006290 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	3303      	adds	r3, #3
 8006294:	089b      	lsrs	r3, r3, #2
 8006296:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6919      	ldr	r1, [r3, #16]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	4603      	mov	r3, r0
 80062ae:	6978      	ldr	r0, [r7, #20]
 80062b0:	f004 fb58 	bl	800a964 <USB_WritePacket>

    ep->xfer_buff  += len;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	441a      	add	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1a      	ldr	r2, [r3, #32]
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	441a      	add	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d809      	bhi.n	80062f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1a      	ldr	r2, [r3, #32]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d203      	bcs.n	80062f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1be      	bne.n	8006274 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d811      	bhi.n	8006326 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	2201      	movs	r2, #1
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	43db      	mvns	r3, r3
 800631c:	6939      	ldr	r1, [r7, #16]
 800631e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006322:	4013      	ands	r3, r2
 8006324:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	333c      	adds	r3, #60	; 0x3c
 8006348:	3304      	adds	r3, #4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d17b      	bne.n	800645e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d015      	beq.n	800639c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4a61      	ldr	r2, [pc, #388]	; (80064f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	f240 80b9 	bls.w	80064ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80b3 	beq.w	80064ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006392:	461a      	mov	r2, r3
 8006394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006398:	6093      	str	r3, [r2, #8]
 800639a:	e0a7      	b.n	80064ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	461a      	mov	r2, r3
 80063b4:	2320      	movs	r3, #32
 80063b6:	6093      	str	r3, [r2, #8]
 80063b8:	e098      	b.n	80064ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 8093 	bne.w	80064ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	4a4b      	ldr	r2, [pc, #300]	; (80064f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d90f      	bls.n	80063ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e4:	461a      	mov	r2, r3
 80063e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ea:	6093      	str	r3, [r2, #8]
 80063ec:	e07e      	b.n	80064ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	4413      	add	r3, r2
 8006400:	3304      	adds	r3, #4
 8006402:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	69da      	ldr	r2, [r3, #28]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	0159      	lsls	r1, r3, #5
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	440b      	add	r3, r1
 8006410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800641a:	1ad2      	subs	r2, r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d114      	bne.n	8006450 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006438:	461a      	mov	r2, r3
 800643a:	2101      	movs	r1, #1
 800643c:	f004 fd28 	bl	800ae90 <USB_EP0_OutStart>
 8006440:	e006      	b.n	8006450 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	441a      	add	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f009 fb32 	bl	800fac0 <HAL_PCD_DataOutStageCallback>
 800645c:	e046      	b.n	80064ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4a26      	ldr	r2, [pc, #152]	; (80064fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d124      	bne.n	80064b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	461a      	mov	r2, r3
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	6093      	str	r3, [r2, #8]
 8006484:	e032      	b.n	80064ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	461a      	mov	r2, r3
 800649e:	2320      	movs	r3, #32
 80064a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f009 fb09 	bl	800fac0 <HAL_PCD_DataOutStageCallback>
 80064ae:	e01d      	b.n	80064ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d114      	bne.n	80064e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d108      	bne.n	80064e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064d8:	461a      	mov	r2, r3
 80064da:	2100      	movs	r1, #0
 80064dc:	f004 fcd8 	bl	800ae90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f009 faea 	bl	800fac0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	4f54300a 	.word	0x4f54300a
 80064fc:	4f54310a 	.word	0x4f54310a

08006500 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	333c      	adds	r3, #60	; 0x3c
 8006518:	3304      	adds	r3, #4
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a15      	ldr	r2, [pc, #84]	; (8006588 <PCD_EP_OutSetupPacket_int+0x88>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d90e      	bls.n	8006554 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	461a      	mov	r2, r3
 800654e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006552:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f009 faa1 	bl	800fa9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <PCD_EP_OutSetupPacket_int+0x88>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d90c      	bls.n	800657c <PCD_EP_OutSetupPacket_int+0x7c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d108      	bne.n	800657c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006574:	461a      	mov	r2, r3
 8006576:	2101      	movs	r1, #1
 8006578:	f004 fc8a 	bl	800ae90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	4f54300a 	.word	0x4f54300a

0800658c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
 8006598:	4613      	mov	r3, r2
 800659a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065aa:	883b      	ldrh	r3, [r7, #0]
 80065ac:	0419      	lsls	r1, r3, #16
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	629a      	str	r2, [r3, #40]	; 0x28
 80065b8:	e028      	b.n	800660c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	0c1b      	lsrs	r3, r3, #16
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	4413      	add	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065c8:	2300      	movs	r3, #0
 80065ca:	73fb      	strb	r3, [r7, #15]
 80065cc:	e00d      	b.n	80065ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	3340      	adds	r3, #64	; 0x40
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	4413      	add	r3, r2
 80065e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	3301      	adds	r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
 80065ea:	7bfa      	ldrb	r2, [r7, #15]
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d3ec      	bcc.n	80065ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80065f4:	883b      	ldrh	r3, [r7, #0]
 80065f6:	0418      	lsls	r0, r3, #16
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6819      	ldr	r1, [r3, #0]
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	3b01      	subs	r3, #1
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	4302      	orrs	r2, r0
 8006604:	3340      	adds	r3, #64	; 0x40
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	887a      	ldrh	r2, [r7, #2]
 800662c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e267      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d075      	beq.n	800675e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006672:	4b88      	ldr	r3, [pc, #544]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 030c 	and.w	r3, r3, #12
 800667a:	2b04      	cmp	r3, #4
 800667c:	d00c      	beq.n	8006698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800667e:	4b85      	ldr	r3, [pc, #532]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006686:	2b08      	cmp	r3, #8
 8006688:	d112      	bne.n	80066b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800668a:	4b82      	ldr	r3, [pc, #520]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006696:	d10b      	bne.n	80066b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006698:	4b7e      	ldr	r3, [pc, #504]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d05b      	beq.n	800675c <HAL_RCC_OscConfig+0x108>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d157      	bne.n	800675c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e242      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b8:	d106      	bne.n	80066c8 <HAL_RCC_OscConfig+0x74>
 80066ba:	4b76      	ldr	r3, [pc, #472]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a75      	ldr	r2, [pc, #468]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e01d      	b.n	8006704 <HAL_RCC_OscConfig+0xb0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066d0:	d10c      	bne.n	80066ec <HAL_RCC_OscConfig+0x98>
 80066d2:	4b70      	ldr	r3, [pc, #448]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a6f      	ldr	r2, [pc, #444]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	4b6d      	ldr	r3, [pc, #436]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a6c      	ldr	r2, [pc, #432]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e00b      	b.n	8006704 <HAL_RCC_OscConfig+0xb0>
 80066ec:	4b69      	ldr	r3, [pc, #420]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a68      	ldr	r2, [pc, #416]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4b66      	ldr	r3, [pc, #408]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a65      	ldr	r2, [pc, #404]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80066fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d013      	beq.n	8006734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670c:	f7fb fea2 	bl	8002454 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006714:	f7fb fe9e 	bl	8002454 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	; 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e207      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006726:	4b5b      	ldr	r3, [pc, #364]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f0      	beq.n	8006714 <HAL_RCC_OscConfig+0xc0>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006734:	f7fb fe8e 	bl	8002454 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800673c:	f7fb fe8a 	bl	8002454 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b64      	cmp	r3, #100	; 0x64
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e1f3      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674e:	4b51      	ldr	r3, [pc, #324]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0xe8>
 800675a:	e000      	b.n	800675e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800675c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d063      	beq.n	8006832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800676a:	4b4a      	ldr	r3, [pc, #296]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006776:	4b47      	ldr	r3, [pc, #284]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800677e:	2b08      	cmp	r3, #8
 8006780:	d11c      	bne.n	80067bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006782:	4b44      	ldr	r3, [pc, #272]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d116      	bne.n	80067bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800678e:	4b41      	ldr	r3, [pc, #260]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_RCC_OscConfig+0x152>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d001      	beq.n	80067a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e1c7      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a6:	4b3b      	ldr	r3, [pc, #236]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	4937      	ldr	r1, [pc, #220]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ba:	e03a      	b.n	8006832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067c4:	4b34      	ldr	r3, [pc, #208]	; (8006898 <HAL_RCC_OscConfig+0x244>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ca:	f7fb fe43 	bl	8002454 <HAL_GetTick>
 80067ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d0:	e008      	b.n	80067e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067d2:	f7fb fe3f 	bl	8002454 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e1a8      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e4:	4b2b      	ldr	r3, [pc, #172]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0f0      	beq.n	80067d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f0:	4b28      	ldr	r3, [pc, #160]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	4925      	ldr	r1, [pc, #148]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006800:	4313      	orrs	r3, r2
 8006802:	600b      	str	r3, [r1, #0]
 8006804:	e015      	b.n	8006832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006806:	4b24      	ldr	r3, [pc, #144]	; (8006898 <HAL_RCC_OscConfig+0x244>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fb fe22 	bl	8002454 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006814:	f7fb fe1e 	bl	8002454 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e187      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006826:	4b1b      	ldr	r3, [pc, #108]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d036      	beq.n	80068ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d016      	beq.n	8006874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006846:	4b15      	ldr	r3, [pc, #84]	; (800689c <HAL_RCC_OscConfig+0x248>)
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684c:	f7fb fe02 	bl	8002454 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006854:	f7fb fdfe 	bl	8002454 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e167      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <HAL_RCC_OscConfig+0x240>)
 8006868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f0      	beq.n	8006854 <HAL_RCC_OscConfig+0x200>
 8006872:	e01b      	b.n	80068ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006874:	4b09      	ldr	r3, [pc, #36]	; (800689c <HAL_RCC_OscConfig+0x248>)
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800687a:	f7fb fdeb 	bl	8002454 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006880:	e00e      	b.n	80068a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006882:	f7fb fde7 	bl	8002454 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d907      	bls.n	80068a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e150      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
 8006894:	40023800 	.word	0x40023800
 8006898:	42470000 	.word	0x42470000
 800689c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a0:	4b88      	ldr	r3, [pc, #544]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80068a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1ea      	bne.n	8006882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8097 	beq.w	80069e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ba:	2300      	movs	r3, #0
 80068bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068be:	4b81      	ldr	r3, [pc, #516]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10f      	bne.n	80068ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	4b7d      	ldr	r3, [pc, #500]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	4a7c      	ldr	r2, [pc, #496]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80068d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d8:	6413      	str	r3, [r2, #64]	; 0x40
 80068da:	4b7a      	ldr	r3, [pc, #488]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e2:	60bb      	str	r3, [r7, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068e6:	2301      	movs	r3, #1
 80068e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ea:	4b77      	ldr	r3, [pc, #476]	; (8006ac8 <HAL_RCC_OscConfig+0x474>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d118      	bne.n	8006928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068f6:	4b74      	ldr	r3, [pc, #464]	; (8006ac8 <HAL_RCC_OscConfig+0x474>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a73      	ldr	r2, [pc, #460]	; (8006ac8 <HAL_RCC_OscConfig+0x474>)
 80068fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006902:	f7fb fda7 	bl	8002454 <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800690a:	f7fb fda3 	bl	8002454 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e10c      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691c:	4b6a      	ldr	r3, [pc, #424]	; (8006ac8 <HAL_RCC_OscConfig+0x474>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0f0      	beq.n	800690a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d106      	bne.n	800693e <HAL_RCC_OscConfig+0x2ea>
 8006930:	4b64      	ldr	r3, [pc, #400]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	4a63      	ldr	r2, [pc, #396]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006936:	f043 0301 	orr.w	r3, r3, #1
 800693a:	6713      	str	r3, [r2, #112]	; 0x70
 800693c:	e01c      	b.n	8006978 <HAL_RCC_OscConfig+0x324>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	2b05      	cmp	r3, #5
 8006944:	d10c      	bne.n	8006960 <HAL_RCC_OscConfig+0x30c>
 8006946:	4b5f      	ldr	r3, [pc, #380]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	4a5e      	ldr	r2, [pc, #376]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 800694c:	f043 0304 	orr.w	r3, r3, #4
 8006950:	6713      	str	r3, [r2, #112]	; 0x70
 8006952:	4b5c      	ldr	r3, [pc, #368]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	4a5b      	ldr	r2, [pc, #364]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	6713      	str	r3, [r2, #112]	; 0x70
 800695e:	e00b      	b.n	8006978 <HAL_RCC_OscConfig+0x324>
 8006960:	4b58      	ldr	r3, [pc, #352]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006964:	4a57      	ldr	r2, [pc, #348]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	6713      	str	r3, [r2, #112]	; 0x70
 800696c:	4b55      	ldr	r3, [pc, #340]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 800696e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006970:	4a54      	ldr	r2, [pc, #336]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006972:	f023 0304 	bic.w	r3, r3, #4
 8006976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d015      	beq.n	80069ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006980:	f7fb fd68 	bl	8002454 <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006986:	e00a      	b.n	800699e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006988:	f7fb fd64 	bl	8002454 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e0cb      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699e:	4b49      	ldr	r3, [pc, #292]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0ee      	beq.n	8006988 <HAL_RCC_OscConfig+0x334>
 80069aa:	e014      	b.n	80069d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ac:	f7fb fd52 	bl	8002454 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069b2:	e00a      	b.n	80069ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069b4:	f7fb fd4e 	bl	8002454 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e0b5      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ca:	4b3e      	ldr	r3, [pc, #248]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1ee      	bne.n	80069b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d105      	bne.n	80069e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069dc:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	4a38      	ldr	r2, [pc, #224]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80069e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80a1 	beq.w	8006b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069f2:	4b34      	ldr	r3, [pc, #208]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d05c      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d141      	bne.n	8006a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a06:	4b31      	ldr	r3, [pc, #196]	; (8006acc <HAL_RCC_OscConfig+0x478>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0c:	f7fb fd22 	bl	8002454 <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a14:	f7fb fd1e 	bl	8002454 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e087      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a26:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1f0      	bne.n	8006a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69da      	ldr	r2, [r3, #28]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	019b      	lsls	r3, r3, #6
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	085b      	lsrs	r3, r3, #1
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	041b      	lsls	r3, r3, #16
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	061b      	lsls	r3, r3, #24
 8006a56:	491b      	ldr	r1, [pc, #108]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a5c:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <HAL_RCC_OscConfig+0x478>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a62:	f7fb fcf7 	bl	8002454 <HAL_GetTick>
 8006a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a68:	e008      	b.n	8006a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a6a:	f7fb fcf3 	bl	8002454 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d901      	bls.n	8006a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e05c      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a7c:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0f0      	beq.n	8006a6a <HAL_RCC_OscConfig+0x416>
 8006a88:	e054      	b.n	8006b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8a:	4b10      	ldr	r3, [pc, #64]	; (8006acc <HAL_RCC_OscConfig+0x478>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a90:	f7fb fce0 	bl	8002454 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a98:	f7fb fcdc 	bl	8002454 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e045      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aaa:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <HAL_RCC_OscConfig+0x470>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0x444>
 8006ab6:	e03d      	b.n	8006b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d107      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e038      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	40007000 	.word	0x40007000
 8006acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <HAL_RCC_OscConfig+0x4ec>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d028      	beq.n	8006b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d121      	bne.n	8006b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d11a      	bne.n	8006b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b00:	4013      	ands	r3, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d111      	bne.n	8006b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b16:	085b      	lsrs	r3, r3, #1
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d107      	bne.n	8006b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d001      	beq.n	8006b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40023800 	.word	0x40023800

08006b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e0cc      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b58:	4b68      	ldr	r3, [pc, #416]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d90c      	bls.n	8006b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b66:	4b65      	ldr	r3, [pc, #404]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6e:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0b8      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d020      	beq.n	8006bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b98:	4b59      	ldr	r3, [pc, #356]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4a58      	ldr	r2, [pc, #352]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bb0:	4b53      	ldr	r3, [pc, #332]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4a52      	ldr	r2, [pc, #328]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bbc:	4b50      	ldr	r3, [pc, #320]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	494d      	ldr	r1, [pc, #308]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d044      	beq.n	8006c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d107      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be2:	4b47      	ldr	r3, [pc, #284]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d119      	bne.n	8006c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e07f      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d003      	beq.n	8006c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d107      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c02:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e06f      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c12:	4b3b      	ldr	r3, [pc, #236]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e067      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c22:	4b37      	ldr	r3, [pc, #220]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f023 0203 	bic.w	r2, r3, #3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	4934      	ldr	r1, [pc, #208]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c34:	f7fb fc0e 	bl	8002454 <HAL_GetTick>
 8006c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c3a:	e00a      	b.n	8006c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c3c:	f7fb fc0a 	bl	8002454 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e04f      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c52:	4b2b      	ldr	r3, [pc, #172]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 020c 	and.w	r2, r3, #12
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d1eb      	bne.n	8006c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c64:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d20c      	bcs.n	8006c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c72:	4b22      	ldr	r3, [pc, #136]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <HAL_RCC_ClockConfig+0x1b8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d001      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e032      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c98:	4b19      	ldr	r3, [pc, #100]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4916      	ldr	r1, [pc, #88]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cb6:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	490e      	ldr	r1, [pc, #56]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cca:	f000 f821 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	490a      	ldr	r1, [pc, #40]	; (8006d04 <HAL_RCC_ClockConfig+0x1c0>)
 8006cdc:	5ccb      	ldrb	r3, [r1, r3]
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ce6:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fa fde0 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40023c00 	.word	0x40023c00
 8006d00:	40023800 	.word	0x40023800
 8006d04:	08010c5c 	.word	0x08010c5c
 8006d08:	2000000c 	.word	0x2000000c
 8006d0c:	20000014 	.word	0x20000014

08006d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d14:	b094      	sub	sp, #80	; 0x50
 8006d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d20:	2300      	movs	r3, #0
 8006d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d28:	4b79      	ldr	r3, [pc, #484]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 030c 	and.w	r3, r3, #12
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d00d      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0x40>
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	f200 80e1 	bhi.w	8006efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0x34>
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d003      	beq.n	8006d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d42:	e0db      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d44:	4b73      	ldr	r3, [pc, #460]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d48:	e0db      	b.n	8006f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d4a:	4b73      	ldr	r3, [pc, #460]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d4e:	e0d8      	b.n	8006f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d50:	4b6f      	ldr	r3, [pc, #444]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d5a:	4b6d      	ldr	r3, [pc, #436]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d063      	beq.n	8006e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d66:	4b6a      	ldr	r3, [pc, #424]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	099b      	lsrs	r3, r3, #6
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d78:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d82:	4622      	mov	r2, r4
 8006d84:	462b      	mov	r3, r5
 8006d86:	f04f 0000 	mov.w	r0, #0
 8006d8a:	f04f 0100 	mov.w	r1, #0
 8006d8e:	0159      	lsls	r1, r3, #5
 8006d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d94:	0150      	lsls	r0, r2, #5
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	1a51      	subs	r1, r2, r1
 8006d9e:	6139      	str	r1, [r7, #16]
 8006da0:	4629      	mov	r1, r5
 8006da2:	eb63 0301 	sbc.w	r3, r3, r1
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006db4:	4659      	mov	r1, fp
 8006db6:	018b      	lsls	r3, r1, #6
 8006db8:	4651      	mov	r1, sl
 8006dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dbe:	4651      	mov	r1, sl
 8006dc0:	018a      	lsls	r2, r1, #6
 8006dc2:	4651      	mov	r1, sl
 8006dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8006dc8:	4659      	mov	r1, fp
 8006dca:	eb63 0901 	sbc.w	r9, r3, r1
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	f04f 0300 	mov.w	r3, #0
 8006dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006de2:	4690      	mov	r8, r2
 8006de4:	4699      	mov	r9, r3
 8006de6:	4623      	mov	r3, r4
 8006de8:	eb18 0303 	adds.w	r3, r8, r3
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	462b      	mov	r3, r5
 8006df0:	eb49 0303 	adc.w	r3, r9, r3
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e02:	4629      	mov	r1, r5
 8006e04:	024b      	lsls	r3, r1, #9
 8006e06:	4621      	mov	r1, r4
 8006e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	024a      	lsls	r2, r1, #9
 8006e10:	4610      	mov	r0, r2
 8006e12:	4619      	mov	r1, r3
 8006e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e16:	2200      	movs	r2, #0
 8006e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e20:	f7f9 fa3e 	bl	80002a0 <__aeabi_uldivmod>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4613      	mov	r3, r2
 8006e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e2c:	e058      	b.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2e:	4b38      	ldr	r3, [pc, #224]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	099b      	lsrs	r3, r3, #6
 8006e34:	2200      	movs	r2, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	4611      	mov	r1, r2
 8006e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e3e:	623b      	str	r3, [r7, #32]
 8006e40:	2300      	movs	r3, #0
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
 8006e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e48:	4642      	mov	r2, r8
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	f04f 0000 	mov.w	r0, #0
 8006e50:	f04f 0100 	mov.w	r1, #0
 8006e54:	0159      	lsls	r1, r3, #5
 8006e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e5a:	0150      	lsls	r0, r2, #5
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4641      	mov	r1, r8
 8006e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e66:	4649      	mov	r1, r9
 8006e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e80:	ebb2 040a 	subs.w	r4, r2, sl
 8006e84:	eb63 050b 	sbc.w	r5, r3, fp
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	00eb      	lsls	r3, r5, #3
 8006e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e96:	00e2      	lsls	r2, r4, #3
 8006e98:	4614      	mov	r4, r2
 8006e9a:	461d      	mov	r5, r3
 8006e9c:	4643      	mov	r3, r8
 8006e9e:	18e3      	adds	r3, r4, r3
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	eb45 0303 	adc.w	r3, r5, r3
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	028b      	lsls	r3, r1, #10
 8006eba:	4621      	mov	r1, r4
 8006ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	028a      	lsls	r2, r1, #10
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eca:	2200      	movs	r2, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	61fa      	str	r2, [r7, #28]
 8006ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed4:	f7f9 f9e4 	bl	80002a0 <__aeabi_uldivmod>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4613      	mov	r3, r2
 8006ede:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	3301      	adds	r3, #1
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006efa:	e002      	b.n	8006f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006efe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3750      	adds	r7, #80	; 0x50
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800
 8006f14:	00f42400 	.word	0x00f42400
 8006f18:	007a1200 	.word	0x007a1200

08006f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f20:	4b03      	ldr	r3, [pc, #12]	; (8006f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f22:	681b      	ldr	r3, [r3, #0]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	2000000c 	.word	0x2000000c

08006f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f38:	f7ff fff0 	bl	8006f1c <HAL_RCC_GetHCLKFreq>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	0a9b      	lsrs	r3, r3, #10
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	4903      	ldr	r1, [pc, #12]	; (8006f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f4a:	5ccb      	ldrb	r3, [r1, r3]
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40023800 	.word	0x40023800
 8006f58:	08010c6c 	.word	0x08010c6c

08006f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f60:	f7ff ffdc 	bl	8006f1c <HAL_RCC_GetHCLKFreq>
 8006f64:	4602      	mov	r2, r0
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	0b5b      	lsrs	r3, r3, #13
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	4903      	ldr	r1, [pc, #12]	; (8006f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f72:	5ccb      	ldrb	r3, [r1, r3]
 8006f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	08010c6c 	.word	0x08010c6c

08006f84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	220f      	movs	r2, #15
 8006f92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f94:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0203 	and.w	r2, r3, #3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fac:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006fb8:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	08db      	lsrs	r3, r3, #3
 8006fbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fc6:	4b07      	ldr	r3, [pc, #28]	; (8006fe4 <HAL_RCC_GetClockConfig+0x60>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 020f 	and.w	r2, r3, #15
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	601a      	str	r2, [r3, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	40023c00 	.word	0x40023c00

08006fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800700c:	2b00      	cmp	r3, #0
 800700e:	d105      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007018:	2b00      	cmp	r3, #0
 800701a:	d075      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800701c:	4b91      	ldr	r3, [pc, #580]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007022:	f7fb fa17 	bl	8002454 <HAL_GetTick>
 8007026:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007028:	e008      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800702a:	f7fb fa13 	bl	8002454 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d901      	bls.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e189      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800703c:	4b8a      	ldr	r3, [pc, #552]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1f0      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	019a      	lsls	r2, r3, #6
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	071b      	lsls	r3, r3, #28
 8007060:	4981      	ldr	r1, [pc, #516]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01f      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007074:	4b7c      	ldr	r3, [pc, #496]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800707a:	0f1b      	lsrs	r3, r3, #28
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	019a      	lsls	r2, r3, #6
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	061b      	lsls	r3, r3, #24
 800708e:	431a      	orrs	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	071b      	lsls	r3, r3, #28
 8007094:	4974      	ldr	r1, [pc, #464]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800709c:	4b72      	ldr	r3, [pc, #456]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800709e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a2:	f023 021f 	bic.w	r2, r3, #31
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	496e      	ldr	r1, [pc, #440]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	019a      	lsls	r2, r3, #6
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	061b      	lsls	r3, r3, #24
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	071b      	lsls	r3, r3, #28
 80070d4:	4964      	ldr	r1, [pc, #400]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070dc:	4b61      	ldr	r3, [pc, #388]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80070de:	2201      	movs	r2, #1
 80070e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070e2:	f7fb f9b7 	bl	8002454 <HAL_GetTick>
 80070e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070e8:	e008      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070ea:	f7fb f9b3 	bl	8002454 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e129      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070fc:	4b5a      	ldr	r3, [pc, #360]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0f0      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800711c:	2b00      	cmp	r3, #0
 800711e:	d079      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007120:	4b52      	ldr	r3, [pc, #328]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007126:	f7fb f995 	bl	8002454 <HAL_GetTick>
 800712a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800712c:	e008      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800712e:	f7fb f991 	bl	8002454 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e107      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007140:	4b49      	ldr	r3, [pc, #292]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800714c:	d0ef      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d020      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800715a:	4b43      	ldr	r3, [pc, #268]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800715c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007160:	0f1b      	lsrs	r3, r3, #28
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	019a      	lsls	r2, r3, #6
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	061b      	lsls	r3, r3, #24
 8007174:	431a      	orrs	r2, r3
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	071b      	lsls	r3, r3, #28
 800717a:	493b      	ldr	r1, [pc, #236]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007182:	4b39      	ldr	r3, [pc, #228]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007188:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	3b01      	subs	r3, #1
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	4934      	ldr	r1, [pc, #208]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01e      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071a8:	4b2f      	ldr	r3, [pc, #188]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ae:	0e1b      	lsrs	r3, r3, #24
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	019a      	lsls	r2, r3, #6
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	061b      	lsls	r3, r3, #24
 80071c0:	431a      	orrs	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	071b      	lsls	r3, r3, #28
 80071c8:	4927      	ldr	r1, [pc, #156]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071d0:	4b25      	ldr	r3, [pc, #148]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	4922      	ldr	r1, [pc, #136]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071e6:	4b21      	ldr	r3, [pc, #132]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071ec:	f7fb f932 	bl	8002454 <HAL_GetTick>
 80071f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071f4:	f7fb f92e 	bl	8002454 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e0a4      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007206:	4b18      	ldr	r3, [pc, #96]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800720e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007212:	d1ef      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 808b 	beq.w	8007338 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	4b10      	ldr	r3, [pc, #64]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	4a0f      	ldr	r2, [pc, #60]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800722c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007230:	6413      	str	r3, [r2, #64]	; 0x40
 8007232:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800723e:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a0b      	ldr	r2, [pc, #44]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007248:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800724a:	f7fb f903 	bl	8002454 <HAL_GetTick>
 800724e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007250:	e010      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007252:	f7fb f8ff 	bl	8002454 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d909      	bls.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e075      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007264:	42470068 	.word	0x42470068
 8007268:	40023800 	.word	0x40023800
 800726c:	42470070 	.word	0x42470070
 8007270:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007274:	4b38      	ldr	r3, [pc, #224]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0e8      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007280:	4b36      	ldr	r3, [pc, #216]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007288:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d02f      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	429a      	cmp	r2, r3
 800729c:	d028      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800729e:	4b2f      	ldr	r3, [pc, #188]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072a8:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072ae:	4b2c      	ldr	r3, [pc, #176]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072b4:	4a29      	ldr	r2, [pc, #164]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072ba:	4b28      	ldr	r3, [pc, #160]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d114      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072c6:	f7fb f8c5 	bl	8002454 <HAL_GetTick>
 80072ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072cc:	e00a      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072ce:	f7fb f8c1 	bl	8002454 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072dc:	4293      	cmp	r3, r2
 80072de:	d901      	bls.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e035      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e4:	4b1d      	ldr	r3, [pc, #116]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0ee      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fc:	d10d      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80072fe:	4b17      	ldr	r3, [pc, #92]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800730e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007312:	4912      	ldr	r1, [pc, #72]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007314:	4313      	orrs	r3, r2
 8007316:	608b      	str	r3, [r1, #8]
 8007318:	e005      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800731a:	4b10      	ldr	r3, [pc, #64]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	4a0f      	ldr	r2, [pc, #60]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007320:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007324:	6093      	str	r3, [r2, #8]
 8007326:	4b0d      	ldr	r3, [pc, #52]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007332:	490a      	ldr	r1, [pc, #40]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007334:	4313      	orrs	r3, r2
 8007336:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800734a:	4b06      	ldr	r3, [pc, #24]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800734c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40007000 	.word	0x40007000
 800735c:	40023800 	.word	0x40023800
 8007360:	42470e40 	.word	0x42470e40
 8007364:	424711e0 	.word	0x424711e0

08007368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e07b      	b.n	8007472 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	2b00      	cmp	r3, #0
 8007380:	d108      	bne.n	8007394 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800738a:	d009      	beq.n	80073a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	61da      	str	r2, [r3, #28]
 8007392:	e005      	b.n	80073a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fa f9fc 	bl	80017b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007424:	ea42 0103 	orr.w	r1, r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	0c1b      	lsrs	r3, r3, #16
 800743e:	f003 0104 	and.w	r1, r3, #4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	f003 0210 	and.w	r2, r3, #16
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69da      	ldr	r2, [r3, #28]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007460:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b088      	sub	sp, #32
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	603b      	str	r3, [r7, #0]
 8007486:	4613      	mov	r3, r2
 8007488:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_SPI_Transmit+0x22>
 8007498:	2302      	movs	r3, #2
 800749a:	e126      	b.n	80076ea <HAL_SPI_Transmit+0x270>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074a4:	f7fa ffd6 	bl	8002454 <HAL_GetTick>
 80074a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d002      	beq.n	80074c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074ba:	2302      	movs	r3, #2
 80074bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074be:	e10b      	b.n	80076d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <HAL_SPI_Transmit+0x52>
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d102      	bne.n	80074d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074d0:	e102      	b.n	80076d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2203      	movs	r2, #3
 80074d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	88fa      	ldrh	r2, [r7, #6]
 80074ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007518:	d10f      	bne.n	800753a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007528:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007538:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007544:	2b40      	cmp	r3, #64	; 0x40
 8007546:	d007      	beq.n	8007558 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007560:	d14b      	bne.n	80075fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <HAL_SPI_Transmit+0xf6>
 800756a:	8afb      	ldrh	r3, [r7, #22]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d13e      	bne.n	80075ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	881a      	ldrh	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	1c9a      	adds	r2, r3, #2
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758a:	b29b      	uxth	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007594:	e02b      	b.n	80075ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d112      	bne.n	80075ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	881a      	ldrh	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b4:	1c9a      	adds	r2, r3, #2
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80075c8:	e011      	b.n	80075ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ca:	f7fa ff43 	bl	8002454 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d803      	bhi.n	80075e2 <HAL_SPI_Transmit+0x168>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e0:	d102      	bne.n	80075e8 <HAL_SPI_Transmit+0x16e>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075ec:	e074      	b.n	80076d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1ce      	bne.n	8007596 <HAL_SPI_Transmit+0x11c>
 80075f8:	e04c      	b.n	8007694 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <HAL_SPI_Transmit+0x18e>
 8007602:	8afb      	ldrh	r3, [r7, #22]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d140      	bne.n	800768a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	330c      	adds	r3, #12
 8007612:	7812      	ldrb	r2, [r2, #0]
 8007614:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007624:	b29b      	uxth	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800762e:	e02c      	b.n	800768a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b02      	cmp	r3, #2
 800763c:	d113      	bne.n	8007666 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	330c      	adds	r3, #12
 8007648:	7812      	ldrb	r2, [r2, #0]
 800764a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	86da      	strh	r2, [r3, #54]	; 0x36
 8007664:	e011      	b.n	800768a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007666:	f7fa fef5 	bl	8002454 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d803      	bhi.n	800767e <HAL_SPI_Transmit+0x204>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767c:	d102      	bne.n	8007684 <HAL_SPI_Transmit+0x20a>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007688:	e026      	b.n	80076d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1cd      	bne.n	8007630 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fce9 	bl	8008070 <SPI_EndRxTxTransaction>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2220      	movs	r2, #32
 80076a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076b2:	2300      	movs	r3, #0
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	613b      	str	r3, [r7, #16]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	77fb      	strb	r3, [r7, #31]
 80076d4:	e000      	b.n	80076d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80076d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3720      	adds	r7, #32
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b088      	sub	sp, #32
 80076f6:	af02      	add	r7, sp, #8
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800770e:	d112      	bne.n	8007736 <HAL_SPI_Receive+0x44>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10e      	bne.n	8007736 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2204      	movs	r2, #4
 800771c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	4613      	mov	r3, r2
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f8f1 	bl	8007914 <HAL_SPI_TransmitReceive>
 8007732:	4603      	mov	r3, r0
 8007734:	e0ea      	b.n	800790c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_SPI_Receive+0x52>
 8007740:	2302      	movs	r3, #2
 8007742:	e0e3      	b.n	800790c <HAL_SPI_Receive+0x21a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800774c:	f7fa fe82 	bl	8002454 <HAL_GetTick>
 8007750:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b01      	cmp	r3, #1
 800775c:	d002      	beq.n	8007764 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800775e:	2302      	movs	r3, #2
 8007760:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007762:	e0ca      	b.n	80078fa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <HAL_SPI_Receive+0x7e>
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007774:	e0c1      	b.n	80078fa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2204      	movs	r2, #4
 800777a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	88fa      	ldrh	r2, [r7, #6]
 800778e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	88fa      	ldrh	r2, [r7, #6]
 8007794:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077bc:	d10f      	bne.n	80077de <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d007      	beq.n	80077fc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d162      	bne.n	80078ca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007804:	e02e      	b.n	8007864 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b01      	cmp	r3, #1
 8007812:	d115      	bne.n	8007840 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f103 020c 	add.w	r2, r3, #12
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	7812      	ldrb	r2, [r2, #0]
 8007822:	b2d2      	uxtb	r2, r2
 8007824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007834:	b29b      	uxth	r3, r3
 8007836:	3b01      	subs	r3, #1
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800783e:	e011      	b.n	8007864 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007840:	f7fa fe08 	bl	8002454 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d803      	bhi.n	8007858 <HAL_SPI_Receive+0x166>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007856:	d102      	bne.n	800785e <HAL_SPI_Receive+0x16c>
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d102      	bne.n	8007864 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007862:	e04a      	b.n	80078fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007868:	b29b      	uxth	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1cb      	bne.n	8007806 <HAL_SPI_Receive+0x114>
 800786e:	e031      	b.n	80078d4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b01      	cmp	r3, #1
 800787c:	d113      	bne.n	80078a6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	b292      	uxth	r2, r2
 800788a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	1c9a      	adds	r2, r3, #2
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078a4:	e011      	b.n	80078ca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078a6:	f7fa fdd5 	bl	8002454 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d803      	bhi.n	80078be <HAL_SPI_Receive+0x1cc>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d102      	bne.n	80078c4 <HAL_SPI_Receive+0x1d2>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d102      	bne.n	80078ca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078c8:	e017      	b.n	80078fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1cd      	bne.n	8007870 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 fb63 	bl	8007fa4 <SPI_EndRxTransaction>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	75fb      	strb	r3, [r7, #23]
 80078f6:	e000      	b.n	80078fa <HAL_SPI_Receive+0x208>
  }

error :
 80078f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800790a:	7dfb      	ldrb	r3, [r7, #23]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08c      	sub	sp, #48	; 0x30
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007922:	2301      	movs	r3, #1
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_SPI_TransmitReceive+0x26>
 8007936:	2302      	movs	r3, #2
 8007938:	e18a      	b.n	8007c50 <HAL_SPI_TransmitReceive+0x33c>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007942:	f7fa fd87 	bl	8002454 <HAL_GetTick>
 8007946:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800794e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007958:	887b      	ldrh	r3, [r7, #2]
 800795a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800795c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007960:	2b01      	cmp	r3, #1
 8007962:	d00f      	beq.n	8007984 <HAL_SPI_TransmitReceive+0x70>
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800796a:	d107      	bne.n	800797c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d103      	bne.n	800797c <HAL_SPI_TransmitReceive+0x68>
 8007974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007978:	2b04      	cmp	r3, #4
 800797a:	d003      	beq.n	8007984 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800797c:	2302      	movs	r3, #2
 800797e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007982:	e15b      	b.n	8007c3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d005      	beq.n	8007996 <HAL_SPI_TransmitReceive+0x82>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_SPI_TransmitReceive+0x82>
 8007990:	887b      	ldrh	r3, [r7, #2]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d103      	bne.n	800799e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800799c:	e14e      	b.n	8007c3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d003      	beq.n	80079b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2205      	movs	r2, #5
 80079ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	887a      	ldrh	r2, [r7, #2]
 80079c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	887a      	ldrh	r2, [r7, #2]
 80079c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	887a      	ldrh	r2, [r7, #2]
 80079d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	887a      	ldrh	r2, [r7, #2]
 80079da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f2:	2b40      	cmp	r3, #64	; 0x40
 80079f4:	d007      	beq.n	8007a06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0e:	d178      	bne.n	8007b02 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <HAL_SPI_TransmitReceive+0x10a>
 8007a18:	8b7b      	ldrh	r3, [r7, #26]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d166      	bne.n	8007aec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	881a      	ldrh	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	1c9a      	adds	r2, r3, #2
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a42:	e053      	b.n	8007aec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d11b      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x176>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d016      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x176>
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d113      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	881a      	ldrh	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a72:	1c9a      	adds	r2, r3, #2
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d119      	bne.n	8007acc <HAL_SPI_TransmitReceive+0x1b8>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d014      	beq.n	8007acc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68da      	ldr	r2, [r3, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	b292      	uxth	r2, r2
 8007aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	1c9a      	adds	r2, r3, #2
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007acc:	f7fa fcc2 	bl	8002454 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d807      	bhi.n	8007aec <HAL_SPI_TransmitReceive+0x1d8>
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae2:	d003      	beq.n	8007aec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007aea:	e0a7      	b.n	8007c3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1a6      	bne.n	8007a44 <HAL_SPI_TransmitReceive+0x130>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1a1      	bne.n	8007a44 <HAL_SPI_TransmitReceive+0x130>
 8007b00:	e07c      	b.n	8007bfc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <HAL_SPI_TransmitReceive+0x1fc>
 8007b0a:	8b7b      	ldrh	r3, [r7, #26]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d16b      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b36:	e057      	b.n	8007be8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d11c      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x26c>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d017      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x26c>
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d114      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	330c      	adds	r3, #12
 8007b60:	7812      	ldrb	r2, [r2, #0]
 8007b62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d119      	bne.n	8007bc2 <HAL_SPI_TransmitReceive+0x2ae>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d014      	beq.n	8007bc2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bc2:	f7fa fc47 	bl	8002454 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d803      	bhi.n	8007bda <HAL_SPI_TransmitReceive+0x2c6>
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd8:	d102      	bne.n	8007be0 <HAL_SPI_TransmitReceive+0x2cc>
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007be6:	e029      	b.n	8007c3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1a2      	bne.n	8007b38 <HAL_SPI_TransmitReceive+0x224>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d19d      	bne.n	8007b38 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fa35 	bl	8008070 <SPI_EndRxTxTransaction>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d006      	beq.n	8007c1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2220      	movs	r2, #32
 8007c16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c18:	e010      	b.n	8007c3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10b      	bne.n	8007c3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c22:	2300      	movs	r3, #0
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	e000      	b.n	8007c3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3730      	adds	r7, #48	; 0x30
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	099b      	lsrs	r3, r3, #6
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10f      	bne.n	8007c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	099b      	lsrs	r3, r3, #6
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d004      	beq.n	8007c9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
    return;
 8007c9a:	e0d7      	b.n	8007e4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	085b      	lsrs	r3, r3, #1
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <HAL_SPI_IRQHandler+0x66>
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	09db      	lsrs	r3, r3, #7
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d004      	beq.n	8007cbe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	4798      	blx	r3
    return;
 8007cbc:	e0c6      	b.n	8007e4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10c      	bne.n	8007ce4 <HAL_SPI_IRQHandler+0x8c>
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	099b      	lsrs	r3, r3, #6
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d106      	bne.n	8007ce4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	0a1b      	lsrs	r3, r3, #8
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 80b4 	beq.w	8007e4c <HAL_SPI_IRQHandler+0x1f4>
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80ad 	beq.w	8007e4c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	099b      	lsrs	r3, r3, #6
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d023      	beq.n	8007d46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d011      	beq.n	8007d2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0e:	f043 0204 	orr.w	r2, r3, #4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	e00b      	b.n	8007d46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d2e:	2300      	movs	r3, #0
 8007d30:	613b      	str	r3, [r7, #16]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	693b      	ldr	r3, [r7, #16]
        return;
 8007d44:	e082      	b.n	8007e4c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d014      	beq.n	8007d7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d56:	f043 0201 	orr.w	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00c      	beq.n	8007da2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8c:	f043 0208 	orr.w	r2, r3, #8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d94:	2300      	movs	r3, #0
 8007d96:	60bb      	str	r3, [r7, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	60bb      	str	r3, [r7, #8]
 8007da0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d04f      	beq.n	8007e4a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007db8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <HAL_SPI_IRQHandler+0x17e>
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d034      	beq.n	8007e40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0203 	bic.w	r2, r2, #3
 8007de4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d011      	beq.n	8007e12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df2:	4a18      	ldr	r2, [pc, #96]	; (8007e54 <HAL_SPI_IRQHandler+0x1fc>)
 8007df4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fb fcce 	bl	800379c <HAL_DMA_Abort_IT>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d016      	beq.n	8007e48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e1e:	4a0d      	ldr	r2, [pc, #52]	; (8007e54 <HAL_SPI_IRQHandler+0x1fc>)
 8007e20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fb fcb8 	bl	800379c <HAL_DMA_Abort_IT>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007e3e:	e003      	b.n	8007e48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f809 	bl	8007e58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e46:	e000      	b.n	8007e4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007e48:	bf00      	nop
    return;
 8007e4a:	bf00      	nop
  }
}
 8007e4c:	3720      	adds	r7, #32
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	08007e6d 	.word	0x08007e6d

08007e58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7ff ffe6 	bl	8007e58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ea4:	f7fa fad6 	bl	8002454 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007eb4:	f7fa face 	bl	8002454 <HAL_GetTick>
 8007eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007eba:	4b39      	ldr	r3, [pc, #228]	; (8007fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	015b      	lsls	r3, r3, #5
 8007ec0:	0d1b      	lsrs	r3, r3, #20
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	fb02 f303 	mul.w	r3, r2, r3
 8007ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eca:	e054      	b.n	8007f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed2:	d050      	beq.n	8007f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ed4:	f7fa fabe 	bl	8002454 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d902      	bls.n	8007eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d13d      	bne.n	8007f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f02:	d111      	bne.n	8007f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f0c:	d004      	beq.n	8007f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f16:	d107      	bne.n	8007f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f30:	d10f      	bne.n	8007f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e017      	b.n	8007f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	bf0c      	ite	eq
 8007f86:	2301      	moveq	r3, #1
 8007f88:	2300      	movne	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d19b      	bne.n	8007ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3720      	adds	r7, #32
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	2000000c 	.word	0x2000000c

08007fa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fb8:	d111      	bne.n	8007fde <SPI_EndRxTransaction+0x3a>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc2:	d004      	beq.n	8007fce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fcc:	d107      	bne.n	8007fde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fdc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fe6:	d12a      	bne.n	800803e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff0:	d012      	beq.n	8008018 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2180      	movs	r1, #128	; 0x80
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f7ff ff49 	bl	8007e94 <SPI_WaitFlagStateUntilTimeout>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d02d      	beq.n	8008064 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800c:	f043 0220 	orr.w	r2, r3, #32
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e026      	b.n	8008066 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2200      	movs	r2, #0
 8008020:	2101      	movs	r1, #1
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff ff36 	bl	8007e94 <SPI_WaitFlagStateUntilTimeout>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d01a      	beq.n	8008064 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008032:	f043 0220 	orr.w	r2, r3, #32
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e013      	b.n	8008066 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2200      	movs	r2, #0
 8008046:	2101      	movs	r1, #1
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f7ff ff23 	bl	8007e94 <SPI_WaitFlagStateUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008058:	f043 0220 	orr.w	r2, r3, #32
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e000      	b.n	8008066 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800807c:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <SPI_EndRxTxTransaction+0x7c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1b      	ldr	r2, [pc, #108]	; (80080f0 <SPI_EndRxTxTransaction+0x80>)
 8008082:	fba2 2303 	umull	r2, r3, r2, r3
 8008086:	0d5b      	lsrs	r3, r3, #21
 8008088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800808c:	fb02 f303 	mul.w	r3, r2, r3
 8008090:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800809a:	d112      	bne.n	80080c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2200      	movs	r2, #0
 80080a4:	2180      	movs	r1, #128	; 0x80
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff fef4 	bl	8007e94 <SPI_WaitFlagStateUntilTimeout>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d016      	beq.n	80080e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b6:	f043 0220 	orr.w	r2, r3, #32
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e00f      	b.n	80080e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d8:	2b80      	cmp	r3, #128	; 0x80
 80080da:	d0f2      	beq.n	80080c2 <SPI_EndRxTxTransaction+0x52>
 80080dc:	e000      	b.n	80080e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80080de:	bf00      	nop
  }

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	2000000c 	.word	0x2000000c
 80080f0:	165e9f81 	.word	0x165e9f81

080080f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e041      	b.n	800818a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7f9 ffcc 	bl	80020b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3304      	adds	r3, #4
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f000 fbd6 	bl	80088e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d001      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e04e      	b.n	800824a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0201 	orr.w	r2, r2, #1
 80081c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a23      	ldr	r2, [pc, #140]	; (8008258 <HAL_TIM_Base_Start_IT+0xc4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d022      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0x80>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d6:	d01d      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0x80>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1f      	ldr	r2, [pc, #124]	; (800825c <HAL_TIM_Base_Start_IT+0xc8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d018      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0x80>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a1e      	ldr	r2, [pc, #120]	; (8008260 <HAL_TIM_Base_Start_IT+0xcc>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d013      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0x80>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1c      	ldr	r2, [pc, #112]	; (8008264 <HAL_TIM_Base_Start_IT+0xd0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00e      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0x80>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1b      	ldr	r2, [pc, #108]	; (8008268 <HAL_TIM_Base_Start_IT+0xd4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d009      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0x80>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a19      	ldr	r2, [pc, #100]	; (800826c <HAL_TIM_Base_Start_IT+0xd8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d004      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0x80>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a18      	ldr	r2, [pc, #96]	; (8008270 <HAL_TIM_Base_Start_IT+0xdc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d111      	bne.n	8008238 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f003 0307 	and.w	r3, r3, #7
 800821e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b06      	cmp	r3, #6
 8008224:	d010      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f042 0201 	orr.w	r2, r2, #1
 8008234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008236:	e007      	b.n	8008248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	40010000 	.word	0x40010000
 800825c:	40000400 	.word	0x40000400
 8008260:	40000800 	.word	0x40000800
 8008264:	40000c00 	.word	0x40000c00
 8008268:	40010400 	.word	0x40010400
 800826c:	40014000 	.word	0x40014000
 8008270:	40001800 	.word	0x40001800

08008274 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0201 	bic.w	r2, r2, #1
 800828a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6a1a      	ldr	r2, [r3, #32]
 8008292:	f241 1311 	movw	r3, #4369	; 0x1111
 8008296:	4013      	ands	r3, r2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10f      	bne.n	80082bc <HAL_TIM_Base_Stop_IT+0x48>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6a1a      	ldr	r2, [r3, #32]
 80082a2:	f240 4344 	movw	r3, #1092	; 0x444
 80082a6:	4013      	ands	r3, r2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d107      	bne.n	80082bc <HAL_TIM_Base_Stop_IT+0x48>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f022 0201 	bic.w	r2, r2, #1
 80082ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e041      	b.n	8008368 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d106      	bne.n	80082fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7f9 feb5 	bl	8002068 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3304      	adds	r3, #4
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f000 fae7 	bl	80088e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d109      	bne.n	8008394 <HAL_TIM_PWM_Start+0x24>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b01      	cmp	r3, #1
 800838a:	bf14      	ite	ne
 800838c:	2301      	movne	r3, #1
 800838e:	2300      	moveq	r3, #0
 8008390:	b2db      	uxtb	r3, r3
 8008392:	e022      	b.n	80083da <HAL_TIM_PWM_Start+0x6a>
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b04      	cmp	r3, #4
 8008398:	d109      	bne.n	80083ae <HAL_TIM_PWM_Start+0x3e>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	bf14      	ite	ne
 80083a6:	2301      	movne	r3, #1
 80083a8:	2300      	moveq	r3, #0
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	e015      	b.n	80083da <HAL_TIM_PWM_Start+0x6a>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d109      	bne.n	80083c8 <HAL_TIM_PWM_Start+0x58>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b01      	cmp	r3, #1
 80083be:	bf14      	ite	ne
 80083c0:	2301      	movne	r3, #1
 80083c2:	2300      	moveq	r3, #0
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	e008      	b.n	80083da <HAL_TIM_PWM_Start+0x6a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	bf14      	ite	ne
 80083d4:	2301      	movne	r3, #1
 80083d6:	2300      	moveq	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e07c      	b.n	80084dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <HAL_TIM_PWM_Start+0x82>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083f0:	e013      	b.n	800841a <HAL_TIM_PWM_Start+0xaa>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d104      	bne.n	8008402 <HAL_TIM_PWM_Start+0x92>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008400:	e00b      	b.n	800841a <HAL_TIM_PWM_Start+0xaa>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b08      	cmp	r3, #8
 8008406:	d104      	bne.n	8008412 <HAL_TIM_PWM_Start+0xa2>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008410:	e003      	b.n	800841a <HAL_TIM_PWM_Start+0xaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2202      	movs	r2, #2
 8008416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2201      	movs	r2, #1
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fcae 	bl	8008d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a2d      	ldr	r2, [pc, #180]	; (80084e4 <HAL_TIM_PWM_Start+0x174>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d004      	beq.n	800843c <HAL_TIM_PWM_Start+0xcc>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a2c      	ldr	r2, [pc, #176]	; (80084e8 <HAL_TIM_PWM_Start+0x178>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d101      	bne.n	8008440 <HAL_TIM_PWM_Start+0xd0>
 800843c:	2301      	movs	r3, #1
 800843e:	e000      	b.n	8008442 <HAL_TIM_PWM_Start+0xd2>
 8008440:	2300      	movs	r3, #0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a22      	ldr	r2, [pc, #136]	; (80084e4 <HAL_TIM_PWM_Start+0x174>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d022      	beq.n	80084a6 <HAL_TIM_PWM_Start+0x136>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008468:	d01d      	beq.n	80084a6 <HAL_TIM_PWM_Start+0x136>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a1f      	ldr	r2, [pc, #124]	; (80084ec <HAL_TIM_PWM_Start+0x17c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d018      	beq.n	80084a6 <HAL_TIM_PWM_Start+0x136>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a1d      	ldr	r2, [pc, #116]	; (80084f0 <HAL_TIM_PWM_Start+0x180>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d013      	beq.n	80084a6 <HAL_TIM_PWM_Start+0x136>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a1c      	ldr	r2, [pc, #112]	; (80084f4 <HAL_TIM_PWM_Start+0x184>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00e      	beq.n	80084a6 <HAL_TIM_PWM_Start+0x136>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a16      	ldr	r2, [pc, #88]	; (80084e8 <HAL_TIM_PWM_Start+0x178>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d009      	beq.n	80084a6 <HAL_TIM_PWM_Start+0x136>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a18      	ldr	r2, [pc, #96]	; (80084f8 <HAL_TIM_PWM_Start+0x188>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d004      	beq.n	80084a6 <HAL_TIM_PWM_Start+0x136>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a16      	ldr	r2, [pc, #88]	; (80084fc <HAL_TIM_PWM_Start+0x18c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d111      	bne.n	80084ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b06      	cmp	r3, #6
 80084b6:	d010      	beq.n	80084da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0201 	orr.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c8:	e007      	b.n	80084da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f042 0201 	orr.w	r2, r2, #1
 80084d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	40010000 	.word	0x40010000
 80084e8:	40010400 	.word	0x40010400
 80084ec:	40000400 	.word	0x40000400
 80084f0:	40000800 	.word	0x40000800
 80084f4:	40000c00 	.word	0x40000c00
 80084f8:	40014000 	.word	0x40014000
 80084fc:	40001800 	.word	0x40001800

08008500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b02      	cmp	r3, #2
 8008514:	d122      	bne.n	800855c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d11b      	bne.n	800855c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0202 	mvn.w	r2, #2
 800852c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f9b0 	bl	80088a8 <HAL_TIM_IC_CaptureCallback>
 8008548:	e005      	b.n	8008556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f9a2 	bl	8008894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f9b3 	bl	80088bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b04      	cmp	r3, #4
 8008568:	d122      	bne.n	80085b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b04      	cmp	r3, #4
 8008576:	d11b      	bne.n	80085b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0204 	mvn.w	r2, #4
 8008580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f986 	bl	80088a8 <HAL_TIM_IC_CaptureCallback>
 800859c:	e005      	b.n	80085aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f978 	bl	8008894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f989 	bl	80088bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0308 	and.w	r3, r3, #8
 80085ba:	2b08      	cmp	r3, #8
 80085bc:	d122      	bne.n	8008604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d11b      	bne.n	8008604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0208 	mvn.w	r2, #8
 80085d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2204      	movs	r2, #4
 80085da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f95c 	bl	80088a8 <HAL_TIM_IC_CaptureCallback>
 80085f0:	e005      	b.n	80085fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f94e 	bl	8008894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f95f 	bl	80088bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b10      	cmp	r3, #16
 8008610:	d122      	bne.n	8008658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b10      	cmp	r3, #16
 800861e:	d11b      	bne.n	8008658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0210 	mvn.w	r2, #16
 8008628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2208      	movs	r2, #8
 800862e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f932 	bl	80088a8 <HAL_TIM_IC_CaptureCallback>
 8008644:	e005      	b.n	8008652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f924 	bl	8008894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f935 	bl	80088bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b01      	cmp	r3, #1
 8008664:	d10e      	bne.n	8008684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b01      	cmp	r3, #1
 8008672:	d107      	bne.n	8008684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0201 	mvn.w	r2, #1
 800867c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7f9 f810 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868e:	2b80      	cmp	r3, #128	; 0x80
 8008690:	d10e      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869c:	2b80      	cmp	r3, #128	; 0x80
 800869e:	d107      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fc68 	bl	8008f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ba:	2b40      	cmp	r3, #64	; 0x40
 80086bc:	d10e      	bne.n	80086dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d107      	bne.n	80086dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f8fa 	bl	80088d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d10e      	bne.n	8008708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	d107      	bne.n	8008708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f06f 0220 	mvn.w	r2, #32
 8008700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fc32 	bl	8008f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008726:	2b01      	cmp	r3, #1
 8008728:	d101      	bne.n	800872e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800872a:	2302      	movs	r3, #2
 800872c:	e0ae      	b.n	800888c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b0c      	cmp	r3, #12
 800873a:	f200 809f 	bhi.w	800887c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800873e:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	08008779 	.word	0x08008779
 8008748:	0800887d 	.word	0x0800887d
 800874c:	0800887d 	.word	0x0800887d
 8008750:	0800887d 	.word	0x0800887d
 8008754:	080087b9 	.word	0x080087b9
 8008758:	0800887d 	.word	0x0800887d
 800875c:	0800887d 	.word	0x0800887d
 8008760:	0800887d 	.word	0x0800887d
 8008764:	080087fb 	.word	0x080087fb
 8008768:	0800887d 	.word	0x0800887d
 800876c:	0800887d 	.word	0x0800887d
 8008770:	0800887d 	.word	0x0800887d
 8008774:	0800883b 	.word	0x0800883b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 f950 	bl	8008a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0208 	orr.w	r2, r2, #8
 8008792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0204 	bic.w	r2, r2, #4
 80087a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6999      	ldr	r1, [r3, #24]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	619a      	str	r2, [r3, #24]
      break;
 80087b6:	e064      	b.n	8008882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 f9a0 	bl	8008b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699a      	ldr	r2, [r3, #24]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699a      	ldr	r2, [r3, #24]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6999      	ldr	r1, [r3, #24]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	021a      	lsls	r2, r3, #8
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	619a      	str	r2, [r3, #24]
      break;
 80087f8:	e043      	b.n	8008882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 f9f5 	bl	8008bf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69da      	ldr	r2, [r3, #28]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0208 	orr.w	r2, r2, #8
 8008814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0204 	bic.w	r2, r2, #4
 8008824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69d9      	ldr	r1, [r3, #28]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	61da      	str	r2, [r3, #28]
      break;
 8008838:	e023      	b.n	8008882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fa49 	bl	8008cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69da      	ldr	r2, [r3, #28]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69d9      	ldr	r1, [r3, #28]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	021a      	lsls	r2, r3, #8
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	61da      	str	r2, [r3, #28]
      break;
 800887a:	e002      	b.n	8008882 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	75fb      	strb	r3, [r7, #23]
      break;
 8008880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a40      	ldr	r2, [pc, #256]	; (80089f8 <TIM_Base_SetConfig+0x114>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d013      	beq.n	8008924 <TIM_Base_SetConfig+0x40>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008902:	d00f      	beq.n	8008924 <TIM_Base_SetConfig+0x40>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a3d      	ldr	r2, [pc, #244]	; (80089fc <TIM_Base_SetConfig+0x118>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00b      	beq.n	8008924 <TIM_Base_SetConfig+0x40>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a3c      	ldr	r2, [pc, #240]	; (8008a00 <TIM_Base_SetConfig+0x11c>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d007      	beq.n	8008924 <TIM_Base_SetConfig+0x40>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a3b      	ldr	r2, [pc, #236]	; (8008a04 <TIM_Base_SetConfig+0x120>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d003      	beq.n	8008924 <TIM_Base_SetConfig+0x40>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a3a      	ldr	r2, [pc, #232]	; (8008a08 <TIM_Base_SetConfig+0x124>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d108      	bne.n	8008936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	4313      	orrs	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a2f      	ldr	r2, [pc, #188]	; (80089f8 <TIM_Base_SetConfig+0x114>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d02b      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008944:	d027      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a2c      	ldr	r2, [pc, #176]	; (80089fc <TIM_Base_SetConfig+0x118>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d023      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a2b      	ldr	r2, [pc, #172]	; (8008a00 <TIM_Base_SetConfig+0x11c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d01f      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a2a      	ldr	r2, [pc, #168]	; (8008a04 <TIM_Base_SetConfig+0x120>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d01b      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a29      	ldr	r2, [pc, #164]	; (8008a08 <TIM_Base_SetConfig+0x124>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d017      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a28      	ldr	r2, [pc, #160]	; (8008a0c <TIM_Base_SetConfig+0x128>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d013      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a27      	ldr	r2, [pc, #156]	; (8008a10 <TIM_Base_SetConfig+0x12c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d00f      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <TIM_Base_SetConfig+0x130>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d00b      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <TIM_Base_SetConfig+0x134>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d007      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a24      	ldr	r2, [pc, #144]	; (8008a1c <TIM_Base_SetConfig+0x138>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d003      	beq.n	8008996 <TIM_Base_SetConfig+0xb2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a23      	ldr	r2, [pc, #140]	; (8008a20 <TIM_Base_SetConfig+0x13c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d108      	bne.n	80089a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a0a      	ldr	r2, [pc, #40]	; (80089f8 <TIM_Base_SetConfig+0x114>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d003      	beq.n	80089dc <TIM_Base_SetConfig+0xf8>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a0c      	ldr	r2, [pc, #48]	; (8008a08 <TIM_Base_SetConfig+0x124>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d103      	bne.n	80089e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	615a      	str	r2, [r3, #20]
}
 80089ea:	bf00      	nop
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	40010000 	.word	0x40010000
 80089fc:	40000400 	.word	0x40000400
 8008a00:	40000800 	.word	0x40000800
 8008a04:	40000c00 	.word	0x40000c00
 8008a08:	40010400 	.word	0x40010400
 8008a0c:	40014000 	.word	0x40014000
 8008a10:	40014400 	.word	0x40014400
 8008a14:	40014800 	.word	0x40014800
 8008a18:	40001800 	.word	0x40001800
 8008a1c:	40001c00 	.word	0x40001c00
 8008a20:	40002000 	.word	0x40002000

08008a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	f023 0201 	bic.w	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f023 0302 	bic.w	r3, r3, #2
 8008a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a20      	ldr	r2, [pc, #128]	; (8008afc <TIM_OC1_SetConfig+0xd8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d003      	beq.n	8008a88 <TIM_OC1_SetConfig+0x64>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <TIM_OC1_SetConfig+0xdc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d10c      	bne.n	8008aa2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f023 0308 	bic.w	r3, r3, #8
 8008a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f023 0304 	bic.w	r3, r3, #4
 8008aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a15      	ldr	r2, [pc, #84]	; (8008afc <TIM_OC1_SetConfig+0xd8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d003      	beq.n	8008ab2 <TIM_OC1_SetConfig+0x8e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a14      	ldr	r2, [pc, #80]	; (8008b00 <TIM_OC1_SetConfig+0xdc>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d111      	bne.n	8008ad6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	621a      	str	r2, [r3, #32]
}
 8008af0:	bf00      	nop
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	40010000 	.word	0x40010000
 8008b00:	40010400 	.word	0x40010400

08008b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	f023 0210 	bic.w	r2, r3, #16
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f023 0320 	bic.w	r3, r3, #32
 8008b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a22      	ldr	r2, [pc, #136]	; (8008be8 <TIM_OC2_SetConfig+0xe4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d003      	beq.n	8008b6c <TIM_OC2_SetConfig+0x68>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a21      	ldr	r2, [pc, #132]	; (8008bec <TIM_OC2_SetConfig+0xe8>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d10d      	bne.n	8008b88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a17      	ldr	r2, [pc, #92]	; (8008be8 <TIM_OC2_SetConfig+0xe4>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_OC2_SetConfig+0x94>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a16      	ldr	r2, [pc, #88]	; (8008bec <TIM_OC2_SetConfig+0xe8>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d113      	bne.n	8008bc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	621a      	str	r2, [r3, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40010000 	.word	0x40010000
 8008bec:	40010400 	.word	0x40010400

08008bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0303 	bic.w	r3, r3, #3
 8008c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	021b      	lsls	r3, r3, #8
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a21      	ldr	r2, [pc, #132]	; (8008cd0 <TIM_OC3_SetConfig+0xe0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d003      	beq.n	8008c56 <TIM_OC3_SetConfig+0x66>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a20      	ldr	r2, [pc, #128]	; (8008cd4 <TIM_OC3_SetConfig+0xe4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d10d      	bne.n	8008c72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	021b      	lsls	r3, r3, #8
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a16      	ldr	r2, [pc, #88]	; (8008cd0 <TIM_OC3_SetConfig+0xe0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d003      	beq.n	8008c82 <TIM_OC3_SetConfig+0x92>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a15      	ldr	r2, [pc, #84]	; (8008cd4 <TIM_OC3_SetConfig+0xe4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d113      	bne.n	8008caa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	621a      	str	r2, [r3, #32]
}
 8008cc4:	bf00      	nop
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40010400 	.word	0x40010400

08008cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	031b      	lsls	r3, r3, #12
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a12      	ldr	r2, [pc, #72]	; (8008d7c <TIM_OC4_SetConfig+0xa4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d003      	beq.n	8008d40 <TIM_OC4_SetConfig+0x68>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a11      	ldr	r2, [pc, #68]	; (8008d80 <TIM_OC4_SetConfig+0xa8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d109      	bne.n	8008d54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	019b      	lsls	r3, r3, #6
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	621a      	str	r2, [r3, #32]
}
 8008d6e:	bf00      	nop
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	40010000 	.word	0x40010000
 8008d80:	40010400 	.word	0x40010400

08008d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f003 031f 	and.w	r3, r3, #31
 8008d96:	2201      	movs	r2, #1
 8008d98:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6a1a      	ldr	r2, [r3, #32]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	43db      	mvns	r3, r3
 8008da6:	401a      	ands	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6a1a      	ldr	r2, [r3, #32]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f003 031f 	and.w	r3, r3, #31
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	621a      	str	r2, [r3, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
	...

08008dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d101      	bne.n	8008de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e05a      	b.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2202      	movs	r2, #2
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a21      	ldr	r2, [pc, #132]	; (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d022      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e34:	d01d      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a1d      	ldr	r2, [pc, #116]	; (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d018      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a1b      	ldr	r2, [pc, #108]	; (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d013      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a1a      	ldr	r2, [pc, #104]	; (8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d00e      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a18      	ldr	r2, [pc, #96]	; (8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d009      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a17      	ldr	r2, [pc, #92]	; (8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d004      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a15      	ldr	r2, [pc, #84]	; (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d10c      	bne.n	8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	40010000 	.word	0x40010000
 8008eb0:	40000400 	.word	0x40000400
 8008eb4:	40000800 	.word	0x40000800
 8008eb8:	40000c00 	.word	0x40000c00
 8008ebc:	40010400 	.word	0x40010400
 8008ec0:	40014000 	.word	0x40014000
 8008ec4:	40001800 	.word	0x40001800

08008ec8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e03d      	b.n	8008f60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e03f      	b.n	8009026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d106      	bne.n	8008fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7f9 f9a2 	bl	8002304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2224      	movs	r2, #36	; 0x24
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f929 	bl	8009230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	695a      	ldr	r2, [r3, #20]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800900c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2220      	movs	r2, #32
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b08a      	sub	sp, #40	; 0x28
 8009032:	af02      	add	r7, sp, #8
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	603b      	str	r3, [r7, #0]
 800903a:	4613      	mov	r3, r2
 800903c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b20      	cmp	r3, #32
 800904c:	d17c      	bne.n	8009148 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <HAL_UART_Transmit+0x2c>
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e075      	b.n	800914a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <HAL_UART_Transmit+0x3e>
 8009068:	2302      	movs	r3, #2
 800906a:	e06e      	b.n	800914a <HAL_UART_Transmit+0x11c>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2221      	movs	r2, #33	; 0x21
 800907e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009082:	f7f9 f9e7 	bl	8002454 <HAL_GetTick>
 8009086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	88fa      	ldrh	r2, [r7, #6]
 800908c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	88fa      	ldrh	r2, [r7, #6]
 8009092:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800909c:	d108      	bne.n	80090b0 <HAL_UART_Transmit+0x82>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d104      	bne.n	80090b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	61bb      	str	r3, [r7, #24]
 80090ae:	e003      	b.n	80090b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090b4:	2300      	movs	r3, #0
 80090b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80090c0:	e02a      	b.n	8009118 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2200      	movs	r2, #0
 80090ca:	2180      	movs	r1, #128	; 0x80
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f840 	bl	8009152 <UART_WaitOnFlagUntilTimeout>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e036      	b.n	800914a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10b      	bne.n	80090fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	3302      	adds	r3, #2
 80090f6:	61bb      	str	r3, [r7, #24]
 80090f8:	e007      	b.n	800910a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	781a      	ldrb	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	3301      	adds	r3, #1
 8009108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800910e:	b29b      	uxth	r3, r3
 8009110:	3b01      	subs	r3, #1
 8009112:	b29a      	uxth	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1cf      	bne.n	80090c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2200      	movs	r2, #0
 800912a:	2140      	movs	r1, #64	; 0x40
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 f810 	bl	8009152 <UART_WaitOnFlagUntilTimeout>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e006      	b.n	800914a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2220      	movs	r2, #32
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	e000      	b.n	800914a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009148:	2302      	movs	r3, #2
  }
}
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b090      	sub	sp, #64	; 0x40
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	603b      	str	r3, [r7, #0]
 800915e:	4613      	mov	r3, r2
 8009160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009162:	e050      	b.n	8009206 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916a:	d04c      	beq.n	8009206 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800916c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916e:	2b00      	cmp	r3, #0
 8009170:	d007      	beq.n	8009182 <UART_WaitOnFlagUntilTimeout+0x30>
 8009172:	f7f9 f96f 	bl	8002454 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800917e:	429a      	cmp	r2, r3
 8009180:	d241      	bcs.n	8009206 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	330c      	adds	r3, #12
 8009188:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091a2:	637a      	str	r2, [r7, #52]	; 0x34
 80091a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e5      	bne.n	8009182 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3314      	adds	r3, #20
 80091bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	613b      	str	r3, [r7, #16]
   return(result);
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f023 0301 	bic.w	r3, r3, #1
 80091cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3314      	adds	r3, #20
 80091d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091d6:	623a      	str	r2, [r7, #32]
 80091d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	69f9      	ldr	r1, [r7, #28]
 80091dc:	6a3a      	ldr	r2, [r7, #32]
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e5      	bne.n	80091b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e00f      	b.n	8009226 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	4013      	ands	r3, r2
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	429a      	cmp	r2, r3
 8009214:	bf0c      	ite	eq
 8009216:	2301      	moveq	r3, #1
 8009218:	2300      	movne	r3, #0
 800921a:	b2db      	uxtb	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	429a      	cmp	r2, r3
 8009222:	d09f      	beq.n	8009164 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3740      	adds	r7, #64	; 0x40
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009234:	b0c0      	sub	sp, #256	; 0x100
 8009236:	af00      	add	r7, sp, #0
 8009238:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800923c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800924c:	68d9      	ldr	r1, [r3, #12]
 800924e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	ea40 0301 	orr.w	r3, r0, r1
 8009258:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800925a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	431a      	orrs	r2, r3
 8009268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	431a      	orrs	r2, r3
 8009270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	4313      	orrs	r3, r2
 8009278:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800927c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009288:	f021 010c 	bic.w	r1, r1, #12
 800928c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009296:	430b      	orrs	r3, r1
 8009298:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800929a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80092a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092aa:	6999      	ldr	r1, [r3, #24]
 80092ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	ea40 0301 	orr.w	r3, r0, r1
 80092b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b8f      	ldr	r3, [pc, #572]	; (80094fc <UART_SetConfig+0x2cc>)
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d005      	beq.n	80092d0 <UART_SetConfig+0xa0>
 80092c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4b8d      	ldr	r3, [pc, #564]	; (8009500 <UART_SetConfig+0x2d0>)
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d104      	bne.n	80092da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092d0:	f7fd fe44 	bl	8006f5c <HAL_RCC_GetPCLK2Freq>
 80092d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80092d8:	e003      	b.n	80092e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092da:	f7fd fe2b 	bl	8006f34 <HAL_RCC_GetPCLK1Freq>
 80092de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ec:	f040 810c 	bne.w	8009508 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80092fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009302:	4622      	mov	r2, r4
 8009304:	462b      	mov	r3, r5
 8009306:	1891      	adds	r1, r2, r2
 8009308:	65b9      	str	r1, [r7, #88]	; 0x58
 800930a:	415b      	adcs	r3, r3
 800930c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800930e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009312:	4621      	mov	r1, r4
 8009314:	eb12 0801 	adds.w	r8, r2, r1
 8009318:	4629      	mov	r1, r5
 800931a:	eb43 0901 	adc.w	r9, r3, r1
 800931e:	f04f 0200 	mov.w	r2, #0
 8009322:	f04f 0300 	mov.w	r3, #0
 8009326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800932a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800932e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009332:	4690      	mov	r8, r2
 8009334:	4699      	mov	r9, r3
 8009336:	4623      	mov	r3, r4
 8009338:	eb18 0303 	adds.w	r3, r8, r3
 800933c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009340:	462b      	mov	r3, r5
 8009342:	eb49 0303 	adc.w	r3, r9, r3
 8009346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800934a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009356:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800935a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800935e:	460b      	mov	r3, r1
 8009360:	18db      	adds	r3, r3, r3
 8009362:	653b      	str	r3, [r7, #80]	; 0x50
 8009364:	4613      	mov	r3, r2
 8009366:	eb42 0303 	adc.w	r3, r2, r3
 800936a:	657b      	str	r3, [r7, #84]	; 0x54
 800936c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009370:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009374:	f7f6 ff94 	bl	80002a0 <__aeabi_uldivmod>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4b61      	ldr	r3, [pc, #388]	; (8009504 <UART_SetConfig+0x2d4>)
 800937e:	fba3 2302 	umull	r2, r3, r3, r2
 8009382:	095b      	lsrs	r3, r3, #5
 8009384:	011c      	lsls	r4, r3, #4
 8009386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800938a:	2200      	movs	r2, #0
 800938c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009390:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009394:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009398:	4642      	mov	r2, r8
 800939a:	464b      	mov	r3, r9
 800939c:	1891      	adds	r1, r2, r2
 800939e:	64b9      	str	r1, [r7, #72]	; 0x48
 80093a0:	415b      	adcs	r3, r3
 80093a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80093a8:	4641      	mov	r1, r8
 80093aa:	eb12 0a01 	adds.w	sl, r2, r1
 80093ae:	4649      	mov	r1, r9
 80093b0:	eb43 0b01 	adc.w	fp, r3, r1
 80093b4:	f04f 0200 	mov.w	r2, #0
 80093b8:	f04f 0300 	mov.w	r3, #0
 80093bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80093c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80093c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093c8:	4692      	mov	sl, r2
 80093ca:	469b      	mov	fp, r3
 80093cc:	4643      	mov	r3, r8
 80093ce:	eb1a 0303 	adds.w	r3, sl, r3
 80093d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093d6:	464b      	mov	r3, r9
 80093d8:	eb4b 0303 	adc.w	r3, fp, r3
 80093dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80093f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093f4:	460b      	mov	r3, r1
 80093f6:	18db      	adds	r3, r3, r3
 80093f8:	643b      	str	r3, [r7, #64]	; 0x40
 80093fa:	4613      	mov	r3, r2
 80093fc:	eb42 0303 	adc.w	r3, r2, r3
 8009400:	647b      	str	r3, [r7, #68]	; 0x44
 8009402:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009406:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800940a:	f7f6 ff49 	bl	80002a0 <__aeabi_uldivmod>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4611      	mov	r1, r2
 8009414:	4b3b      	ldr	r3, [pc, #236]	; (8009504 <UART_SetConfig+0x2d4>)
 8009416:	fba3 2301 	umull	r2, r3, r3, r1
 800941a:	095b      	lsrs	r3, r3, #5
 800941c:	2264      	movs	r2, #100	; 0x64
 800941e:	fb02 f303 	mul.w	r3, r2, r3
 8009422:	1acb      	subs	r3, r1, r3
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800942a:	4b36      	ldr	r3, [pc, #216]	; (8009504 <UART_SetConfig+0x2d4>)
 800942c:	fba3 2302 	umull	r2, r3, r3, r2
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	005b      	lsls	r3, r3, #1
 8009434:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009438:	441c      	add	r4, r3
 800943a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800943e:	2200      	movs	r2, #0
 8009440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009444:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009448:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	1891      	adds	r1, r2, r2
 8009452:	63b9      	str	r1, [r7, #56]	; 0x38
 8009454:	415b      	adcs	r3, r3
 8009456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800945c:	4641      	mov	r1, r8
 800945e:	1851      	adds	r1, r2, r1
 8009460:	6339      	str	r1, [r7, #48]	; 0x30
 8009462:	4649      	mov	r1, r9
 8009464:	414b      	adcs	r3, r1
 8009466:	637b      	str	r3, [r7, #52]	; 0x34
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	f04f 0300 	mov.w	r3, #0
 8009470:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009474:	4659      	mov	r1, fp
 8009476:	00cb      	lsls	r3, r1, #3
 8009478:	4651      	mov	r1, sl
 800947a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800947e:	4651      	mov	r1, sl
 8009480:	00ca      	lsls	r2, r1, #3
 8009482:	4610      	mov	r0, r2
 8009484:	4619      	mov	r1, r3
 8009486:	4603      	mov	r3, r0
 8009488:	4642      	mov	r2, r8
 800948a:	189b      	adds	r3, r3, r2
 800948c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009490:	464b      	mov	r3, r9
 8009492:	460a      	mov	r2, r1
 8009494:	eb42 0303 	adc.w	r3, r2, r3
 8009498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800949c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80094a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80094ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80094b0:	460b      	mov	r3, r1
 80094b2:	18db      	adds	r3, r3, r3
 80094b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80094b6:	4613      	mov	r3, r2
 80094b8:	eb42 0303 	adc.w	r3, r2, r3
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80094c6:	f7f6 feeb 	bl	80002a0 <__aeabi_uldivmod>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <UART_SetConfig+0x2d4>)
 80094d0:	fba3 1302 	umull	r1, r3, r3, r2
 80094d4:	095b      	lsrs	r3, r3, #5
 80094d6:	2164      	movs	r1, #100	; 0x64
 80094d8:	fb01 f303 	mul.w	r3, r1, r3
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	3332      	adds	r3, #50	; 0x32
 80094e2:	4a08      	ldr	r2, [pc, #32]	; (8009504 <UART_SetConfig+0x2d4>)
 80094e4:	fba2 2303 	umull	r2, r3, r2, r3
 80094e8:	095b      	lsrs	r3, r3, #5
 80094ea:	f003 0207 	and.w	r2, r3, #7
 80094ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4422      	add	r2, r4
 80094f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094f8:	e105      	b.n	8009706 <UART_SetConfig+0x4d6>
 80094fa:	bf00      	nop
 80094fc:	40011000 	.word	0x40011000
 8009500:	40011400 	.word	0x40011400
 8009504:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800950c:	2200      	movs	r2, #0
 800950e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009512:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009516:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800951a:	4642      	mov	r2, r8
 800951c:	464b      	mov	r3, r9
 800951e:	1891      	adds	r1, r2, r2
 8009520:	6239      	str	r1, [r7, #32]
 8009522:	415b      	adcs	r3, r3
 8009524:	627b      	str	r3, [r7, #36]	; 0x24
 8009526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800952a:	4641      	mov	r1, r8
 800952c:	1854      	adds	r4, r2, r1
 800952e:	4649      	mov	r1, r9
 8009530:	eb43 0501 	adc.w	r5, r3, r1
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	00eb      	lsls	r3, r5, #3
 800953e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009542:	00e2      	lsls	r2, r4, #3
 8009544:	4614      	mov	r4, r2
 8009546:	461d      	mov	r5, r3
 8009548:	4643      	mov	r3, r8
 800954a:	18e3      	adds	r3, r4, r3
 800954c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009550:	464b      	mov	r3, r9
 8009552:	eb45 0303 	adc.w	r3, r5, r3
 8009556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800955a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009566:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009576:	4629      	mov	r1, r5
 8009578:	008b      	lsls	r3, r1, #2
 800957a:	4621      	mov	r1, r4
 800957c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009580:	4621      	mov	r1, r4
 8009582:	008a      	lsls	r2, r1, #2
 8009584:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009588:	f7f6 fe8a 	bl	80002a0 <__aeabi_uldivmod>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4b60      	ldr	r3, [pc, #384]	; (8009714 <UART_SetConfig+0x4e4>)
 8009592:	fba3 2302 	umull	r2, r3, r3, r2
 8009596:	095b      	lsrs	r3, r3, #5
 8009598:	011c      	lsls	r4, r3, #4
 800959a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80095a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	1891      	adds	r1, r2, r2
 80095b2:	61b9      	str	r1, [r7, #24]
 80095b4:	415b      	adcs	r3, r3
 80095b6:	61fb      	str	r3, [r7, #28]
 80095b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095bc:	4641      	mov	r1, r8
 80095be:	1851      	adds	r1, r2, r1
 80095c0:	6139      	str	r1, [r7, #16]
 80095c2:	4649      	mov	r1, r9
 80095c4:	414b      	adcs	r3, r1
 80095c6:	617b      	str	r3, [r7, #20]
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095d4:	4659      	mov	r1, fp
 80095d6:	00cb      	lsls	r3, r1, #3
 80095d8:	4651      	mov	r1, sl
 80095da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095de:	4651      	mov	r1, sl
 80095e0:	00ca      	lsls	r2, r1, #3
 80095e2:	4610      	mov	r0, r2
 80095e4:	4619      	mov	r1, r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	4642      	mov	r2, r8
 80095ea:	189b      	adds	r3, r3, r2
 80095ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095f0:	464b      	mov	r3, r9
 80095f2:	460a      	mov	r2, r1
 80095f4:	eb42 0303 	adc.w	r3, r2, r3
 80095f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	67bb      	str	r3, [r7, #120]	; 0x78
 8009606:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009608:	f04f 0200 	mov.w	r2, #0
 800960c:	f04f 0300 	mov.w	r3, #0
 8009610:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009614:	4649      	mov	r1, r9
 8009616:	008b      	lsls	r3, r1, #2
 8009618:	4641      	mov	r1, r8
 800961a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800961e:	4641      	mov	r1, r8
 8009620:	008a      	lsls	r2, r1, #2
 8009622:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009626:	f7f6 fe3b 	bl	80002a0 <__aeabi_uldivmod>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4b39      	ldr	r3, [pc, #228]	; (8009714 <UART_SetConfig+0x4e4>)
 8009630:	fba3 1302 	umull	r1, r3, r3, r2
 8009634:	095b      	lsrs	r3, r3, #5
 8009636:	2164      	movs	r1, #100	; 0x64
 8009638:	fb01 f303 	mul.w	r3, r1, r3
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	3332      	adds	r3, #50	; 0x32
 8009642:	4a34      	ldr	r2, [pc, #208]	; (8009714 <UART_SetConfig+0x4e4>)
 8009644:	fba2 2303 	umull	r2, r3, r2, r3
 8009648:	095b      	lsrs	r3, r3, #5
 800964a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800964e:	441c      	add	r4, r3
 8009650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009654:	2200      	movs	r2, #0
 8009656:	673b      	str	r3, [r7, #112]	; 0x70
 8009658:	677a      	str	r2, [r7, #116]	; 0x74
 800965a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800965e:	4642      	mov	r2, r8
 8009660:	464b      	mov	r3, r9
 8009662:	1891      	adds	r1, r2, r2
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	415b      	adcs	r3, r3
 8009668:	60fb      	str	r3, [r7, #12]
 800966a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800966e:	4641      	mov	r1, r8
 8009670:	1851      	adds	r1, r2, r1
 8009672:	6039      	str	r1, [r7, #0]
 8009674:	4649      	mov	r1, r9
 8009676:	414b      	adcs	r3, r1
 8009678:	607b      	str	r3, [r7, #4]
 800967a:	f04f 0200 	mov.w	r2, #0
 800967e:	f04f 0300 	mov.w	r3, #0
 8009682:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009686:	4659      	mov	r1, fp
 8009688:	00cb      	lsls	r3, r1, #3
 800968a:	4651      	mov	r1, sl
 800968c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009690:	4651      	mov	r1, sl
 8009692:	00ca      	lsls	r2, r1, #3
 8009694:	4610      	mov	r0, r2
 8009696:	4619      	mov	r1, r3
 8009698:	4603      	mov	r3, r0
 800969a:	4642      	mov	r2, r8
 800969c:	189b      	adds	r3, r3, r2
 800969e:	66bb      	str	r3, [r7, #104]	; 0x68
 80096a0:	464b      	mov	r3, r9
 80096a2:	460a      	mov	r2, r1
 80096a4:	eb42 0303 	adc.w	r3, r2, r3
 80096a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	663b      	str	r3, [r7, #96]	; 0x60
 80096b4:	667a      	str	r2, [r7, #100]	; 0x64
 80096b6:	f04f 0200 	mov.w	r2, #0
 80096ba:	f04f 0300 	mov.w	r3, #0
 80096be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80096c2:	4649      	mov	r1, r9
 80096c4:	008b      	lsls	r3, r1, #2
 80096c6:	4641      	mov	r1, r8
 80096c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096cc:	4641      	mov	r1, r8
 80096ce:	008a      	lsls	r2, r1, #2
 80096d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80096d4:	f7f6 fde4 	bl	80002a0 <__aeabi_uldivmod>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <UART_SetConfig+0x4e4>)
 80096de:	fba3 1302 	umull	r1, r3, r3, r2
 80096e2:	095b      	lsrs	r3, r3, #5
 80096e4:	2164      	movs	r1, #100	; 0x64
 80096e6:	fb01 f303 	mul.w	r3, r1, r3
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	011b      	lsls	r3, r3, #4
 80096ee:	3332      	adds	r3, #50	; 0x32
 80096f0:	4a08      	ldr	r2, [pc, #32]	; (8009714 <UART_SetConfig+0x4e4>)
 80096f2:	fba2 2303 	umull	r2, r3, r2, r3
 80096f6:	095b      	lsrs	r3, r3, #5
 80096f8:	f003 020f 	and.w	r2, r3, #15
 80096fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4422      	add	r2, r4
 8009704:	609a      	str	r2, [r3, #8]
}
 8009706:	bf00      	nop
 8009708:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800970c:	46bd      	mov	sp, r7
 800970e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009712:	bf00      	nop
 8009714:	51eb851f 	.word	0x51eb851f

08009718 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009718:	b084      	sub	sp, #16
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	f107 001c 	add.w	r0, r7, #28
 8009726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	2b01      	cmp	r3, #1
 800972e:	d122      	bne.n	8009776 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800975a:	2b01      	cmp	r3, #1
 800975c:	d105      	bne.n	800976a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 fbee 	bl	800af4c <USB_CoreReset>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]
 8009774:	e01a      	b.n	80097ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 fbe2 	bl	800af4c <USB_CoreReset>
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800978c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800978e:	2b00      	cmp	r3, #0
 8009790:	d106      	bne.n	80097a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	639a      	str	r2, [r3, #56]	; 0x38
 800979e:	e005      	b.n	80097ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d10b      	bne.n	80097ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f043 0206 	orr.w	r2, r3, #6
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f043 0220 	orr.w	r2, r3, #32
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097d6:	b004      	add	sp, #16
 80097d8:	4770      	bx	lr
	...

080097dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	4613      	mov	r3, r2
 80097e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d165      	bne.n	80098bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4a41      	ldr	r2, [pc, #260]	; (80098f8 <USB_SetTurnaroundTime+0x11c>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d906      	bls.n	8009806 <USB_SetTurnaroundTime+0x2a>
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4a40      	ldr	r2, [pc, #256]	; (80098fc <USB_SetTurnaroundTime+0x120>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d202      	bcs.n	8009806 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009800:	230f      	movs	r3, #15
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	e062      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	4a3c      	ldr	r2, [pc, #240]	; (80098fc <USB_SetTurnaroundTime+0x120>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d306      	bcc.n	800981c <USB_SetTurnaroundTime+0x40>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4a3b      	ldr	r2, [pc, #236]	; (8009900 <USB_SetTurnaroundTime+0x124>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d202      	bcs.n	800981c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009816:	230e      	movs	r3, #14
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	e057      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	4a38      	ldr	r2, [pc, #224]	; (8009900 <USB_SetTurnaroundTime+0x124>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d306      	bcc.n	8009832 <USB_SetTurnaroundTime+0x56>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4a37      	ldr	r2, [pc, #220]	; (8009904 <USB_SetTurnaroundTime+0x128>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d202      	bcs.n	8009832 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800982c:	230d      	movs	r3, #13
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e04c      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	4a33      	ldr	r2, [pc, #204]	; (8009904 <USB_SetTurnaroundTime+0x128>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d306      	bcc.n	8009848 <USB_SetTurnaroundTime+0x6c>
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	4a32      	ldr	r2, [pc, #200]	; (8009908 <USB_SetTurnaroundTime+0x12c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d802      	bhi.n	8009848 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009842:	230c      	movs	r3, #12
 8009844:	617b      	str	r3, [r7, #20]
 8009846:	e041      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	4a2f      	ldr	r2, [pc, #188]	; (8009908 <USB_SetTurnaroundTime+0x12c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d906      	bls.n	800985e <USB_SetTurnaroundTime+0x82>
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	4a2e      	ldr	r2, [pc, #184]	; (800990c <USB_SetTurnaroundTime+0x130>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d802      	bhi.n	800985e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009858:	230b      	movs	r3, #11
 800985a:	617b      	str	r3, [r7, #20]
 800985c:	e036      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	4a2a      	ldr	r2, [pc, #168]	; (800990c <USB_SetTurnaroundTime+0x130>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d906      	bls.n	8009874 <USB_SetTurnaroundTime+0x98>
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	4a29      	ldr	r2, [pc, #164]	; (8009910 <USB_SetTurnaroundTime+0x134>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d802      	bhi.n	8009874 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800986e:	230a      	movs	r3, #10
 8009870:	617b      	str	r3, [r7, #20]
 8009872:	e02b      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4a26      	ldr	r2, [pc, #152]	; (8009910 <USB_SetTurnaroundTime+0x134>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d906      	bls.n	800988a <USB_SetTurnaroundTime+0xae>
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4a25      	ldr	r2, [pc, #148]	; (8009914 <USB_SetTurnaroundTime+0x138>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d202      	bcs.n	800988a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009884:	2309      	movs	r3, #9
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e020      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	4a21      	ldr	r2, [pc, #132]	; (8009914 <USB_SetTurnaroundTime+0x138>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d306      	bcc.n	80098a0 <USB_SetTurnaroundTime+0xc4>
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	4a20      	ldr	r2, [pc, #128]	; (8009918 <USB_SetTurnaroundTime+0x13c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d802      	bhi.n	80098a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800989a:	2308      	movs	r3, #8
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	e015      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4a1d      	ldr	r2, [pc, #116]	; (8009918 <USB_SetTurnaroundTime+0x13c>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d906      	bls.n	80098b6 <USB_SetTurnaroundTime+0xda>
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	4a1c      	ldr	r2, [pc, #112]	; (800991c <USB_SetTurnaroundTime+0x140>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d202      	bcs.n	80098b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80098b0:	2307      	movs	r3, #7
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	e00a      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80098b6:	2306      	movs	r3, #6
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e007      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80098bc:	79fb      	ldrb	r3, [r7, #7]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80098c2:	2309      	movs	r3, #9
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	e001      	b.n	80098cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80098c8:	2309      	movs	r3, #9
 80098ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	029b      	lsls	r3, r3, #10
 80098e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80098e4:	431a      	orrs	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	371c      	adds	r7, #28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	00d8acbf 	.word	0x00d8acbf
 80098fc:	00e4e1c0 	.word	0x00e4e1c0
 8009900:	00f42400 	.word	0x00f42400
 8009904:	01067380 	.word	0x01067380
 8009908:	011a499f 	.word	0x011a499f
 800990c:	01312cff 	.word	0x01312cff
 8009910:	014ca43f 	.word	0x014ca43f
 8009914:	016e3600 	.word	0x016e3600
 8009918:	01a6ab1f 	.word	0x01a6ab1f
 800991c:	01e84800 	.word	0x01e84800

08009920 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f043 0201 	orr.w	r2, r3, #1
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f023 0201 	bic.w	r2, r3, #1
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d115      	bne.n	80099b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009992:	2001      	movs	r0, #1
 8009994:	f7f8 fd6a 	bl	800246c <HAL_Delay>
      ms++;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3301      	adds	r3, #1
 800999c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 fa45 	bl	800ae2e <USB_GetMode>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d01e      	beq.n	80099e8 <USB_SetCurrentMode+0x84>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b31      	cmp	r3, #49	; 0x31
 80099ae:	d9f0      	bls.n	8009992 <USB_SetCurrentMode+0x2e>
 80099b0:	e01a      	b.n	80099e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d115      	bne.n	80099e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099c4:	2001      	movs	r0, #1
 80099c6:	f7f8 fd51 	bl	800246c <HAL_Delay>
      ms++;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3301      	adds	r3, #1
 80099ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 fa2c 	bl	800ae2e <USB_GetMode>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <USB_SetCurrentMode+0x84>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b31      	cmp	r3, #49	; 0x31
 80099e0:	d9f0      	bls.n	80099c4 <USB_SetCurrentMode+0x60>
 80099e2:	e001      	b.n	80099e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e005      	b.n	80099f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b32      	cmp	r3, #50	; 0x32
 80099ec:	d101      	bne.n	80099f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e000      	b.n	80099f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099fc:	b084      	sub	sp, #16
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b086      	sub	sp, #24
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a16:	2300      	movs	r3, #0
 8009a18:	613b      	str	r3, [r7, #16]
 8009a1a:	e009      	b.n	8009a30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	3340      	adds	r3, #64	; 0x40
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	2200      	movs	r2, #0
 8009a28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2b0e      	cmp	r3, #14
 8009a34:	d9f2      	bls.n	8009a1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d11c      	bne.n	8009a76 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a4a:	f043 0302 	orr.w	r3, r3, #2
 8009a4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	639a      	str	r2, [r3, #56]	; 0x38
 8009a74:	e00b      	b.n	8009a8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a94:	461a      	mov	r2, r3
 8009a96:	2300      	movs	r3, #0
 8009a98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	680b      	ldr	r3, [r1, #0]
 8009aac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d10c      	bne.n	8009ace <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d104      	bne.n	8009ac4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009aba:	2100      	movs	r1, #0
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f965 	bl	8009d8c <USB_SetDevSpeed>
 8009ac2:	e008      	b.n	8009ad6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f960 	bl	8009d8c <USB_SetDevSpeed>
 8009acc:	e003      	b.n	8009ad6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009ace:	2103      	movs	r1, #3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f95b 	bl	8009d8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ad6:	2110      	movs	r1, #16
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f8f3 	bl	8009cc4 <USB_FlushTxFifo>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f91f 	bl	8009d2c <USB_FlushRxFifo>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009afe:	461a      	mov	r2, r3
 8009b00:	2300      	movs	r3, #0
 8009b02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b16:	461a      	mov	r2, r3
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	613b      	str	r3, [r7, #16]
 8009b20:	e043      	b.n	8009baa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b38:	d118      	bne.n	8009b6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10a      	bne.n	8009b56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	e013      	b.n	8009b7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b62:	461a      	mov	r2, r3
 8009b64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	e008      	b.n	8009b7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b78:	461a      	mov	r2, r3
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	015a      	lsls	r2, r3, #5
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ba2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	613b      	str	r3, [r7, #16]
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d3b7      	bcc.n	8009b22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	613b      	str	r3, [r7, #16]
 8009bb6:	e043      	b.n	8009c40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bce:	d118      	bne.n	8009c02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10a      	bne.n	8009bec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be2:	461a      	mov	r2, r3
 8009be4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009be8:	6013      	str	r3, [r2, #0]
 8009bea:	e013      	b.n	8009c14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	e008      	b.n	8009c14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0e:	461a      	mov	r2, r3
 8009c10:	2300      	movs	r3, #0
 8009c12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c20:	461a      	mov	r2, r3
 8009c22:	2300      	movs	r3, #0
 8009c24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c32:	461a      	mov	r2, r3
 8009c34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	613b      	str	r3, [r7, #16]
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d3b7      	bcc.n	8009bb8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009c68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d105      	bne.n	8009c7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	f043 0210 	orr.w	r2, r3, #16
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	4b0f      	ldr	r3, [pc, #60]	; (8009cc0 <USB_DevInit+0x2c4>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d005      	beq.n	8009c9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	f043 0208 	orr.w	r2, r3, #8
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d107      	bne.n	8009cb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ca8:	f043 0304 	orr.w	r3, r3, #4
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cbc:	b004      	add	sp, #16
 8009cbe:	4770      	bx	lr
 8009cc0:	803c3800 	.word	0x803c3800

08009cc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4a13      	ldr	r2, [pc, #76]	; (8009d28 <USB_FlushTxFifo+0x64>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d901      	bls.n	8009ce4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e01b      	b.n	8009d1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	daf2      	bge.n	8009cd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	019b      	lsls	r3, r3, #6
 8009cf4:	f043 0220 	orr.w	r2, r3, #32
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	4a08      	ldr	r2, [pc, #32]	; (8009d28 <USB_FlushTxFifo+0x64>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d901      	bls.n	8009d0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e006      	b.n	8009d1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	f003 0320 	and.w	r3, r3, #32
 8009d16:	2b20      	cmp	r3, #32
 8009d18:	d0f0      	beq.n	8009cfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	00030d40 	.word	0x00030d40

08009d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4a11      	ldr	r2, [pc, #68]	; (8009d88 <USB_FlushRxFifo+0x5c>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d901      	bls.n	8009d4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e018      	b.n	8009d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	daf2      	bge.n	8009d38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2210      	movs	r2, #16
 8009d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4a08      	ldr	r2, [pc, #32]	; (8009d88 <USB_FlushRxFifo+0x5c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d901      	bls.n	8009d6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e006      	b.n	8009d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	f003 0310 	and.w	r3, r3, #16
 8009d76:	2b10      	cmp	r3, #16
 8009d78:	d0f0      	beq.n	8009d5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	00030d40 	.word	0x00030d40

08009d8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dac:	4313      	orrs	r3, r2
 8009dae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b087      	sub	sp, #28
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f003 0306 	and.w	r3, r3, #6
 8009dd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d102      	bne.n	8009de4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009dde:	2300      	movs	r3, #0
 8009de0:	75fb      	strb	r3, [r7, #23]
 8009de2:	e00a      	b.n	8009dfa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d002      	beq.n	8009df0 <USB_GetDevSpeed+0x32>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2b06      	cmp	r3, #6
 8009dee:	d102      	bne.n	8009df6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009df0:	2302      	movs	r3, #2
 8009df2:	75fb      	strb	r3, [r7, #23]
 8009df4:	e001      	b.n	8009dfa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009df6:	230f      	movs	r3, #15
 8009df8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	371c      	adds	r7, #28
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	785b      	ldrb	r3, [r3, #1]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d13a      	bne.n	8009e9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2a:	69da      	ldr	r2, [r3, #28]
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	f003 030f 	and.w	r3, r3, #15
 8009e34:	2101      	movs	r1, #1
 8009e36:	fa01 f303 	lsl.w	r3, r1, r3
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	68f9      	ldr	r1, [r7, #12]
 8009e3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e42:	4313      	orrs	r3, r2
 8009e44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d155      	bne.n	8009f08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	791b      	ldrb	r3, [r3, #4]
 8009e76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	059b      	lsls	r3, r3, #22
 8009e7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e80:	4313      	orrs	r3, r2
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	e036      	b.n	8009f08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea0:	69da      	ldr	r2, [r3, #28]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	f003 030f 	and.w	r3, r3, #15
 8009eaa:	2101      	movs	r1, #1
 8009eac:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb0:	041b      	lsls	r3, r3, #16
 8009eb2:	68f9      	ldr	r1, [r7, #12]
 8009eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d11a      	bne.n	8009f08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	791b      	ldrb	r3, [r3, #4]
 8009eec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009eee:	430b      	orrs	r3, r1
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	0151      	lsls	r1, r2, #5
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	440a      	add	r2, r1
 8009efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
	...

08009f18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	785b      	ldrb	r3, [r3, #1]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d161      	bne.n	8009ff8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f4a:	d11f      	bne.n	8009f8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	0151      	lsls	r1, r2, #5
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	440a      	add	r2, r1
 8009f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	0151      	lsls	r1, r2, #5
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	440a      	add	r2, r1
 8009f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	f003 030f 	and.w	r3, r3, #15
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	43db      	mvns	r3, r3
 8009fa6:	68f9      	ldr	r1, [r7, #12]
 8009fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fac:	4013      	ands	r3, r2
 8009fae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	f003 030f 	and.w	r3, r3, #15
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	43db      	mvns	r3, r3
 8009fca:	68f9      	ldr	r1, [r7, #12]
 8009fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	0159      	lsls	r1, r3, #5
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	440b      	add	r3, r1
 8009fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4b35      	ldr	r3, [pc, #212]	; (800a0c8 <USB_DeactivateEndpoint+0x1b0>)
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	600b      	str	r3, [r1, #0]
 8009ff6:	e060      	b.n	800a0ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a00a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a00e:	d11f      	bne.n	800a050 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	0151      	lsls	r1, r2, #5
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	440a      	add	r2, r1
 800a026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a02a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a02e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	0151      	lsls	r1, r2, #5
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	440a      	add	r2, r1
 800a046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a04a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a04e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	f003 030f 	and.w	r3, r3, #15
 800a060:	2101      	movs	r1, #1
 800a062:	fa01 f303 	lsl.w	r3, r1, r3
 800a066:	041b      	lsls	r3, r3, #16
 800a068:	43db      	mvns	r3, r3
 800a06a:	68f9      	ldr	r1, [r7, #12]
 800a06c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a070:	4013      	ands	r3, r2
 800a072:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	f003 030f 	and.w	r3, r3, #15
 800a084:	2101      	movs	r1, #1
 800a086:	fa01 f303 	lsl.w	r3, r1, r3
 800a08a:	041b      	lsls	r3, r3, #16
 800a08c:	43db      	mvns	r3, r3
 800a08e:	68f9      	ldr	r1, [r7, #12]
 800a090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a094:	4013      	ands	r3, r2
 800a096:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	0159      	lsls	r1, r3, #5
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	440b      	add	r3, r1
 800a0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <USB_DeactivateEndpoint+0x1b4>)
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	ec337800 	.word	0xec337800
 800a0cc:	eff37800 	.word	0xeff37800

0800a0d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b08a      	sub	sp, #40	; 0x28
 800a0d4:	af02      	add	r7, sp, #8
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	f040 815c 	bne.w	800a3aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d132      	bne.n	800a160 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	015a      	lsls	r2, r3, #5
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	4413      	add	r3, r2
 800a102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	69ba      	ldr	r2, [r7, #24]
 800a10a:	0151      	lsls	r1, r2, #5
 800a10c:	69fa      	ldr	r2, [r7, #28]
 800a10e:	440a      	add	r2, r1
 800a110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a114:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a118:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a11c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	0151      	lsls	r1, r2, #5
 800a130:	69fa      	ldr	r2, [r7, #28]
 800a132:	440a      	add	r2, r1
 800a134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a138:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a13c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	69ba      	ldr	r2, [r7, #24]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	440a      	add	r2, r1
 800a154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a158:	0cdb      	lsrs	r3, r3, #19
 800a15a:	04db      	lsls	r3, r3, #19
 800a15c:	6113      	str	r3, [r2, #16]
 800a15e:	e074      	b.n	800a24a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	0151      	lsls	r1, r2, #5
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	440a      	add	r2, r1
 800a176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a17a:	0cdb      	lsrs	r3, r3, #19
 800a17c:	04db      	lsls	r3, r3, #19
 800a17e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	69ba      	ldr	r2, [r7, #24]
 800a190:	0151      	lsls	r1, r2, #5
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	440a      	add	r2, r1
 800a196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a19a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a19e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6999      	ldr	r1, [r3, #24]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	440b      	add	r3, r1
 800a1bc:	1e59      	subs	r1, r3, #1
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1c8:	4b9d      	ldr	r3, [pc, #628]	; (800a440 <USB_EPStartXfer+0x370>)
 800a1ca:	400b      	ands	r3, r1
 800a1cc:	69b9      	ldr	r1, [r7, #24]
 800a1ce:	0148      	lsls	r0, r1, #5
 800a1d0:	69f9      	ldr	r1, [r7, #28]
 800a1d2:	4401      	add	r1, r0
 800a1d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e8:	691a      	ldr	r2, [r3, #16]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1f2:	69b9      	ldr	r1, [r7, #24]
 800a1f4:	0148      	lsls	r0, r1, #5
 800a1f6:	69f9      	ldr	r1, [r7, #28]
 800a1f8:	4401      	add	r1, r0
 800a1fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a1fe:	4313      	orrs	r3, r2
 800a200:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	791b      	ldrb	r3, [r3, #4]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d11f      	bne.n	800a24a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	4413      	add	r3, r2
 800a212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	69ba      	ldr	r2, [r7, #24]
 800a21a:	0151      	lsls	r1, r2, #5
 800a21c:	69fa      	ldr	r2, [r7, #28]
 800a21e:	440a      	add	r2, r1
 800a220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a224:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a228:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	4413      	add	r3, r2
 800a232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	0151      	lsls	r1, r2, #5
 800a23c:	69fa      	ldr	r2, [r7, #28]
 800a23e:	440a      	add	r2, r1
 800a240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a248:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d14b      	bne.n	800a2e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d009      	beq.n	800a26c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a264:	461a      	mov	r2, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	791b      	ldrb	r3, [r3, #4]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d128      	bne.n	800a2c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a280:	2b00      	cmp	r3, #0
 800a282:	d110      	bne.n	800a2a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	0151      	lsls	r1, r2, #5
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	440a      	add	r2, r1
 800a29a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a29e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	e00f      	b.n	800a2c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	69fa      	ldr	r2, [r7, #28]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	69fa      	ldr	r2, [r7, #28]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	e133      	b.n	800a550 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	0151      	lsls	r1, r2, #5
 800a2fa:	69fa      	ldr	r2, [r7, #28]
 800a2fc:	440a      	add	r2, r1
 800a2fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a302:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a306:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	791b      	ldrb	r3, [r3, #4]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d015      	beq.n	800a33c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 811b 	beq.w	800a550 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	f003 030f 	and.w	r3, r3, #15
 800a32a:	2101      	movs	r1, #1
 800a32c:	fa01 f303 	lsl.w	r3, r1, r3
 800a330:	69f9      	ldr	r1, [r7, #28]
 800a332:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a336:	4313      	orrs	r3, r2
 800a338:	634b      	str	r3, [r1, #52]	; 0x34
 800a33a:	e109      	b.n	800a550 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d110      	bne.n	800a36e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	4413      	add	r3, r2
 800a354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	69ba      	ldr	r2, [r7, #24]
 800a35c:	0151      	lsls	r1, r2, #5
 800a35e:	69fa      	ldr	r2, [r7, #28]
 800a360:	440a      	add	r2, r1
 800a362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	e00f      	b.n	800a38e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	0151      	lsls	r1, r2, #5
 800a380:	69fa      	ldr	r2, [r7, #28]
 800a382:	440a      	add	r2, r1
 800a384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a38c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	6919      	ldr	r1, [r3, #16]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	781a      	ldrb	r2, [r3, #0]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	b298      	uxth	r0, r3
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 fade 	bl	800a964 <USB_WritePacket>
 800a3a8:	e0d2      	b.n	800a550 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	69ba      	ldr	r2, [r7, #24]
 800a3ba:	0151      	lsls	r1, r2, #5
 800a3bc:	69fa      	ldr	r2, [r7, #28]
 800a3be:	440a      	add	r2, r1
 800a3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c4:	0cdb      	lsrs	r3, r3, #19
 800a3c6:	04db      	lsls	r3, r3, #19
 800a3c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	69ba      	ldr	r2, [r7, #24]
 800a3da:	0151      	lsls	r1, r2, #5
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	440a      	add	r2, r1
 800a3e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d126      	bne.n	800a444 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a402:	691a      	ldr	r2, [r3, #16]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a40c:	69b9      	ldr	r1, [r7, #24]
 800a40e:	0148      	lsls	r0, r1, #5
 800a410:	69f9      	ldr	r1, [r7, #28]
 800a412:	4401      	add	r1, r0
 800a414:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a418:	4313      	orrs	r3, r2
 800a41a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	69ba      	ldr	r2, [r7, #24]
 800a42c:	0151      	lsls	r1, r2, #5
 800a42e:	69fa      	ldr	r2, [r7, #28]
 800a430:	440a      	add	r2, r1
 800a432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a43a:	6113      	str	r3, [r2, #16]
 800a43c:	e03a      	b.n	800a4b4 <USB_EPStartXfer+0x3e4>
 800a43e:	bf00      	nop
 800a440:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	699a      	ldr	r2, [r3, #24]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	4413      	add	r3, r2
 800a44e:	1e5a      	subs	r2, r3, #1
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	fbb2 f3f3 	udiv	r3, r2, r3
 800a458:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	8afa      	ldrh	r2, [r7, #22]
 800a460:	fb03 f202 	mul.w	r2, r3, r2
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a474:	691a      	ldr	r2, [r3, #16]
 800a476:	8afb      	ldrh	r3, [r7, #22]
 800a478:	04d9      	lsls	r1, r3, #19
 800a47a:	4b38      	ldr	r3, [pc, #224]	; (800a55c <USB_EPStartXfer+0x48c>)
 800a47c:	400b      	ands	r3, r1
 800a47e:	69b9      	ldr	r1, [r7, #24]
 800a480:	0148      	lsls	r0, r1, #5
 800a482:	69f9      	ldr	r1, [r7, #28]
 800a484:	4401      	add	r1, r0
 800a486:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a48a:	4313      	orrs	r3, r2
 800a48c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	69db      	ldr	r3, [r3, #28]
 800a4a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4a4:	69b9      	ldr	r1, [r7, #24]
 800a4a6:	0148      	lsls	r0, r1, #5
 800a4a8:	69f9      	ldr	r1, [r7, #28]
 800a4aa:	4401      	add	r1, r0
 800a4ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4b4:	79fb      	ldrb	r3, [r7, #7]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d10d      	bne.n	800a4d6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d009      	beq.n	800a4d6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	6919      	ldr	r1, [r3, #16]
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d2:	460a      	mov	r2, r1
 800a4d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	791b      	ldrb	r3, [r3, #4]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d128      	bne.n	800a530 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d110      	bne.n	800a510 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	0151      	lsls	r1, r2, #5
 800a500:	69fa      	ldr	r2, [r7, #28]
 800a502:	440a      	add	r2, r1
 800a504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a508:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	e00f      	b.n	800a530 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	0151      	lsls	r1, r2, #5
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	440a      	add	r2, r1
 800a526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a52a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a52e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	0151      	lsls	r1, r2, #5
 800a542:	69fa      	ldr	r2, [r7, #28]
 800a544:	440a      	add	r2, r1
 800a546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a54a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a54e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3720      	adds	r7, #32
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	1ff80000 	.word	0x1ff80000

0800a560 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	4613      	mov	r3, r2
 800a56c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	f040 80ce 	bne.w	800a71e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d132      	bne.n	800a5f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	015a      	lsls	r2, r3, #5
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	4413      	add	r3, r2
 800a592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	0151      	lsls	r1, r2, #5
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	440a      	add	r2, r1
 800a5a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	0151      	lsls	r1, r2, #5
 800a5c0:	697a      	ldr	r2, [r7, #20]
 800a5c2:	440a      	add	r2, r1
 800a5c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	0151      	lsls	r1, r2, #5
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	440a      	add	r2, r1
 800a5e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5e8:	0cdb      	lsrs	r3, r3, #19
 800a5ea:	04db      	lsls	r3, r3, #19
 800a5ec:	6113      	str	r3, [r2, #16]
 800a5ee:	e04e      	b.n	800a68e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	015a      	lsls	r2, r3, #5
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	0151      	lsls	r1, r2, #5
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	440a      	add	r2, r1
 800a606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a60a:	0cdb      	lsrs	r3, r3, #19
 800a60c:	04db      	lsls	r3, r3, #19
 800a60e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	4413      	add	r3, r2
 800a618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	0151      	lsls	r1, r2, #5
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	440a      	add	r2, r1
 800a626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a62a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a62e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a632:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	699a      	ldr	r2, [r3, #24]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d903      	bls.n	800a648 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	0151      	lsls	r1, r2, #5
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	440a      	add	r2, r1
 800a65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a674:	691a      	ldr	r2, [r3, #16]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a67e:	6939      	ldr	r1, [r7, #16]
 800a680:	0148      	lsls	r0, r1, #5
 800a682:	6979      	ldr	r1, [r7, #20]
 800a684:	4401      	add	r1, r0
 800a686:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a68a:	4313      	orrs	r3, r2
 800a68c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a68e:	79fb      	ldrb	r3, [r7, #7]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d11e      	bne.n	800a6d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	695b      	ldr	r3, [r3, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d009      	beq.n	800a6b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	0151      	lsls	r1, r2, #5
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	440a      	add	r2, r1
 800a6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	e097      	b.n	800a802 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	0151      	lsls	r1, r2, #5
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	440a      	add	r2, r1
 800a6e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 8083 	beq.w	800a802 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f003 030f 	and.w	r3, r3, #15
 800a70c:	2101      	movs	r1, #1
 800a70e:	fa01 f303 	lsl.w	r3, r1, r3
 800a712:	6979      	ldr	r1, [r7, #20]
 800a714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a718:	4313      	orrs	r3, r2
 800a71a:	634b      	str	r3, [r1, #52]	; 0x34
 800a71c:	e071      	b.n	800a802 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	0151      	lsls	r1, r2, #5
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	440a      	add	r2, r1
 800a734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a738:	0cdb      	lsrs	r3, r3, #19
 800a73a:	04db      	lsls	r3, r3, #19
 800a73c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	0151      	lsls	r1, r2, #5
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	440a      	add	r2, r1
 800a754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a75c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a760:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	68da      	ldr	r2, [r3, #12]
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	4413      	add	r3, r2
 800a782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	0151      	lsls	r1, r2, #5
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	440a      	add	r2, r1
 800a790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a798:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a6:	691a      	ldr	r2, [r3, #16]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7b0:	6939      	ldr	r1, [r7, #16]
 800a7b2:	0148      	lsls	r0, r1, #5
 800a7b4:	6979      	ldr	r1, [r7, #20]
 800a7b6:	4401      	add	r1, r0
 800a7b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d10d      	bne.n	800a7e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d009      	beq.n	800a7e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	6919      	ldr	r1, [r3, #16]
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7de:	460a      	mov	r2, r1
 800a7e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	0151      	lsls	r1, r2, #5
 800a7f4:	697a      	ldr	r2, [r7, #20]
 800a7f6:	440a      	add	r2, r1
 800a7f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a800:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	371c      	adds	r7, #28
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	785b      	ldrb	r3, [r3, #1]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d14a      	bne.n	800a8c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a846:	f040 8086 	bne.w	800a956 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	015a      	lsls	r2, r3, #5
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	4413      	add	r3, r2
 800a854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	7812      	ldrb	r2, [r2, #0]
 800a85e:	0151      	lsls	r1, r2, #5
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	440a      	add	r2, r1
 800a864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a868:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a86c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	7812      	ldrb	r2, [r2, #0]
 800a882:	0151      	lsls	r1, r2, #5
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	440a      	add	r2, r1
 800a888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a88c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a890:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3301      	adds	r3, #1
 800a896:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d902      	bls.n	800a8a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a8a6:	e056      	b.n	800a956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8c0:	d0e7      	beq.n	800a892 <USB_EPStopXfer+0x82>
 800a8c2:	e048      	b.n	800a956 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8dc:	d13b      	bne.n	800a956 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	7812      	ldrb	r2, [r2, #0]
 800a8f2:	0151      	lsls	r1, r2, #5
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	440a      	add	r2, r1
 800a8f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a900:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	7812      	ldrb	r2, [r2, #0]
 800a916:	0151      	lsls	r1, r2, #5
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	440a      	add	r2, r1
 800a91c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a924:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	3301      	adds	r3, #1
 800a92a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a932:	4293      	cmp	r3, r2
 800a934:	d902      	bls.n	800a93c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	75fb      	strb	r3, [r7, #23]
          break;
 800a93a:	e00c      	b.n	800a956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a954:	d0e7      	beq.n	800a926 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a956:	7dfb      	ldrb	r3, [r7, #23]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a964:	b480      	push	{r7}
 800a966:	b089      	sub	sp, #36	; 0x24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	4611      	mov	r1, r2
 800a970:	461a      	mov	r2, r3
 800a972:	460b      	mov	r3, r1
 800a974:	71fb      	strb	r3, [r7, #7]
 800a976:	4613      	mov	r3, r2
 800a978:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a986:	2b00      	cmp	r3, #0
 800a988:	d123      	bne.n	800a9d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a98a:	88bb      	ldrh	r3, [r7, #4]
 800a98c:	3303      	adds	r3, #3
 800a98e:	089b      	lsrs	r3, r3, #2
 800a990:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a992:	2300      	movs	r3, #0
 800a994:	61bb      	str	r3, [r7, #24]
 800a996:	e018      	b.n	800a9ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	031a      	lsls	r2, r3, #12
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	61bb      	str	r3, [r7, #24]
 800a9ca:	69ba      	ldr	r2, [r7, #24]
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d3e2      	bcc.n	800a998 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3724      	adds	r7, #36	; 0x24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b08b      	sub	sp, #44	; 0x2c
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9f6:	88fb      	ldrh	r3, [r7, #6]
 800a9f8:	089b      	lsrs	r3, r3, #2
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9fe:	88fb      	ldrh	r3, [r7, #6]
 800aa00:	f003 0303 	and.w	r3, r3, #3
 800aa04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa06:	2300      	movs	r3, #0
 800aa08:	623b      	str	r3, [r7, #32]
 800aa0a:	e014      	b.n	800aa36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa20:	3301      	adds	r3, #1
 800aa22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	3301      	adds	r3, #1
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	3301      	adds	r3, #1
 800aa34:	623b      	str	r3, [r7, #32]
 800aa36:	6a3a      	ldr	r2, [r7, #32]
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d3e6      	bcc.n	800aa0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa3e:	8bfb      	ldrh	r3, [r7, #30]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d01e      	beq.n	800aa82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa44:	2300      	movs	r3, #0
 800aa46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f107 0310 	add.w	r3, r7, #16
 800aa54:	6812      	ldr	r2, [r2, #0]
 800aa56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	fa22 f303 	lsr.w	r3, r2, r3
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	701a      	strb	r2, [r3, #0]
      i++;
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa72:	3301      	adds	r3, #1
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aa76:	8bfb      	ldrh	r3, [r7, #30]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa7c:	8bfb      	ldrh	r3, [r7, #30]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1ea      	bne.n	800aa58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	372c      	adds	r7, #44	; 0x2c
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	785b      	ldrb	r3, [r3, #1]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d12c      	bne.n	800ab06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	db12      	blt.n	800aae4 <USB_EPSetStall+0x54>
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00f      	beq.n	800aae4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	015a      	lsls	r2, r3, #5
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	4413      	add	r3, r2
 800aacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	0151      	lsls	r1, r2, #5
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	440a      	add	r2, r1
 800aada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aae2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	0151      	lsls	r1, r2, #5
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	440a      	add	r2, r1
 800aafa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aafe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	e02b      	b.n	800ab5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	db12      	blt.n	800ab3e <USB_EPSetStall+0xae>
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00f      	beq.n	800ab3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	015a      	lsls	r2, r3, #5
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4413      	add	r3, r2
 800ab26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	0151      	lsls	r1, r2, #5
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	440a      	add	r2, r1
 800ab34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	015a      	lsls	r2, r3, #5
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	4413      	add	r3, r2
 800ab46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	0151      	lsls	r1, r2, #5
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	440a      	add	r2, r1
 800ab54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	785b      	ldrb	r3, [r3, #1]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d128      	bne.n	800abda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	015a      	lsls	r2, r3, #5
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	4413      	add	r3, r2
 800ab90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	0151      	lsls	r1, r2, #5
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	440a      	add	r2, r1
 800ab9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aba6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	791b      	ldrb	r3, [r3, #4]
 800abac:	2b03      	cmp	r3, #3
 800abae:	d003      	beq.n	800abb8 <USB_EPClearStall+0x4c>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	791b      	ldrb	r3, [r3, #4]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d138      	bne.n	800ac2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	0151      	lsls	r1, r2, #5
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	440a      	add	r2, r1
 800abce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abd6:	6013      	str	r3, [r2, #0]
 800abd8:	e027      	b.n	800ac2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	0151      	lsls	r1, r2, #5
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	440a      	add	r2, r1
 800abf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	791b      	ldrb	r3, [r3, #4]
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d003      	beq.n	800ac0a <USB_EPClearStall+0x9e>
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	791b      	ldrb	r3, [r3, #4]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d10f      	bne.n	800ac2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	015a      	lsls	r2, r3, #5
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	4413      	add	r3, r2
 800ac12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	0151      	lsls	r1, r2, #5
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	440a      	add	r2, r1
 800ac20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	460b      	mov	r3, r1
 800ac42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ac5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	78fb      	ldrb	r3, [r7, #3]
 800ac66:	011b      	lsls	r3, r3, #4
 800ac68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ac6c:	68f9      	ldr	r1, [r7, #12]
 800ac6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac72:	4313      	orrs	r3, r2
 800ac74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac9e:	f023 0303 	bic.w	r3, r3, #3
 800aca2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acb2:	f023 0302 	bic.w	r3, r3, #2
 800acb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b085      	sub	sp, #20
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ace0:	f023 0303 	bic.w	r3, r3, #3
 800ace4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acf4:	f043 0302 	orr.w	r3, r3, #2
 800acf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad20:	68fb      	ldr	r3, [r7, #12]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b085      	sub	sp, #20
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad4a:	69db      	ldr	r3, [r3, #28]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	4013      	ands	r3, r2
 800ad50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	0c1b      	lsrs	r3, r3, #16
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b085      	sub	sp, #20
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad7e:	69db      	ldr	r3, [r3, #28]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	4013      	ands	r3, r2
 800ad84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	b29b      	uxth	r3, r3
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b085      	sub	sp, #20
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	460b      	mov	r3, r1
 800ada0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ada6:	78fb      	ldrb	r3, [r7, #3]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	4013      	ands	r3, r2
 800adc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adc4:	68bb      	ldr	r3, [r7, #8]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800add2:	b480      	push	{r7}
 800add4:	b087      	sub	sp, #28
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	460b      	mov	r3, r1
 800addc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800adf6:	78fb      	ldrb	r3, [r7, #3]
 800adf8:	f003 030f 	and.w	r3, r3, #15
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ae02:	01db      	lsls	r3, r3, #7
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae0c:	78fb      	ldrb	r3, [r7, #3]
 800ae0e:	015a      	lsls	r2, r3, #5
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	4413      	add	r3, r2
 800ae14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae20:	68bb      	ldr	r3, [r7, #8]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	371c      	adds	r7, #28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b083      	sub	sp, #12
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	f003 0301 	and.w	r3, r3, #1
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b085      	sub	sp, #20
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ae68:	f023 0307 	bic.w	r3, r3, #7
 800ae6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b087      	sub	sp, #28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	607a      	str	r2, [r7, #4]
 800ae9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	333c      	adds	r3, #60	; 0x3c
 800aea6:	3304      	adds	r3, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	4a26      	ldr	r2, [pc, #152]	; (800af48 <USB_EP0_OutStart+0xb8>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d90a      	bls.n	800aeca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aec4:	d101      	bne.n	800aeca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	e037      	b.n	800af3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed0:	461a      	mov	r2, r3
 800aed2:	2300      	movs	r3, #0
 800aed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aef8:	f043 0318 	orr.w	r3, r3, #24
 800aefc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800af10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af12:	7afb      	ldrb	r3, [r7, #11]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d10f      	bne.n	800af38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af1e:	461a      	mov	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800af36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	371c      	adds	r7, #28
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	4f54300a 	.word	0x4f54300a

0800af4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af54:	2300      	movs	r3, #0
 800af56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	3301      	adds	r3, #1
 800af5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	4a13      	ldr	r2, [pc, #76]	; (800afb0 <USB_CoreReset+0x64>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d901      	bls.n	800af6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	e01b      	b.n	800afa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	daf2      	bge.n	800af58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af72:	2300      	movs	r3, #0
 800af74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	f043 0201 	orr.w	r2, r3, #1
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3301      	adds	r3, #1
 800af86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4a09      	ldr	r2, [pc, #36]	; (800afb0 <USB_CoreReset+0x64>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d901      	bls.n	800af94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e006      	b.n	800afa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d0f0      	beq.n	800af82 <USB_CoreReset+0x36>

  return HAL_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	00030d40 	.word	0x00030d40

0800afb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	460b      	mov	r3, r1
 800afbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800afc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800afc4:	f004 ffec 	bl	800ffa0 <USBD_static_malloc>
 800afc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d109      	bne.n	800afe4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	32b0      	adds	r2, #176	; 0xb0
 800afda:	2100      	movs	r1, #0
 800afdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800afe0:	2302      	movs	r3, #2
 800afe2:	e0d4      	b.n	800b18e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800afe4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800afe8:	2100      	movs	r1, #0
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f005 f856 	bl	801009c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	32b0      	adds	r2, #176	; 0xb0
 800affa:	68f9      	ldr	r1, [r7, #12]
 800affc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	32b0      	adds	r2, #176	; 0xb0
 800b00a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	7c1b      	ldrb	r3, [r3, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d138      	bne.n	800b08e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b01c:	4b5e      	ldr	r3, [pc, #376]	; (800b198 <USBD_CDC_Init+0x1e4>)
 800b01e:	7819      	ldrb	r1, [r3, #0]
 800b020:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b024:	2202      	movs	r2, #2
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f004 fe97 	bl	800fd5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b02c:	4b5a      	ldr	r3, [pc, #360]	; (800b198 <USBD_CDC_Init+0x1e4>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	f003 020f 	and.w	r2, r3, #15
 800b034:	6879      	ldr	r1, [r7, #4]
 800b036:	4613      	mov	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	440b      	add	r3, r1
 800b040:	3324      	adds	r3, #36	; 0x24
 800b042:	2201      	movs	r2, #1
 800b044:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b046:	4b55      	ldr	r3, [pc, #340]	; (800b19c <USBD_CDC_Init+0x1e8>)
 800b048:	7819      	ldrb	r1, [r3, #0]
 800b04a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b04e:	2202      	movs	r2, #2
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f004 fe82 	bl	800fd5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b056:	4b51      	ldr	r3, [pc, #324]	; (800b19c <USBD_CDC_Init+0x1e8>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	f003 020f 	and.w	r2, r3, #15
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	440b      	add	r3, r1
 800b06a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b06e:	2201      	movs	r2, #1
 800b070:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b072:	4b4b      	ldr	r3, [pc, #300]	; (800b1a0 <USBD_CDC_Init+0x1ec>)
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	f003 020f 	and.w	r2, r3, #15
 800b07a:	6879      	ldr	r1, [r7, #4]
 800b07c:	4613      	mov	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	3326      	adds	r3, #38	; 0x26
 800b088:	2210      	movs	r2, #16
 800b08a:	801a      	strh	r2, [r3, #0]
 800b08c:	e035      	b.n	800b0fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b08e:	4b42      	ldr	r3, [pc, #264]	; (800b198 <USBD_CDC_Init+0x1e4>)
 800b090:	7819      	ldrb	r1, [r3, #0]
 800b092:	2340      	movs	r3, #64	; 0x40
 800b094:	2202      	movs	r2, #2
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f004 fe5f 	bl	800fd5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b09c:	4b3e      	ldr	r3, [pc, #248]	; (800b198 <USBD_CDC_Init+0x1e4>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	f003 020f 	and.w	r2, r3, #15
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	440b      	add	r3, r1
 800b0b0:	3324      	adds	r3, #36	; 0x24
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b0b6:	4b39      	ldr	r3, [pc, #228]	; (800b19c <USBD_CDC_Init+0x1e8>)
 800b0b8:	7819      	ldrb	r1, [r3, #0]
 800b0ba:	2340      	movs	r3, #64	; 0x40
 800b0bc:	2202      	movs	r2, #2
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f004 fe4b 	bl	800fd5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b0c4:	4b35      	ldr	r3, [pc, #212]	; (800b19c <USBD_CDC_Init+0x1e8>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	f003 020f 	and.w	r2, r3, #15
 800b0cc:	6879      	ldr	r1, [r7, #4]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	440b      	add	r3, r1
 800b0d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0dc:	2201      	movs	r2, #1
 800b0de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b0e0:	4b2f      	ldr	r3, [pc, #188]	; (800b1a0 <USBD_CDC_Init+0x1ec>)
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	f003 020f 	and.w	r2, r3, #15
 800b0e8:	6879      	ldr	r1, [r7, #4]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	3326      	adds	r3, #38	; 0x26
 800b0f6:	2210      	movs	r2, #16
 800b0f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b0fa:	4b29      	ldr	r3, [pc, #164]	; (800b1a0 <USBD_CDC_Init+0x1ec>)
 800b0fc:	7819      	ldrb	r1, [r3, #0]
 800b0fe:	2308      	movs	r3, #8
 800b100:	2203      	movs	r2, #3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f004 fe29 	bl	800fd5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b108:	4b25      	ldr	r3, [pc, #148]	; (800b1a0 <USBD_CDC_Init+0x1ec>)
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	f003 020f 	and.w	r2, r3, #15
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	4613      	mov	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	440b      	add	r3, r1
 800b11c:	3324      	adds	r3, #36	; 0x24
 800b11e:	2201      	movs	r2, #1
 800b120:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	33b0      	adds	r3, #176	; 0xb0
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b158:	2302      	movs	r3, #2
 800b15a:	e018      	b.n	800b18e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	7c1b      	ldrb	r3, [r3, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b164:	4b0d      	ldr	r3, [pc, #52]	; (800b19c <USBD_CDC_Init+0x1e8>)
 800b166:	7819      	ldrb	r1, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b16e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f004 fee0 	bl	800ff38 <USBD_LL_PrepareReceive>
 800b178:	e008      	b.n	800b18c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b17a:	4b08      	ldr	r3, [pc, #32]	; (800b19c <USBD_CDC_Init+0x1e8>)
 800b17c:	7819      	ldrb	r1, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b184:	2340      	movs	r3, #64	; 0x40
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f004 fed6 	bl	800ff38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	200000a3 	.word	0x200000a3
 800b19c:	200000a4 	.word	0x200000a4
 800b1a0:	200000a5 	.word	0x200000a5

0800b1a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b1b0:	4b3a      	ldr	r3, [pc, #232]	; (800b29c <USBD_CDC_DeInit+0xf8>)
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f004 fdf5 	bl	800fda6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b1bc:	4b37      	ldr	r3, [pc, #220]	; (800b29c <USBD_CDC_DeInit+0xf8>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	f003 020f 	and.w	r2, r3, #15
 800b1c4:	6879      	ldr	r1, [r7, #4]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	440b      	add	r3, r1
 800b1d0:	3324      	adds	r3, #36	; 0x24
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b1d6:	4b32      	ldr	r3, [pc, #200]	; (800b2a0 <USBD_CDC_DeInit+0xfc>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f004 fde2 	bl	800fda6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b1e2:	4b2f      	ldr	r3, [pc, #188]	; (800b2a0 <USBD_CDC_DeInit+0xfc>)
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	f003 020f 	and.w	r2, r3, #15
 800b1ea:	6879      	ldr	r1, [r7, #4]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	440b      	add	r3, r1
 800b1f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b1fe:	4b29      	ldr	r3, [pc, #164]	; (800b2a4 <USBD_CDC_DeInit+0x100>)
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f004 fdce 	bl	800fda6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b20a:	4b26      	ldr	r3, [pc, #152]	; (800b2a4 <USBD_CDC_DeInit+0x100>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	f003 020f 	and.w	r2, r3, #15
 800b212:	6879      	ldr	r1, [r7, #4]
 800b214:	4613      	mov	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	440b      	add	r3, r1
 800b21e:	3324      	adds	r3, #36	; 0x24
 800b220:	2200      	movs	r2, #0
 800b222:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b224:	4b1f      	ldr	r3, [pc, #124]	; (800b2a4 <USBD_CDC_DeInit+0x100>)
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	f003 020f 	and.w	r2, r3, #15
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	440b      	add	r3, r1
 800b238:	3326      	adds	r3, #38	; 0x26
 800b23a:	2200      	movs	r2, #0
 800b23c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	32b0      	adds	r2, #176	; 0xb0
 800b248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d01f      	beq.n	800b290 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	33b0      	adds	r3, #176	; 0xb0
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	32b0      	adds	r2, #176	; 0xb0
 800b26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b272:	4618      	mov	r0, r3
 800b274:	f004 fea2 	bl	800ffbc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	32b0      	adds	r2, #176	; 0xb0
 800b282:	2100      	movs	r1, #0
 800b284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200000a3 	.word	0x200000a3
 800b2a0:	200000a4 	.word	0x200000a4
 800b2a4:	200000a5 	.word	0x200000a5

0800b2a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	32b0      	adds	r2, #176	; 0xb0
 800b2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e0bf      	b.n	800b458 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d050      	beq.n	800b386 <USBD_CDC_Setup+0xde>
 800b2e4:	2b20      	cmp	r3, #32
 800b2e6:	f040 80af 	bne.w	800b448 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	88db      	ldrh	r3, [r3, #6]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d03a      	beq.n	800b368 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	b25b      	sxtb	r3, r3
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	da1b      	bge.n	800b334 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	33b0      	adds	r3, #176	; 0xb0
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b312:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	88d2      	ldrh	r2, [r2, #6]
 800b318:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	88db      	ldrh	r3, [r3, #6]
 800b31e:	2b07      	cmp	r3, #7
 800b320:	bf28      	it	cs
 800b322:	2307      	movcs	r3, #7
 800b324:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	89fa      	ldrh	r2, [r7, #14]
 800b32a:	4619      	mov	r1, r3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f001 fd43 	bl	800cdb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b332:	e090      	b.n	800b456 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	785a      	ldrb	r2, [r3, #1]
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	88db      	ldrh	r3, [r3, #6]
 800b342:	2b3f      	cmp	r3, #63	; 0x3f
 800b344:	d803      	bhi.n	800b34e <USBD_CDC_Setup+0xa6>
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	88db      	ldrh	r3, [r3, #6]
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	e000      	b.n	800b350 <USBD_CDC_Setup+0xa8>
 800b34e:	2240      	movs	r2, #64	; 0x40
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b356:	6939      	ldr	r1, [r7, #16]
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b35e:	461a      	mov	r2, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 fd55 	bl	800ce10 <USBD_CtlPrepareRx>
      break;
 800b366:	e076      	b.n	800b456 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	33b0      	adds	r3, #176	; 0xb0
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	7850      	ldrb	r0, [r2, #1]
 800b37e:	2200      	movs	r2, #0
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	4798      	blx	r3
      break;
 800b384:	e067      	b.n	800b456 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	785b      	ldrb	r3, [r3, #1]
 800b38a:	2b0b      	cmp	r3, #11
 800b38c:	d851      	bhi.n	800b432 <USBD_CDC_Setup+0x18a>
 800b38e:	a201      	add	r2, pc, #4	; (adr r2, 800b394 <USBD_CDC_Setup+0xec>)
 800b390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b394:	0800b3c5 	.word	0x0800b3c5
 800b398:	0800b441 	.word	0x0800b441
 800b39c:	0800b433 	.word	0x0800b433
 800b3a0:	0800b433 	.word	0x0800b433
 800b3a4:	0800b433 	.word	0x0800b433
 800b3a8:	0800b433 	.word	0x0800b433
 800b3ac:	0800b433 	.word	0x0800b433
 800b3b0:	0800b433 	.word	0x0800b433
 800b3b4:	0800b433 	.word	0x0800b433
 800b3b8:	0800b433 	.word	0x0800b433
 800b3bc:	0800b3ef 	.word	0x0800b3ef
 800b3c0:	0800b419 	.word	0x0800b419
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	2b03      	cmp	r3, #3
 800b3ce:	d107      	bne.n	800b3e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b3d0:	f107 030a 	add.w	r3, r7, #10
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 fced 	bl	800cdb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3de:	e032      	b.n	800b446 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 fc77 	bl	800ccd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	75fb      	strb	r3, [r7, #23]
          break;
 800b3ec:	e02b      	b.n	800b446 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d107      	bne.n	800b40a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b3fa:	f107 030d 	add.w	r3, r7, #13
 800b3fe:	2201      	movs	r2, #1
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f001 fcd8 	bl	800cdb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b408:	e01d      	b.n	800b446 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b40a:	6839      	ldr	r1, [r7, #0]
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f001 fc62 	bl	800ccd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b412:	2303      	movs	r3, #3
 800b414:	75fb      	strb	r3, [r7, #23]
          break;
 800b416:	e016      	b.n	800b446 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b03      	cmp	r3, #3
 800b422:	d00f      	beq.n	800b444 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f001 fc55 	bl	800ccd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b42c:	2303      	movs	r3, #3
 800b42e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b430:	e008      	b.n	800b444 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f001 fc4e 	bl	800ccd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b43a:	2303      	movs	r3, #3
 800b43c:	75fb      	strb	r3, [r7, #23]
          break;
 800b43e:	e002      	b.n	800b446 <USBD_CDC_Setup+0x19e>
          break;
 800b440:	bf00      	nop
 800b442:	e008      	b.n	800b456 <USBD_CDC_Setup+0x1ae>
          break;
 800b444:	bf00      	nop
      }
      break;
 800b446:	e006      	b.n	800b456 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 fc43 	bl	800ccd6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b450:	2303      	movs	r3, #3
 800b452:	75fb      	strb	r3, [r7, #23]
      break;
 800b454:	bf00      	nop
  }

  return (uint8_t)ret;
 800b456:	7dfb      	ldrb	r3, [r7, #23]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	460b      	mov	r3, r1
 800b46a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	32b0      	adds	r2, #176	; 0xb0
 800b47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d101      	bne.n	800b48a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b486:	2303      	movs	r3, #3
 800b488:	e065      	b.n	800b556 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	32b0      	adds	r2, #176	; 0xb0
 800b494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b498:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b49a:	78fb      	ldrb	r3, [r7, #3]
 800b49c:	f003 020f 	and.w	r2, r3, #15
 800b4a0:	6879      	ldr	r1, [r7, #4]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4413      	add	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	440b      	add	r3, r1
 800b4ac:	3318      	adds	r3, #24
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d02f      	beq.n	800b514 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	f003 020f 	and.w	r2, r3, #15
 800b4ba:	6879      	ldr	r1, [r7, #4]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	440b      	add	r3, r1
 800b4c6:	3318      	adds	r3, #24
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	78fb      	ldrb	r3, [r7, #3]
 800b4cc:	f003 010f 	and.w	r1, r3, #15
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	440b      	add	r3, r1
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4403      	add	r3, r0
 800b4dc:	3348      	adds	r3, #72	; 0x48
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b4e4:	fb01 f303 	mul.w	r3, r1, r3
 800b4e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d112      	bne.n	800b514 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b4ee:	78fb      	ldrb	r3, [r7, #3]
 800b4f0:	f003 020f 	and.w	r2, r3, #15
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	440b      	add	r3, r1
 800b500:	3318      	adds	r3, #24
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b506:	78f9      	ldrb	r1, [r7, #3]
 800b508:	2300      	movs	r3, #0
 800b50a:	2200      	movs	r2, #0
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f004 fcf2 	bl	800fef6 <USBD_LL_Transmit>
 800b512:	e01f      	b.n	800b554 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2200      	movs	r2, #0
 800b518:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	33b0      	adds	r3, #176	; 0xb0
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4413      	add	r3, r2
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d010      	beq.n	800b554 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	33b0      	adds	r3, #176	; 0xb0
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b550:	78fa      	ldrb	r2, [r7, #3]
 800b552:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b084      	sub	sp, #16
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	460b      	mov	r3, r1
 800b568:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	32b0      	adds	r2, #176	; 0xb0
 800b574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b578:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	32b0      	adds	r2, #176	; 0xb0
 800b584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e01a      	b.n	800b5c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f004 fcf0 	bl	800ff7a <USBD_LL_GetRxDataSize>
 800b59a:	4602      	mov	r2, r0
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	33b0      	adds	r3, #176	; 0xb0
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b084      	sub	sp, #16
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	32b0      	adds	r2, #176	; 0xb0
 800b5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e025      	b.n	800b63c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	33b0      	adds	r3, #176	; 0xb0
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d01a      	beq.n	800b63a <USBD_CDC_EP0_RxReady+0x6c>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b60a:	2bff      	cmp	r3, #255	; 0xff
 800b60c:	d015      	beq.n	800b63a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	33b0      	adds	r3, #176	; 0xb0
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b626:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b62e:	b292      	uxth	r2, r2
 800b630:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	22ff      	movs	r2, #255	; 0xff
 800b636:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b64c:	2182      	movs	r1, #130	; 0x82
 800b64e:	4818      	ldr	r0, [pc, #96]	; (800b6b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b650:	f000 fd09 	bl	800c066 <USBD_GetEpDesc>
 800b654:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b656:	2101      	movs	r1, #1
 800b658:	4815      	ldr	r0, [pc, #84]	; (800b6b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b65a:	f000 fd04 	bl	800c066 <USBD_GetEpDesc>
 800b65e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b660:	2181      	movs	r1, #129	; 0x81
 800b662:	4813      	ldr	r0, [pc, #76]	; (800b6b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b664:	f000 fcff 	bl	800c066 <USBD_GetEpDesc>
 800b668:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2210      	movs	r2, #16
 800b674:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d006      	beq.n	800b68a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	2200      	movs	r2, #0
 800b680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b684:	711a      	strb	r2, [r3, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d006      	beq.n	800b69e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b698:	711a      	strb	r2, [r3, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2243      	movs	r2, #67	; 0x43
 800b6a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6a4:	4b02      	ldr	r3, [pc, #8]	; (800b6b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000060 	.word	0x20000060

0800b6b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6bc:	2182      	movs	r1, #130	; 0x82
 800b6be:	4818      	ldr	r0, [pc, #96]	; (800b720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6c0:	f000 fcd1 	bl	800c066 <USBD_GetEpDesc>
 800b6c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	4815      	ldr	r0, [pc, #84]	; (800b720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6ca:	f000 fccc 	bl	800c066 <USBD_GetEpDesc>
 800b6ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6d0:	2181      	movs	r1, #129	; 0x81
 800b6d2:	4813      	ldr	r0, [pc, #76]	; (800b720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6d4:	f000 fcc7 	bl	800c066 <USBD_GetEpDesc>
 800b6d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	2210      	movs	r2, #16
 800b6e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	711a      	strb	r2, [r3, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f042 0202 	orr.w	r2, r2, #2
 800b6f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d006      	beq.n	800b70e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	711a      	strb	r2, [r3, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	f042 0202 	orr.w	r2, r2, #2
 800b70c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2243      	movs	r2, #67	; 0x43
 800b712:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b714:	4b02      	ldr	r3, [pc, #8]	; (800b720 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	20000060 	.word	0x20000060

0800b724 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b72c:	2182      	movs	r1, #130	; 0x82
 800b72e:	4818      	ldr	r0, [pc, #96]	; (800b790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b730:	f000 fc99 	bl	800c066 <USBD_GetEpDesc>
 800b734:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b736:	2101      	movs	r1, #1
 800b738:	4815      	ldr	r0, [pc, #84]	; (800b790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b73a:	f000 fc94 	bl	800c066 <USBD_GetEpDesc>
 800b73e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b740:	2181      	movs	r1, #129	; 0x81
 800b742:	4813      	ldr	r0, [pc, #76]	; (800b790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b744:	f000 fc8f 	bl	800c066 <USBD_GetEpDesc>
 800b748:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	2210      	movs	r2, #16
 800b754:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d006      	beq.n	800b76a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2200      	movs	r2, #0
 800b760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b764:	711a      	strb	r2, [r3, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d006      	beq.n	800b77e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b778:	711a      	strb	r2, [r3, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2243      	movs	r2, #67	; 0x43
 800b782:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b784:	4b02      	ldr	r3, [pc, #8]	; (800b790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b786:	4618      	mov	r0, r3
 800b788:	3718      	adds	r7, #24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	20000060 	.word	0x20000060

0800b794 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	220a      	movs	r2, #10
 800b7a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b7a2:	4b03      	ldr	r3, [pc, #12]	; (800b7b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	2000001c 	.word	0x2000001c

0800b7b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e009      	b.n	800b7dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	33b0      	adds	r3, #176	; 0xb0
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	32b0      	adds	r2, #176	; 0xb0
 800b7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b802:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d101      	bne.n	800b80e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b80a:	2303      	movs	r3, #3
 800b80c:	e008      	b.n	800b820 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	371c      	adds	r7, #28
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	32b0      	adds	r2, #176	; 0xb0
 800b840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b844:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e004      	b.n	800b85a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
	...

0800b868 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	32b0      	adds	r2, #176	; 0xb0
 800b87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	32b0      	adds	r2, #176	; 0xb0
 800b88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b892:	2303      	movs	r3, #3
 800b894:	e018      	b.n	800b8c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	7c1b      	ldrb	r3, [r3, #16]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10a      	bne.n	800b8b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b89e:	4b0c      	ldr	r3, [pc, #48]	; (800b8d0 <USBD_CDC_ReceivePacket+0x68>)
 800b8a0:	7819      	ldrb	r1, [r3, #0]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f004 fb43 	bl	800ff38 <USBD_LL_PrepareReceive>
 800b8b2:	e008      	b.n	800b8c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8b4:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <USBD_CDC_ReceivePacket+0x68>)
 800b8b6:	7819      	ldrb	r1, [r3, #0]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8be:	2340      	movs	r3, #64	; 0x40
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f004 fb39 	bl	800ff38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	200000a4 	.word	0x200000a4

0800b8d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e01f      	b.n	800b92c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d003      	beq.n	800b912 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	79fa      	ldrb	r2, [r7, #7]
 800b91e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f004 f9ad 	bl	800fc80 <USBD_LL_Init>
 800b926:	4603      	mov	r3, r0
 800b928:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3718      	adds	r7, #24
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b93e:	2300      	movs	r3, #0
 800b940:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d101      	bne.n	800b94c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b948:	2303      	movs	r3, #3
 800b94a:	e025      	b.n	800b998 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	32ae      	adds	r2, #174	; 0xae
 800b95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00f      	beq.n	800b988 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	32ae      	adds	r2, #174	; 0xae
 800b972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	f107 020e 	add.w	r2, r7, #14
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
 800b980:	4602      	mov	r2, r0
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f004 f9bb 	bl	800fd24 <USBD_LL_Start>
 800b9ae:	4603      	mov	r3, r0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d009      	beq.n	800b9fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	78fa      	ldrb	r2, [r7, #3]
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	4798      	blx	r3
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	460b      	mov	r3, r1
 800ba10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	78fa      	ldrb	r2, [r7, #3]
 800ba20:	4611      	mov	r1, r2
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f001 f908 	bl	800cc62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2201      	movs	r2, #1
 800ba56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ba60:	461a      	mov	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba6e:	f003 031f 	and.w	r3, r3, #31
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d01a      	beq.n	800baac <USBD_LL_SetupStage+0x72>
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	d822      	bhi.n	800bac0 <USBD_LL_SetupStage+0x86>
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <USBD_LL_SetupStage+0x4a>
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d00a      	beq.n	800ba98 <USBD_LL_SetupStage+0x5e>
 800ba82:	e01d      	b.n	800bac0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fb5f 	bl	800c150 <USBD_StdDevReq>
 800ba92:	4603      	mov	r3, r0
 800ba94:	73fb      	strb	r3, [r7, #15]
      break;
 800ba96:	e020      	b.n	800bada <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fbc7 	bl	800c234 <USBD_StdItfReq>
 800baa6:	4603      	mov	r3, r0
 800baa8:	73fb      	strb	r3, [r7, #15]
      break;
 800baaa:	e016      	b.n	800bada <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bab2:	4619      	mov	r1, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fc29 	bl	800c30c <USBD_StdEPReq>
 800baba:	4603      	mov	r3, r0
 800babc:	73fb      	strb	r3, [r7, #15]
      break;
 800babe:	e00c      	b.n	800bada <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bac6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f004 f988 	bl	800fde4 <USBD_LL_StallEP>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73fb      	strb	r3, [r7, #15]
      break;
 800bad8:	bf00      	nop
  }

  return ret;
 800bada:	7bfb      	ldrb	r3, [r7, #15]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	460b      	mov	r3, r1
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800baf6:	7afb      	ldrb	r3, [r7, #11]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d16e      	bne.n	800bbda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bb02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	f040 8098 	bne.w	800bc40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d913      	bls.n	800bb44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	689a      	ldr	r2, [r3, #8]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	1ad2      	subs	r2, r2, r3
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	68da      	ldr	r2, [r3, #12]
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	4293      	cmp	r3, r2
 800bb34:	bf28      	it	cs
 800bb36:	4613      	movcs	r3, r2
 800bb38:	461a      	mov	r2, r3
 800bb3a:	6879      	ldr	r1, [r7, #4]
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f001 f984 	bl	800ce4a <USBD_CtlContinueRx>
 800bb42:	e07d      	b.n	800bc40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb4a:	f003 031f 	and.w	r3, r3, #31
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d014      	beq.n	800bb7c <USBD_LL_DataOutStage+0x98>
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d81d      	bhi.n	800bb92 <USBD_LL_DataOutStage+0xae>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <USBD_LL_DataOutStage+0x7c>
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d003      	beq.n	800bb66 <USBD_LL_DataOutStage+0x82>
 800bb5e:	e018      	b.n	800bb92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bb60:	2300      	movs	r3, #0
 800bb62:	75bb      	strb	r3, [r7, #22]
            break;
 800bb64:	e018      	b.n	800bb98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	4619      	mov	r1, r3
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f000 fa5e 	bl	800c032 <USBD_CoreFindIF>
 800bb76:	4603      	mov	r3, r0
 800bb78:	75bb      	strb	r3, [r7, #22]
            break;
 800bb7a:	e00d      	b.n	800bb98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	4619      	mov	r1, r3
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 fa60 	bl	800c04c <USBD_CoreFindEP>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	75bb      	strb	r3, [r7, #22]
            break;
 800bb90:	e002      	b.n	800bb98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bb92:	2300      	movs	r3, #0
 800bb94:	75bb      	strb	r3, [r7, #22]
            break;
 800bb96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bb98:	7dbb      	ldrb	r3, [r7, #22]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d119      	bne.n	800bbd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d113      	bne.n	800bbd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bbaa:	7dba      	ldrb	r2, [r7, #22]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	32ae      	adds	r2, #174	; 0xae
 800bbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00b      	beq.n	800bbd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bbba:	7dba      	ldrb	r2, [r7, #22]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bbc2:	7dba      	ldrb	r2, [r7, #22]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	32ae      	adds	r2, #174	; 0xae
 800bbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f001 f94a 	bl	800ce6c <USBD_CtlSendStatus>
 800bbd8:	e032      	b.n	800bc40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bbda:	7afb      	ldrb	r3, [r7, #11]
 800bbdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 fa31 	bl	800c04c <USBD_CoreFindEP>
 800bbea:	4603      	mov	r3, r0
 800bbec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbee:	7dbb      	ldrb	r3, [r7, #22]
 800bbf0:	2bff      	cmp	r3, #255	; 0xff
 800bbf2:	d025      	beq.n	800bc40 <USBD_LL_DataOutStage+0x15c>
 800bbf4:	7dbb      	ldrb	r3, [r7, #22]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d122      	bne.n	800bc40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d117      	bne.n	800bc36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bc06:	7dba      	ldrb	r2, [r7, #22]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	32ae      	adds	r2, #174	; 0xae
 800bc0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00f      	beq.n	800bc36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bc16:	7dba      	ldrb	r2, [r7, #22]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bc1e:	7dba      	ldrb	r2, [r7, #22]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	32ae      	adds	r2, #174	; 0xae
 800bc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	7afa      	ldrb	r2, [r7, #11]
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	4798      	blx	r3
 800bc32:	4603      	mov	r3, r0
 800bc34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bc36:	7dfb      	ldrb	r3, [r7, #23]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d001      	beq.n	800bc40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bc3c:	7dfb      	ldrb	r3, [r7, #23]
 800bc3e:	e000      	b.n	800bc42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b086      	sub	sp, #24
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	60f8      	str	r0, [r7, #12]
 800bc52:	460b      	mov	r3, r1
 800bc54:	607a      	str	r2, [r7, #4]
 800bc56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bc58:	7afb      	ldrb	r3, [r7, #11]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d16f      	bne.n	800bd3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3314      	adds	r3, #20
 800bc62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d15a      	bne.n	800bd24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	689a      	ldr	r2, [r3, #8]
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d914      	bls.n	800bca4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	689a      	ldr	r2, [r3, #8]
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	1ad2      	subs	r2, r2, r3
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f001 f8ac 	bl	800cdee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc96:	2300      	movs	r3, #0
 800bc98:	2200      	movs	r2, #0
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f004 f94b 	bl	800ff38 <USBD_LL_PrepareReceive>
 800bca2:	e03f      	b.n	800bd24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	68da      	ldr	r2, [r3, #12]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d11c      	bne.n	800bcea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	685a      	ldr	r2, [r3, #4]
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d316      	bcc.n	800bcea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d20f      	bcs.n	800bcea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcca:	2200      	movs	r2, #0
 800bccc:	2100      	movs	r1, #0
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f001 f88d 	bl	800cdee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcdc:	2300      	movs	r3, #0
 800bcde:	2200      	movs	r2, #0
 800bce0:	2100      	movs	r1, #0
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f004 f928 	bl	800ff38 <USBD_LL_PrepareReceive>
 800bce8:	e01c      	b.n	800bd24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b03      	cmp	r3, #3
 800bcf4:	d10f      	bne.n	800bd16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d009      	beq.n	800bd16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd16:	2180      	movs	r1, #128	; 0x80
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f004 f863 	bl	800fde4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f001 f8b7 	bl	800ce92 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d03a      	beq.n	800bda4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f7ff fe42 	bl	800b9b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd3c:	e032      	b.n	800bda4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bd3e:	7afb      	ldrb	r3, [r7, #11]
 800bd40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	4619      	mov	r1, r3
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f000 f97f 	bl	800c04c <USBD_CoreFindEP>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	2bff      	cmp	r3, #255	; 0xff
 800bd56:	d025      	beq.n	800bda4 <USBD_LL_DataInStage+0x15a>
 800bd58:	7dfb      	ldrb	r3, [r7, #23]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d122      	bne.n	800bda4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	d11c      	bne.n	800bda4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bd6a:	7dfa      	ldrb	r2, [r7, #23]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	32ae      	adds	r2, #174	; 0xae
 800bd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d014      	beq.n	800bda4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bd7a:	7dfa      	ldrb	r2, [r7, #23]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bd82:	7dfa      	ldrb	r2, [r7, #23]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	32ae      	adds	r2, #174	; 0xae
 800bd88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	7afa      	ldrb	r2, [r7, #11]
 800bd90:	4611      	mov	r1, r2
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	4798      	blx	r3
 800bd96:	4603      	mov	r3, r0
 800bd98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bd9a:	7dbb      	ldrb	r3, [r7, #22]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bda0:	7dbb      	ldrb	r3, [r7, #22]
 800bda2:	e000      	b.n	800bda6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b084      	sub	sp, #16
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d014      	beq.n	800be14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00e      	beq.n	800be14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	6852      	ldr	r2, [r2, #4]
 800be02:	b2d2      	uxtb	r2, r2
 800be04:	4611      	mov	r1, r2
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	4798      	blx	r3
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d001      	beq.n	800be14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800be10:	2303      	movs	r3, #3
 800be12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be14:	2340      	movs	r3, #64	; 0x40
 800be16:	2200      	movs	r2, #0
 800be18:	2100      	movs	r1, #0
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f003 ff9d 	bl	800fd5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2240      	movs	r2, #64	; 0x40
 800be2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be30:	2340      	movs	r3, #64	; 0x40
 800be32:	2200      	movs	r2, #0
 800be34:	2180      	movs	r1, #128	; 0x80
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f003 ff8f 	bl	800fd5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2240      	movs	r2, #64	; 0x40
 800be46:	621a      	str	r2, [r3, #32]

  return ret;
 800be48:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	460b      	mov	r3, r1
 800be5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	78fa      	ldrb	r2, [r7, #3]
 800be62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be72:	b480      	push	{r7}
 800be74:	b083      	sub	sp, #12
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be80:	b2da      	uxtb	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2204      	movs	r2, #4
 800be8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b083      	sub	sp, #12
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beac:	b2db      	uxtb	r3, r3
 800beae:	2b04      	cmp	r3, #4
 800beb0:	d106      	bne.n	800bec0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d110      	bne.n	800bf04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00b      	beq.n	800bf04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800befe:	69db      	ldr	r3, [r3, #28]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b082      	sub	sp, #8
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	460b      	mov	r3, r1
 800bf18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	32ae      	adds	r2, #174	; 0xae
 800bf24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e01c      	b.n	800bf6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b03      	cmp	r3, #3
 800bf3a:	d115      	bne.n	800bf68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	32ae      	adds	r2, #174	; 0xae
 800bf46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4a:	6a1b      	ldr	r3, [r3, #32]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00b      	beq.n	800bf68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	32ae      	adds	r2, #174	; 0xae
 800bf5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf5e:	6a1b      	ldr	r3, [r3, #32]
 800bf60:	78fa      	ldrb	r2, [r7, #3]
 800bf62:	4611      	mov	r1, r2
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b082      	sub	sp, #8
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	32ae      	adds	r2, #174	; 0xae
 800bf88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e01c      	b.n	800bfce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d115      	bne.n	800bfcc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	32ae      	adds	r2, #174	; 0xae
 800bfaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00b      	beq.n	800bfcc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	32ae      	adds	r2, #174	; 0xae
 800bfbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc4:	78fa      	ldrb	r2, [r7, #3]
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b083      	sub	sp, #12
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00e      	beq.n	800c028 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	6852      	ldr	r2, [r2, #4]
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	4611      	mov	r1, r2
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	4798      	blx	r3
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c024:	2303      	movs	r3, #3
 800c026:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c028:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c032:	b480      	push	{r7}
 800c034:	b083      	sub	sp, #12
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	460b      	mov	r3, r1
 800c03c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c03e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c040:	4618      	mov	r0, r3
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c058:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b086      	sub	sp, #24
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	460b      	mov	r3, r1
 800c070:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	885b      	ldrh	r3, [r3, #2]
 800c082:	b29a      	uxth	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	b29b      	uxth	r3, r3
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d920      	bls.n	800c0d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	b29b      	uxth	r3, r3
 800c094:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c096:	e013      	b.n	800c0c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c098:	f107 030a 	add.w	r3, r7, #10
 800c09c:	4619      	mov	r1, r3
 800c09e:	6978      	ldr	r0, [r7, #20]
 800c0a0:	f000 f81b 	bl	800c0da <USBD_GetNextDesc>
 800c0a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	785b      	ldrb	r3, [r3, #1]
 800c0aa:	2b05      	cmp	r3, #5
 800c0ac:	d108      	bne.n	800c0c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	789b      	ldrb	r3, [r3, #2]
 800c0b6:	78fa      	ldrb	r2, [r7, #3]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d008      	beq.n	800c0ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	885b      	ldrh	r3, [r3, #2]
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	897b      	ldrh	r3, [r7, #10]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d8e5      	bhi.n	800c098 <USBD_GetEpDesc+0x32>
 800c0cc:	e000      	b.n	800c0d0 <USBD_GetEpDesc+0x6a>
          break;
 800c0ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c0d0:	693b      	ldr	r3, [r7, #16]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b085      	sub	sp, #20
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	881a      	ldrh	r2, [r3, #0]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	4413      	add	r3, r2
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4413      	add	r3, r2
 800c104:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c106:	68fb      	ldr	r3, [r7, #12]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	3301      	adds	r3, #1
 800c12a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c132:	8a3b      	ldrh	r3, [r7, #16]
 800c134:	021b      	lsls	r3, r3, #8
 800c136:	b21a      	sxth	r2, r3
 800c138:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	b21b      	sxth	r3, r3
 800c140:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c142:	89fb      	ldrh	r3, [r7, #14]
}
 800c144:	4618      	mov	r0, r3
 800c146:	371c      	adds	r7, #28
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c166:	2b40      	cmp	r3, #64	; 0x40
 800c168:	d005      	beq.n	800c176 <USBD_StdDevReq+0x26>
 800c16a:	2b40      	cmp	r3, #64	; 0x40
 800c16c:	d857      	bhi.n	800c21e <USBD_StdDevReq+0xce>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00f      	beq.n	800c192 <USBD_StdDevReq+0x42>
 800c172:	2b20      	cmp	r3, #32
 800c174:	d153      	bne.n	800c21e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	32ae      	adds	r2, #174	; 0xae
 800c180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	4798      	blx	r3
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]
      break;
 800c190:	e04a      	b.n	800c228 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	2b09      	cmp	r3, #9
 800c198:	d83b      	bhi.n	800c212 <USBD_StdDevReq+0xc2>
 800c19a:	a201      	add	r2, pc, #4	; (adr r2, 800c1a0 <USBD_StdDevReq+0x50>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c1f5 	.word	0x0800c1f5
 800c1a4:	0800c209 	.word	0x0800c209
 800c1a8:	0800c213 	.word	0x0800c213
 800c1ac:	0800c1ff 	.word	0x0800c1ff
 800c1b0:	0800c213 	.word	0x0800c213
 800c1b4:	0800c1d3 	.word	0x0800c1d3
 800c1b8:	0800c1c9 	.word	0x0800c1c9
 800c1bc:	0800c213 	.word	0x0800c213
 800c1c0:	0800c1eb 	.word	0x0800c1eb
 800c1c4:	0800c1dd 	.word	0x0800c1dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fa3c 	bl	800c648 <USBD_GetDescriptor>
          break;
 800c1d0:	e024      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fba1 	bl	800c91c <USBD_SetAddress>
          break;
 800c1da:	e01f      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c1dc:	6839      	ldr	r1, [r7, #0]
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fbe0 	bl	800c9a4 <USBD_SetConfig>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73fb      	strb	r3, [r7, #15]
          break;
 800c1e8:	e018      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fc83 	bl	800caf8 <USBD_GetConfig>
          break;
 800c1f2:	e013      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fcb4 	bl	800cb64 <USBD_GetStatus>
          break;
 800c1fc:	e00e      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fce3 	bl	800cbcc <USBD_SetFeature>
          break;
 800c206:	e009      	b.n	800c21c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fd07 	bl	800cc1e <USBD_ClrFeature>
          break;
 800c210:	e004      	b.n	800c21c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fd5e 	bl	800ccd6 <USBD_CtlError>
          break;
 800c21a:	bf00      	nop
      }
      break;
 800c21c:	e004      	b.n	800c228 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fd58 	bl	800ccd6 <USBD_CtlError>
      break;
 800c226:	bf00      	nop
  }

  return ret;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop

0800c234 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c24a:	2b40      	cmp	r3, #64	; 0x40
 800c24c:	d005      	beq.n	800c25a <USBD_StdItfReq+0x26>
 800c24e:	2b40      	cmp	r3, #64	; 0x40
 800c250:	d852      	bhi.n	800c2f8 <USBD_StdItfReq+0xc4>
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <USBD_StdItfReq+0x26>
 800c256:	2b20      	cmp	r3, #32
 800c258:	d14e      	bne.n	800c2f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c260:	b2db      	uxtb	r3, r3
 800c262:	3b01      	subs	r3, #1
 800c264:	2b02      	cmp	r3, #2
 800c266:	d840      	bhi.n	800c2ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	889b      	ldrh	r3, [r3, #4]
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d836      	bhi.n	800c2e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	889b      	ldrh	r3, [r3, #4]
 800c276:	b2db      	uxtb	r3, r3
 800c278:	4619      	mov	r1, r3
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff fed9 	bl	800c032 <USBD_CoreFindIF>
 800c280:	4603      	mov	r3, r0
 800c282:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c284:	7bbb      	ldrb	r3, [r7, #14]
 800c286:	2bff      	cmp	r3, #255	; 0xff
 800c288:	d01d      	beq.n	800c2c6 <USBD_StdItfReq+0x92>
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d11a      	bne.n	800c2c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c290:	7bba      	ldrb	r2, [r7, #14]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	32ae      	adds	r2, #174	; 0xae
 800c296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00f      	beq.n	800c2c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c2a0:	7bba      	ldrb	r2, [r7, #14]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2a8:	7bba      	ldrb	r2, [r7, #14]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	32ae      	adds	r2, #174	; 0xae
 800c2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	4798      	blx	r3
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2be:	e004      	b.n	800c2ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2c4:	e001      	b.n	800c2ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	88db      	ldrh	r3, [r3, #6]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d110      	bne.n	800c2f4 <USBD_StdItfReq+0xc0>
 800c2d2:	7bfb      	ldrb	r3, [r7, #15]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10d      	bne.n	800c2f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fdc7 	bl	800ce6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c2de:	e009      	b.n	800c2f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fcf7 	bl	800ccd6 <USBD_CtlError>
          break;
 800c2e8:	e004      	b.n	800c2f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c2ea:	6839      	ldr	r1, [r7, #0]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fcf2 	bl	800ccd6 <USBD_CtlError>
          break;
 800c2f2:	e000      	b.n	800c2f6 <USBD_StdItfReq+0xc2>
          break;
 800c2f4:	bf00      	nop
      }
      break;
 800c2f6:	e004      	b.n	800c302 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fceb 	bl	800ccd6 <USBD_CtlError>
      break;
 800c300:	bf00      	nop
  }

  return ret;
 800c302:	7bfb      	ldrb	r3, [r7, #15]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	889b      	ldrh	r3, [r3, #4]
 800c31e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c328:	2b40      	cmp	r3, #64	; 0x40
 800c32a:	d007      	beq.n	800c33c <USBD_StdEPReq+0x30>
 800c32c:	2b40      	cmp	r3, #64	; 0x40
 800c32e:	f200 817f 	bhi.w	800c630 <USBD_StdEPReq+0x324>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d02a      	beq.n	800c38c <USBD_StdEPReq+0x80>
 800c336:	2b20      	cmp	r3, #32
 800c338:	f040 817a 	bne.w	800c630 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff fe83 	bl	800c04c <USBD_CoreFindEP>
 800c346:	4603      	mov	r3, r0
 800c348:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c34a:	7b7b      	ldrb	r3, [r7, #13]
 800c34c:	2bff      	cmp	r3, #255	; 0xff
 800c34e:	f000 8174 	beq.w	800c63a <USBD_StdEPReq+0x32e>
 800c352:	7b7b      	ldrb	r3, [r7, #13]
 800c354:	2b00      	cmp	r3, #0
 800c356:	f040 8170 	bne.w	800c63a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c35a:	7b7a      	ldrb	r2, [r7, #13]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c362:	7b7a      	ldrb	r2, [r7, #13]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	32ae      	adds	r2, #174	; 0xae
 800c368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f000 8163 	beq.w	800c63a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c374:	7b7a      	ldrb	r2, [r7, #13]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	32ae      	adds	r2, #174	; 0xae
 800c37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	4798      	blx	r3
 800c386:	4603      	mov	r3, r0
 800c388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c38a:	e156      	b.n	800c63a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	785b      	ldrb	r3, [r3, #1]
 800c390:	2b03      	cmp	r3, #3
 800c392:	d008      	beq.n	800c3a6 <USBD_StdEPReq+0x9a>
 800c394:	2b03      	cmp	r3, #3
 800c396:	f300 8145 	bgt.w	800c624 <USBD_StdEPReq+0x318>
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 809b 	beq.w	800c4d6 <USBD_StdEPReq+0x1ca>
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d03c      	beq.n	800c41e <USBD_StdEPReq+0x112>
 800c3a4:	e13e      	b.n	800c624 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	d002      	beq.n	800c3b8 <USBD_StdEPReq+0xac>
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d016      	beq.n	800c3e4 <USBD_StdEPReq+0xd8>
 800c3b6:	e02c      	b.n	800c412 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00d      	beq.n	800c3da <USBD_StdEPReq+0xce>
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
 800c3c0:	2b80      	cmp	r3, #128	; 0x80
 800c3c2:	d00a      	beq.n	800c3da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f003 fd0b 	bl	800fde4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3ce:	2180      	movs	r1, #128	; 0x80
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f003 fd07 	bl	800fde4 <USBD_LL_StallEP>
 800c3d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3d8:	e020      	b.n	800c41c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fc7a 	bl	800ccd6 <USBD_CtlError>
              break;
 800c3e2:	e01b      	b.n	800c41c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	885b      	ldrh	r3, [r3, #2]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10e      	bne.n	800c40a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00b      	beq.n	800c40a <USBD_StdEPReq+0xfe>
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
 800c3f4:	2b80      	cmp	r3, #128	; 0x80
 800c3f6:	d008      	beq.n	800c40a <USBD_StdEPReq+0xfe>
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	88db      	ldrh	r3, [r3, #6]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d104      	bne.n	800c40a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c400:	7bbb      	ldrb	r3, [r7, #14]
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f003 fced 	bl	800fde4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fd2e 	bl	800ce6c <USBD_CtlSendStatus>

              break;
 800c410:	e004      	b.n	800c41c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fc5e 	bl	800ccd6 <USBD_CtlError>
              break;
 800c41a:	bf00      	nop
          }
          break;
 800c41c:	e107      	b.n	800c62e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b02      	cmp	r3, #2
 800c428:	d002      	beq.n	800c430 <USBD_StdEPReq+0x124>
 800c42a:	2b03      	cmp	r3, #3
 800c42c:	d016      	beq.n	800c45c <USBD_StdEPReq+0x150>
 800c42e:	e04b      	b.n	800c4c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c430:	7bbb      	ldrb	r3, [r7, #14]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00d      	beq.n	800c452 <USBD_StdEPReq+0x146>
 800c436:	7bbb      	ldrb	r3, [r7, #14]
 800c438:	2b80      	cmp	r3, #128	; 0x80
 800c43a:	d00a      	beq.n	800c452 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c43c:	7bbb      	ldrb	r3, [r7, #14]
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f003 fccf 	bl	800fde4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c446:	2180      	movs	r1, #128	; 0x80
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f003 fccb 	bl	800fde4 <USBD_LL_StallEP>
 800c44e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c450:	e040      	b.n	800c4d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 fc3e 	bl	800ccd6 <USBD_CtlError>
              break;
 800c45a:	e03b      	b.n	800c4d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	885b      	ldrh	r3, [r3, #2]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d136      	bne.n	800c4d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c464:	7bbb      	ldrb	r3, [r7, #14]
 800c466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d004      	beq.n	800c478 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c46e:	7bbb      	ldrb	r3, [r7, #14]
 800c470:	4619      	mov	r1, r3
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f003 fcd5 	bl	800fe22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fcf7 	bl	800ce6c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	4619      	mov	r1, r3
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff fde2 	bl	800c04c <USBD_CoreFindEP>
 800c488:	4603      	mov	r3, r0
 800c48a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c48c:	7b7b      	ldrb	r3, [r7, #13]
 800c48e:	2bff      	cmp	r3, #255	; 0xff
 800c490:	d01f      	beq.n	800c4d2 <USBD_StdEPReq+0x1c6>
 800c492:	7b7b      	ldrb	r3, [r7, #13]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d11c      	bne.n	800c4d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c498:	7b7a      	ldrb	r2, [r7, #13]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c4a0:	7b7a      	ldrb	r2, [r7, #13]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	32ae      	adds	r2, #174	; 0xae
 800c4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d010      	beq.n	800c4d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c4b0:	7b7a      	ldrb	r2, [r7, #13]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	32ae      	adds	r2, #174	; 0xae
 800c4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	6839      	ldr	r1, [r7, #0]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	4798      	blx	r3
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c4c6:	e004      	b.n	800c4d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fc03 	bl	800ccd6 <USBD_CtlError>
              break;
 800c4d0:	e000      	b.n	800c4d4 <USBD_StdEPReq+0x1c8>
              break;
 800c4d2:	bf00      	nop
          }
          break;
 800c4d4:	e0ab      	b.n	800c62e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d002      	beq.n	800c4e8 <USBD_StdEPReq+0x1dc>
 800c4e2:	2b03      	cmp	r3, #3
 800c4e4:	d032      	beq.n	800c54c <USBD_StdEPReq+0x240>
 800c4e6:	e097      	b.n	800c618 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4e8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d007      	beq.n	800c4fe <USBD_StdEPReq+0x1f2>
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	2b80      	cmp	r3, #128	; 0x80
 800c4f2:	d004      	beq.n	800c4fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fbed 	bl	800ccd6 <USBD_CtlError>
                break;
 800c4fc:	e091      	b.n	800c622 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c502:	2b00      	cmp	r3, #0
 800c504:	da0b      	bge.n	800c51e <USBD_StdEPReq+0x212>
 800c506:	7bbb      	ldrb	r3, [r7, #14]
 800c508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c50c:	4613      	mov	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	4413      	add	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	3310      	adds	r3, #16
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	4413      	add	r3, r2
 800c51a:	3304      	adds	r3, #4
 800c51c:	e00b      	b.n	800c536 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c51e:	7bbb      	ldrb	r3, [r7, #14]
 800c520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c524:	4613      	mov	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	4413      	add	r3, r2
 800c534:	3304      	adds	r3, #4
 800c536:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	2200      	movs	r2, #0
 800c53c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2202      	movs	r2, #2
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fc37 	bl	800cdb8 <USBD_CtlSendData>
              break;
 800c54a:	e06a      	b.n	800c622 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c54c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c550:	2b00      	cmp	r3, #0
 800c552:	da11      	bge.n	800c578 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	f003 020f 	and.w	r2, r3, #15
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	440b      	add	r3, r1
 800c566:	3324      	adds	r3, #36	; 0x24
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d117      	bne.n	800c59e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fbb0 	bl	800ccd6 <USBD_CtlError>
                  break;
 800c576:	e054      	b.n	800c622 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	f003 020f 	and.w	r2, r3, #15
 800c57e:	6879      	ldr	r1, [r7, #4]
 800c580:	4613      	mov	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	440b      	add	r3, r1
 800c58a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d104      	bne.n	800c59e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fb9d 	bl	800ccd6 <USBD_CtlError>
                  break;
 800c59c:	e041      	b.n	800c622 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c59e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	da0b      	bge.n	800c5be <USBD_StdEPReq+0x2b2>
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
 800c5a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	3310      	adds	r3, #16
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	e00b      	b.n	800c5d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5be:	7bbb      	ldrb	r3, [r7, #14]
 800c5c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	3304      	adds	r3, #4
 800c5d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d002      	beq.n	800c5e4 <USBD_StdEPReq+0x2d8>
 800c5de:	7bbb      	ldrb	r3, [r7, #14]
 800c5e0:	2b80      	cmp	r3, #128	; 0x80
 800c5e2:	d103      	bne.n	800c5ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	601a      	str	r2, [r3, #0]
 800c5ea:	e00e      	b.n	800c60a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f003 fc35 	bl	800fe60 <USBD_LL_IsStallEP>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	2201      	movs	r2, #1
 800c600:	601a      	str	r2, [r3, #0]
 800c602:	e002      	b.n	800c60a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2200      	movs	r2, #0
 800c608:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2202      	movs	r2, #2
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fbd1 	bl	800cdb8 <USBD_CtlSendData>
              break;
 800c616:	e004      	b.n	800c622 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c618:	6839      	ldr	r1, [r7, #0]
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fb5b 	bl	800ccd6 <USBD_CtlError>
              break;
 800c620:	bf00      	nop
          }
          break;
 800c622:	e004      	b.n	800c62e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c624:	6839      	ldr	r1, [r7, #0]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 fb55 	bl	800ccd6 <USBD_CtlError>
          break;
 800c62c:	bf00      	nop
      }
      break;
 800c62e:	e005      	b.n	800c63c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fb4f 	bl	800ccd6 <USBD_CtlError>
      break;
 800c638:	e000      	b.n	800c63c <USBD_StdEPReq+0x330>
      break;
 800c63a:	bf00      	nop
  }

  return ret;
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
	...

0800c648 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c652:	2300      	movs	r3, #0
 800c654:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c656:	2300      	movs	r3, #0
 800c658:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c65a:	2300      	movs	r3, #0
 800c65c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	885b      	ldrh	r3, [r3, #2]
 800c662:	0a1b      	lsrs	r3, r3, #8
 800c664:	b29b      	uxth	r3, r3
 800c666:	3b01      	subs	r3, #1
 800c668:	2b06      	cmp	r3, #6
 800c66a:	f200 8128 	bhi.w	800c8be <USBD_GetDescriptor+0x276>
 800c66e:	a201      	add	r2, pc, #4	; (adr r2, 800c674 <USBD_GetDescriptor+0x2c>)
 800c670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c674:	0800c691 	.word	0x0800c691
 800c678:	0800c6a9 	.word	0x0800c6a9
 800c67c:	0800c6e9 	.word	0x0800c6e9
 800c680:	0800c8bf 	.word	0x0800c8bf
 800c684:	0800c8bf 	.word	0x0800c8bf
 800c688:	0800c85f 	.word	0x0800c85f
 800c68c:	0800c88b 	.word	0x0800c88b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	7c12      	ldrb	r2, [r2, #16]
 800c69c:	f107 0108 	add.w	r1, r7, #8
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	4798      	blx	r3
 800c6a4:	60f8      	str	r0, [r7, #12]
      break;
 800c6a6:	e112      	b.n	800c8ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	7c1b      	ldrb	r3, [r3, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10d      	bne.n	800c6cc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b8:	f107 0208 	add.w	r2, r7, #8
 800c6bc:	4610      	mov	r0, r2
 800c6be:	4798      	blx	r3
 800c6c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c6ca:	e100      	b.n	800c8ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d4:	f107 0208 	add.w	r2, r7, #8
 800c6d8:	4610      	mov	r0, r2
 800c6da:	4798      	blx	r3
 800c6dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	701a      	strb	r2, [r3, #0]
      break;
 800c6e6:	e0f2      	b.n	800c8ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	885b      	ldrh	r3, [r3, #2]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b05      	cmp	r3, #5
 800c6f0:	f200 80ac 	bhi.w	800c84c <USBD_GetDescriptor+0x204>
 800c6f4:	a201      	add	r2, pc, #4	; (adr r2, 800c6fc <USBD_GetDescriptor+0xb4>)
 800c6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fa:	bf00      	nop
 800c6fc:	0800c715 	.word	0x0800c715
 800c700:	0800c749 	.word	0x0800c749
 800c704:	0800c77d 	.word	0x0800c77d
 800c708:	0800c7b1 	.word	0x0800c7b1
 800c70c:	0800c7e5 	.word	0x0800c7e5
 800c710:	0800c819 	.word	0x0800c819
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00b      	beq.n	800c738 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	7c12      	ldrb	r2, [r2, #16]
 800c72c:	f107 0108 	add.w	r1, r7, #8
 800c730:	4610      	mov	r0, r2
 800c732:	4798      	blx	r3
 800c734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c736:	e091      	b.n	800c85c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 facb 	bl	800ccd6 <USBD_CtlError>
            err++;
 800c740:	7afb      	ldrb	r3, [r7, #11]
 800c742:	3301      	adds	r3, #1
 800c744:	72fb      	strb	r3, [r7, #11]
          break;
 800c746:	e089      	b.n	800c85c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00b      	beq.n	800c76c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	7c12      	ldrb	r2, [r2, #16]
 800c760:	f107 0108 	add.w	r1, r7, #8
 800c764:	4610      	mov	r0, r2
 800c766:	4798      	blx	r3
 800c768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c76a:	e077      	b.n	800c85c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c76c:	6839      	ldr	r1, [r7, #0]
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fab1 	bl	800ccd6 <USBD_CtlError>
            err++;
 800c774:	7afb      	ldrb	r3, [r7, #11]
 800c776:	3301      	adds	r3, #1
 800c778:	72fb      	strb	r3, [r7, #11]
          break;
 800c77a:	e06f      	b.n	800c85c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00b      	beq.n	800c7a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	7c12      	ldrb	r2, [r2, #16]
 800c794:	f107 0108 	add.w	r1, r7, #8
 800c798:	4610      	mov	r0, r2
 800c79a:	4798      	blx	r3
 800c79c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c79e:	e05d      	b.n	800c85c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fa97 	bl	800ccd6 <USBD_CtlError>
            err++;
 800c7a8:	7afb      	ldrb	r3, [r7, #11]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ae:	e055      	b.n	800c85c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00b      	beq.n	800c7d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	7c12      	ldrb	r2, [r2, #16]
 800c7c8:	f107 0108 	add.w	r1, r7, #8
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	4798      	blx	r3
 800c7d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7d2:	e043      	b.n	800c85c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fa7d 	bl	800ccd6 <USBD_CtlError>
            err++;
 800c7dc:	7afb      	ldrb	r3, [r7, #11]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c7e2:	e03b      	b.n	800c85c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00b      	beq.n	800c808 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7f6:	695b      	ldr	r3, [r3, #20]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	7c12      	ldrb	r2, [r2, #16]
 800c7fc:	f107 0108 	add.w	r1, r7, #8
 800c800:	4610      	mov	r0, r2
 800c802:	4798      	blx	r3
 800c804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c806:	e029      	b.n	800c85c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fa63 	bl	800ccd6 <USBD_CtlError>
            err++;
 800c810:	7afb      	ldrb	r3, [r7, #11]
 800c812:	3301      	adds	r3, #1
 800c814:	72fb      	strb	r3, [r7, #11]
          break;
 800c816:	e021      	b.n	800c85c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00b      	beq.n	800c83c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	7c12      	ldrb	r2, [r2, #16]
 800c830:	f107 0108 	add.w	r1, r7, #8
 800c834:	4610      	mov	r0, r2
 800c836:	4798      	blx	r3
 800c838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c83a:	e00f      	b.n	800c85c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fa49 	bl	800ccd6 <USBD_CtlError>
            err++;
 800c844:	7afb      	ldrb	r3, [r7, #11]
 800c846:	3301      	adds	r3, #1
 800c848:	72fb      	strb	r3, [r7, #11]
          break;
 800c84a:	e007      	b.n	800c85c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fa41 	bl	800ccd6 <USBD_CtlError>
          err++;
 800c854:	7afb      	ldrb	r3, [r7, #11]
 800c856:	3301      	adds	r3, #1
 800c858:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c85a:	bf00      	nop
      }
      break;
 800c85c:	e037      	b.n	800c8ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	7c1b      	ldrb	r3, [r3, #16]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d109      	bne.n	800c87a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c86e:	f107 0208 	add.w	r2, r7, #8
 800c872:	4610      	mov	r0, r2
 800c874:	4798      	blx	r3
 800c876:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c878:	e029      	b.n	800c8ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fa2a 	bl	800ccd6 <USBD_CtlError>
        err++;
 800c882:	7afb      	ldrb	r3, [r7, #11]
 800c884:	3301      	adds	r3, #1
 800c886:	72fb      	strb	r3, [r7, #11]
      break;
 800c888:	e021      	b.n	800c8ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	7c1b      	ldrb	r3, [r3, #16]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10d      	bne.n	800c8ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c89a:	f107 0208 	add.w	r2, r7, #8
 800c89e:	4610      	mov	r0, r2
 800c8a0:	4798      	blx	r3
 800c8a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	2207      	movs	r2, #7
 800c8aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8ac:	e00f      	b.n	800c8ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fa10 	bl	800ccd6 <USBD_CtlError>
        err++;
 800c8b6:	7afb      	ldrb	r3, [r7, #11]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	72fb      	strb	r3, [r7, #11]
      break;
 800c8bc:	e007      	b.n	800c8ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c8be:	6839      	ldr	r1, [r7, #0]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fa08 	bl	800ccd6 <USBD_CtlError>
      err++;
 800c8c6:	7afb      	ldrb	r3, [r7, #11]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	72fb      	strb	r3, [r7, #11]
      break;
 800c8cc:	bf00      	nop
  }

  if (err != 0U)
 800c8ce:	7afb      	ldrb	r3, [r7, #11]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d11e      	bne.n	800c912 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	88db      	ldrh	r3, [r3, #6]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d016      	beq.n	800c90a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c8dc:	893b      	ldrh	r3, [r7, #8]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00e      	beq.n	800c900 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	88da      	ldrh	r2, [r3, #6]
 800c8e6:	893b      	ldrh	r3, [r7, #8]
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	bf28      	it	cs
 800c8ec:	4613      	movcs	r3, r2
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c8f2:	893b      	ldrh	r3, [r7, #8]
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	68f9      	ldr	r1, [r7, #12]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fa5d 	bl	800cdb8 <USBD_CtlSendData>
 800c8fe:	e009      	b.n	800c914 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c900:	6839      	ldr	r1, [r7, #0]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f9e7 	bl	800ccd6 <USBD_CtlError>
 800c908:	e004      	b.n	800c914 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 faae 	bl	800ce6c <USBD_CtlSendStatus>
 800c910:	e000      	b.n	800c914 <USBD_GetDescriptor+0x2cc>
    return;
 800c912:	bf00      	nop
  }
}
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop

0800c91c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	889b      	ldrh	r3, [r3, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d131      	bne.n	800c992 <USBD_SetAddress+0x76>
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	88db      	ldrh	r3, [r3, #6]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d12d      	bne.n	800c992 <USBD_SetAddress+0x76>
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	885b      	ldrh	r3, [r3, #2]
 800c93a:	2b7f      	cmp	r3, #127	; 0x7f
 800c93c:	d829      	bhi.n	800c992 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	885b      	ldrh	r3, [r3, #2]
 800c942:	b2db      	uxtb	r3, r3
 800c944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c948:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b03      	cmp	r3, #3
 800c954:	d104      	bne.n	800c960 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f9bc 	bl	800ccd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c95e:	e01d      	b.n	800c99c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	7bfa      	ldrb	r2, [r7, #15]
 800c964:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c968:	7bfb      	ldrb	r3, [r7, #15]
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f003 faa3 	bl	800feb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 fa7a 	bl	800ce6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c978:	7bfb      	ldrb	r3, [r7, #15]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d004      	beq.n	800c988 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2202      	movs	r2, #2
 800c982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c986:	e009      	b.n	800c99c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c990:	e004      	b.n	800c99c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 f99e 	bl	800ccd6 <USBD_CtlError>
  }
}
 800c99a:	bf00      	nop
 800c99c:	bf00      	nop
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	885b      	ldrh	r3, [r3, #2]
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	4b4e      	ldr	r3, [pc, #312]	; (800caf4 <USBD_SetConfig+0x150>)
 800c9ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c9bc:	4b4d      	ldr	r3, [pc, #308]	; (800caf4 <USBD_SetConfig+0x150>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d905      	bls.n	800c9d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f985 	bl	800ccd6 <USBD_CtlError>
    return USBD_FAIL;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e08c      	b.n	800caea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d002      	beq.n	800c9e2 <USBD_SetConfig+0x3e>
 800c9dc:	2b03      	cmp	r3, #3
 800c9de:	d029      	beq.n	800ca34 <USBD_SetConfig+0x90>
 800c9e0:	e075      	b.n	800cace <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c9e2:	4b44      	ldr	r3, [pc, #272]	; (800caf4 <USBD_SetConfig+0x150>)
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d020      	beq.n	800ca2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c9ea:	4b42      	ldr	r3, [pc, #264]	; (800caf4 <USBD_SetConfig+0x150>)
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9f4:	4b3f      	ldr	r3, [pc, #252]	; (800caf4 <USBD_SetConfig+0x150>)
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7fe ffe7 	bl	800b9ce <USBD_SetClassConfig>
 800ca00:	4603      	mov	r3, r0
 800ca02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d008      	beq.n	800ca1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 f962 	bl	800ccd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2202      	movs	r2, #2
 800ca16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca1a:	e065      	b.n	800cae8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 fa25 	bl	800ce6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2203      	movs	r2, #3
 800ca26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ca2a:	e05d      	b.n	800cae8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fa1d 	bl	800ce6c <USBD_CtlSendStatus>
      break;
 800ca32:	e059      	b.n	800cae8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ca34:	4b2f      	ldr	r3, [pc, #188]	; (800caf4 <USBD_SetConfig+0x150>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d112      	bne.n	800ca62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ca44:	4b2b      	ldr	r3, [pc, #172]	; (800caf4 <USBD_SetConfig+0x150>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca4e:	4b29      	ldr	r3, [pc, #164]	; (800caf4 <USBD_SetConfig+0x150>)
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	4619      	mov	r1, r3
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f7fe ffd6 	bl	800ba06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fa06 	bl	800ce6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca60:	e042      	b.n	800cae8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ca62:	4b24      	ldr	r3, [pc, #144]	; (800caf4 <USBD_SetConfig+0x150>)
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d02a      	beq.n	800cac6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7fe ffc4 	bl	800ba06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca7e:	4b1d      	ldr	r3, [pc, #116]	; (800caf4 <USBD_SetConfig+0x150>)
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	461a      	mov	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca88:	4b1a      	ldr	r3, [pc, #104]	; (800caf4 <USBD_SetConfig+0x150>)
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f7fe ff9d 	bl	800b9ce <USBD_SetClassConfig>
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00f      	beq.n	800cabe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ca9e:	6839      	ldr	r1, [r7, #0]
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 f918 	bl	800ccd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	4619      	mov	r1, r3
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7fe ffa9 	bl	800ba06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cabc:	e014      	b.n	800cae8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f9d4 	bl	800ce6c <USBD_CtlSendStatus>
      break;
 800cac4:	e010      	b.n	800cae8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 f9d0 	bl	800ce6c <USBD_CtlSendStatus>
      break;
 800cacc:	e00c      	b.n	800cae8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 f900 	bl	800ccd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cad6:	4b07      	ldr	r3, [pc, #28]	; (800caf4 <USBD_SetConfig+0x150>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	4619      	mov	r1, r3
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7fe ff92 	bl	800ba06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cae2:	2303      	movs	r3, #3
 800cae4:	73fb      	strb	r3, [r7, #15]
      break;
 800cae6:	bf00      	nop
  }

  return ret;
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	20000814 	.word	0x20000814

0800caf8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	88db      	ldrh	r3, [r3, #6]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d004      	beq.n	800cb14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb0a:	6839      	ldr	r1, [r7, #0]
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f8e2 	bl	800ccd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb12:	e023      	b.n	800cb5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	dc02      	bgt.n	800cb26 <USBD_GetConfig+0x2e>
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	dc03      	bgt.n	800cb2c <USBD_GetConfig+0x34>
 800cb24:	e015      	b.n	800cb52 <USBD_GetConfig+0x5a>
 800cb26:	2b03      	cmp	r3, #3
 800cb28:	d00b      	beq.n	800cb42 <USBD_GetConfig+0x4a>
 800cb2a:	e012      	b.n	800cb52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	3308      	adds	r3, #8
 800cb36:	2201      	movs	r2, #1
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f93c 	bl	800cdb8 <USBD_CtlSendData>
        break;
 800cb40:	e00c      	b.n	800cb5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3304      	adds	r3, #4
 800cb46:	2201      	movs	r2, #1
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f934 	bl	800cdb8 <USBD_CtlSendData>
        break;
 800cb50:	e004      	b.n	800cb5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f8be 	bl	800ccd6 <USBD_CtlError>
        break;
 800cb5a:	bf00      	nop
}
 800cb5c:	bf00      	nop
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	3b01      	subs	r3, #1
 800cb78:	2b02      	cmp	r3, #2
 800cb7a:	d81e      	bhi.n	800cbba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	88db      	ldrh	r3, [r3, #6]
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d004      	beq.n	800cb8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 f8a5 	bl	800ccd6 <USBD_CtlError>
        break;
 800cb8c:	e01a      	b.n	800cbc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d005      	beq.n	800cbaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	f043 0202 	orr.w	r2, r3, #2
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	330c      	adds	r3, #12
 800cbae:	2202      	movs	r2, #2
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f900 	bl	800cdb8 <USBD_CtlSendData>
      break;
 800cbb8:	e004      	b.n	800cbc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f88a 	bl	800ccd6 <USBD_CtlError>
      break;
 800cbc2:	bf00      	nop
  }
}
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	885b      	ldrh	r3, [r3, #2]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d107      	bne.n	800cbee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 f940 	bl	800ce6c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cbec:	e013      	b.n	800cc16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	885b      	ldrh	r3, [r3, #2]
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d10b      	bne.n	800cc0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	889b      	ldrh	r3, [r3, #4]
 800cbfa:	0a1b      	lsrs	r3, r3, #8
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	b2da      	uxtb	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 f930 	bl	800ce6c <USBD_CtlSendStatus>
}
 800cc0c:	e003      	b.n	800cc16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f860 	bl	800ccd6 <USBD_CtlError>
}
 800cc16:	bf00      	nop
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b082      	sub	sp, #8
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	3b01      	subs	r3, #1
 800cc32:	2b02      	cmp	r3, #2
 800cc34:	d80b      	bhi.n	800cc4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	885b      	ldrh	r3, [r3, #2]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d10c      	bne.n	800cc58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f910 	bl	800ce6c <USBD_CtlSendStatus>
      }
      break;
 800cc4c:	e004      	b.n	800cc58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f840 	bl	800ccd6 <USBD_CtlError>
      break;
 800cc56:	e000      	b.n	800cc5a <USBD_ClrFeature+0x3c>
      break;
 800cc58:	bf00      	nop
  }
}
 800cc5a:	bf00      	nop
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	781a      	ldrb	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	781a      	ldrb	r2, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7ff fa41 	bl	800c114 <SWAPBYTE>
 800cc92:	4603      	mov	r3, r0
 800cc94:	461a      	mov	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	3301      	adds	r3, #1
 800cca4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	f7ff fa34 	bl	800c114 <SWAPBYTE>
 800ccac:	4603      	mov	r3, r0
 800ccae:	461a      	mov	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f7ff fa27 	bl	800c114 <SWAPBYTE>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	461a      	mov	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	80da      	strh	r2, [r3, #6]
}
 800ccce:	bf00      	nop
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b082      	sub	sp, #8
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cce0:	2180      	movs	r1, #128	; 0x80
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f003 f87e 	bl	800fde4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cce8:	2100      	movs	r1, #0
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f003 f87a 	bl	800fde4 <USBD_LL_StallEP>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b086      	sub	sp, #24
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd04:	2300      	movs	r3, #0
 800cd06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d036      	beq.n	800cd7c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd12:	6938      	ldr	r0, [r7, #16]
 800cd14:	f000 f836 	bl	800cd84 <USBD_GetLen>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	68ba      	ldr	r2, [r7, #8]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	7812      	ldrb	r2, [r2, #0]
 800cd30:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	3301      	adds	r3, #1
 800cd36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd38:	7dfb      	ldrb	r3, [r7, #23]
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	2203      	movs	r2, #3
 800cd40:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd42:	7dfb      	ldrb	r3, [r7, #23]
 800cd44:	3301      	adds	r3, #1
 800cd46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd48:	e013      	b.n	800cd72 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	4413      	add	r3, r2
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	7812      	ldrb	r2, [r2, #0]
 800cd54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	613b      	str	r3, [r7, #16]
    idx++;
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	4413      	add	r3, r2
 800cd68:	2200      	movs	r2, #0
 800cd6a:	701a      	strb	r2, [r3, #0]
    idx++;
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1e7      	bne.n	800cd4a <USBD_GetString+0x52>
 800cd7a:	e000      	b.n	800cd7e <USBD_GetString+0x86>
    return;
 800cd7c:	bf00      	nop
  }
}
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd94:	e005      	b.n	800cda2 <USBD_GetLen+0x1e>
  {
    len++;
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1f5      	bne.n	800cd96 <USBD_GetLen+0x12>
  }

  return len;
 800cdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3714      	adds	r7, #20
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	2100      	movs	r1, #0
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f003 f889 	bl	800fef6 <USBD_LL_Transmit>

  return USBD_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b084      	sub	sp, #16
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	60f8      	str	r0, [r7, #12]
 800cdf6:	60b9      	str	r1, [r7, #8]
 800cdf8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	2100      	movs	r1, #0
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f003 f878 	bl	800fef6 <USBD_LL_Transmit>

  return USBD_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2203      	movs	r2, #3
 800ce20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	2100      	movs	r1, #0
 800ce3a:	68f8      	ldr	r0, [r7, #12]
 800ce3c:	f003 f87c 	bl	800ff38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b084      	sub	sp, #16
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	60f8      	str	r0, [r7, #12]
 800ce52:	60b9      	str	r1, [r7, #8]
 800ce54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f003 f86b 	bl	800ff38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2204      	movs	r2, #4
 800ce78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	2200      	movs	r2, #0
 800ce80:	2100      	movs	r1, #0
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f003 f837 	bl	800fef6 <USBD_LL_Transmit>

  return USBD_OK;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b082      	sub	sp, #8
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2205      	movs	r2, #5
 800ce9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cea2:	2300      	movs	r3, #0
 800cea4:	2200      	movs	r2, #0
 800cea6:	2100      	movs	r1, #0
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f003 f845 	bl	800ff38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cec2:	2300      	movs	r3, #0
 800cec4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceca:	2b84      	cmp	r3, #132	; 0x84
 800cecc:	d005      	beq.n	800ceda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cece:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	4413      	add	r3, r2
 800ced6:	3303      	adds	r3, #3
 800ced8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ceda:	68fb      	ldr	r3, [r7, #12]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceee:	f3ef 8305 	mrs	r3, IPSR
 800cef2:	607b      	str	r3, [r7, #4]
  return(result);
 800cef4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	bf14      	ite	ne
 800cefa:	2301      	movne	r3, #1
 800cefc:	2300      	moveq	r3, #0
 800cefe:	b2db      	uxtb	r3, r3
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cf10:	f001 f926 	bl	800e160 <vTaskStartScheduler>
  
  return osOK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cf1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf1c:	b089      	sub	sp, #36	; 0x24
 800cf1e:	af04      	add	r7, sp, #16
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d020      	beq.n	800cf6e <osThreadCreate+0x54>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d01c      	beq.n	800cf6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685c      	ldr	r4, [r3, #4]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681d      	ldr	r5, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	691e      	ldr	r6, [r3, #16]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff ffb6 	bl	800ceb8 <makeFreeRtosPriority>
 800cf4c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	695b      	ldr	r3, [r3, #20]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf56:	9202      	str	r2, [sp, #8]
 800cf58:	9301      	str	r3, [sp, #4]
 800cf5a:	9100      	str	r1, [sp, #0]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	4632      	mov	r2, r6
 800cf60:	4629      	mov	r1, r5
 800cf62:	4620      	mov	r0, r4
 800cf64:	f000 ff1e 	bl	800dda4 <xTaskCreateStatic>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	60fb      	str	r3, [r7, #12]
 800cf6c:	e01c      	b.n	800cfa8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	685c      	ldr	r4, [r3, #4]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf7a:	b29e      	uxth	r6, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff ff98 	bl	800ceb8 <makeFreeRtosPriority>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	f107 030c 	add.w	r3, r7, #12
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	9200      	str	r2, [sp, #0]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	4632      	mov	r2, r6
 800cf96:	4629      	mov	r1, r5
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f000 ff60 	bl	800de5e <xTaskCreate>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d001      	beq.n	800cfa8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	e000      	b.n	800cfaa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cfb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b084      	sub	sp, #16
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <osDelay+0x16>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	e000      	b.n	800cfca <osDelay+0x18>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f001 f894 	bl	800e0f8 <vTaskDelay>
  
  return osOK;
 800cfd0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b086      	sub	sp, #24
 800cfde:	af02      	add	r7, sp, #8
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00f      	beq.n	800d00c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d10a      	bne.n	800d008 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	2203      	movs	r2, #3
 800cff8:	9200      	str	r2, [sp, #0]
 800cffa:	2200      	movs	r2, #0
 800cffc:	2100      	movs	r1, #0
 800cffe:	2001      	movs	r0, #1
 800d000:	f000 f9be 	bl	800d380 <xQueueGenericCreateStatic>
 800d004:	4603      	mov	r3, r0
 800d006:	e016      	b.n	800d036 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d008:	2300      	movs	r3, #0
 800d00a:	e014      	b.n	800d036 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d110      	bne.n	800d034 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d012:	2203      	movs	r2, #3
 800d014:	2100      	movs	r1, #0
 800d016:	2001      	movs	r0, #1
 800d018:	f000 fa2a 	bl	800d470 <xQueueGenericCreate>
 800d01c:	60f8      	str	r0, [r7, #12]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d005      	beq.n	800d030 <osSemaphoreCreate+0x56>
 800d024:	2300      	movs	r3, #0
 800d026:	2200      	movs	r2, #0
 800d028:	2100      	movs	r1, #0
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f000 fa7a 	bl	800d524 <xQueueGenericSend>
      return sema;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	e000      	b.n	800d036 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d034:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d04a:	2300      	movs	r3, #0
 800d04c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d101      	bne.n	800d058 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d054:	2380      	movs	r3, #128	; 0x80
 800d056:	e03a      	b.n	800d0ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d062:	d103      	bne.n	800d06c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d064:	f04f 33ff 	mov.w	r3, #4294967295
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	e009      	b.n	800d080 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d006      	beq.n	800d080 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d101      	bne.n	800d080 <osSemaphoreWait+0x40>
      ticks = 1;
 800d07c:	2301      	movs	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d080:	f7ff ff32 	bl	800cee8 <inHandlerMode>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d017      	beq.n	800d0ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d08a:	f107 0308 	add.w	r3, r7, #8
 800d08e:	461a      	mov	r2, r3
 800d090:	2100      	movs	r1, #0
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fcde 	bl	800da54 <xQueueReceiveFromISR>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d001      	beq.n	800d0a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800d09e:	23ff      	movs	r3, #255	; 0xff
 800d0a0:	e015      	b.n	800d0ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d011      	beq.n	800d0cc <osSemaphoreWait+0x8c>
 800d0a8:	4b0b      	ldr	r3, [pc, #44]	; (800d0d8 <osSemaphoreWait+0x98>)
 800d0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ae:	601a      	str	r2, [r3, #0]
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	e008      	b.n	800d0cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d0ba:	68f9      	ldr	r1, [r7, #12]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fbbd 	bl	800d83c <xQueueSemaphoreTake>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d001      	beq.n	800d0cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d0c8:	23ff      	movs	r3, #255	; 0xff
 800d0ca:	e000      	b.n	800d0ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	e000ed04 	.word	0xe000ed04

0800d0dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d0ec:	f7ff fefc 	bl	800cee8 <inHandlerMode>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d016      	beq.n	800d124 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d0f6:	f107 0308 	add.w	r3, r7, #8
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 fb0f 	bl	800d720 <xQueueGiveFromISR>
 800d102:	4603      	mov	r3, r0
 800d104:	2b01      	cmp	r3, #1
 800d106:	d001      	beq.n	800d10c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d108:	23ff      	movs	r3, #255	; 0xff
 800d10a:	e017      	b.n	800d13c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d013      	beq.n	800d13a <osSemaphoreRelease+0x5e>
 800d112:	4b0c      	ldr	r3, [pc, #48]	; (800d144 <osSemaphoreRelease+0x68>)
 800d114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d118:	601a      	str	r2, [r3, #0]
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	e00a      	b.n	800d13a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d124:	2300      	movs	r3, #0
 800d126:	2200      	movs	r2, #0
 800d128:	2100      	movs	r1, #0
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 f9fa 	bl	800d524 <xQueueGenericSend>
 800d130:	4603      	mov	r3, r0
 800d132:	2b01      	cmp	r3, #1
 800d134:	d001      	beq.n	800d13a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d136:	23ff      	movs	r3, #255	; 0xff
 800d138:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d13a:	68fb      	ldr	r3, [r7, #12]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3710      	adds	r7, #16
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	e000ed04 	.word	0xe000ed04

0800d148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f103 0208 	add.w	r2, r3, #8
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f04f 32ff 	mov.w	r2, #4294967295
 800d160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f103 0208 	add.w	r2, r3, #8
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f103 0208 	add.w	r2, r3, #8
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d196:	bf00      	nop
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1a2:	b480      	push	{r7}
 800d1a4:	b085      	sub	sp, #20
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
 800d1aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	689a      	ldr	r2, [r3, #8]
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	683a      	ldr	r2, [r7, #0]
 800d1c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	683a      	ldr	r2, [r7, #0]
 800d1cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	1c5a      	adds	r2, r3, #1
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]
}
 800d1de:	bf00      	nop
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b085      	sub	sp, #20
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d200:	d103      	bne.n	800d20a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	60fb      	str	r3, [r7, #12]
 800d208:	e00c      	b.n	800d224 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	3308      	adds	r3, #8
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	e002      	b.n	800d218 <vListInsert+0x2e>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	60fb      	str	r3, [r7, #12]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	429a      	cmp	r2, r3
 800d222:	d2f6      	bcs.n	800d212 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	685a      	ldr	r2, [r3, #4]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	68fa      	ldr	r2, [r7, #12]
 800d238:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	1c5a      	adds	r2, r3, #1
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	601a      	str	r2, [r3, #0]
}
 800d250:	bf00      	nop
 800d252:	3714      	adds	r7, #20
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	6892      	ldr	r2, [r2, #8]
 800d272:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	6852      	ldr	r2, [r2, #4]
 800d27c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	429a      	cmp	r2, r3
 800d286:	d103      	bne.n	800d290 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	689a      	ldr	r2, [r3, #8]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	1e5a      	subs	r2, r3, #1
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3714      	adds	r7, #20
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10a      	bne.n	800d2da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c8:	f383 8811 	msr	BASEPRI, r3
 800d2cc:	f3bf 8f6f 	isb	sy
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d2d6:	bf00      	nop
 800d2d8:	e7fe      	b.n	800d2d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d2da:	f001 fea3 	bl	800f024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e6:	68f9      	ldr	r1, [r7, #12]
 800d2e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2ea:	fb01 f303 	mul.w	r3, r1, r3
 800d2ee:	441a      	add	r2, r3
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30a:	3b01      	subs	r3, #1
 800d30c:	68f9      	ldr	r1, [r7, #12]
 800d30e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d310:	fb01 f303 	mul.w	r3, r1, r3
 800d314:	441a      	add	r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	22ff      	movs	r2, #255	; 0xff
 800d31e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	22ff      	movs	r2, #255	; 0xff
 800d326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d114      	bne.n	800d35a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d01a      	beq.n	800d36e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	3310      	adds	r3, #16
 800d33c:	4618      	mov	r0, r3
 800d33e:	f001 f961 	bl	800e604 <xTaskRemoveFromEventList>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d012      	beq.n	800d36e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d348:	4b0c      	ldr	r3, [pc, #48]	; (800d37c <xQueueGenericReset+0xcc>)
 800d34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d34e:	601a      	str	r2, [r3, #0]
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	e009      	b.n	800d36e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3310      	adds	r3, #16
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff fef2 	bl	800d148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3324      	adds	r3, #36	; 0x24
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff feed 	bl	800d148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d36e:	f001 fe89 	bl	800f084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d372:	2301      	movs	r3, #1
}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	e000ed04 	.word	0xe000ed04

0800d380 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d380:	b580      	push	{r7, lr}
 800d382:	b08e      	sub	sp, #56	; 0x38
 800d384:	af02      	add	r7, sp, #8
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10a      	bne.n	800d3aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d3a6:	bf00      	nop
 800d3a8:	e7fe      	b.n	800d3a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d10a      	bne.n	800d3c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3c2:	bf00      	nop
 800d3c4:	e7fe      	b.n	800d3c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <xQueueGenericCreateStatic+0x52>
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <xQueueGenericCreateStatic+0x56>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	e000      	b.n	800d3d8 <xQueueGenericCreateStatic+0x58>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10a      	bne.n	800d3f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e0:	f383 8811 	msr	BASEPRI, r3
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	623b      	str	r3, [r7, #32]
}
 800d3ee:	bf00      	nop
 800d3f0:	e7fe      	b.n	800d3f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d102      	bne.n	800d3fe <xQueueGenericCreateStatic+0x7e>
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d101      	bne.n	800d402 <xQueueGenericCreateStatic+0x82>
 800d3fe:	2301      	movs	r3, #1
 800d400:	e000      	b.n	800d404 <xQueueGenericCreateStatic+0x84>
 800d402:	2300      	movs	r3, #0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10a      	bne.n	800d41e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	61fb      	str	r3, [r7, #28]
}
 800d41a:	bf00      	nop
 800d41c:	e7fe      	b.n	800d41c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d41e:	2348      	movs	r3, #72	; 0x48
 800d420:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	2b48      	cmp	r3, #72	; 0x48
 800d426:	d00a      	beq.n	800d43e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42c:	f383 8811 	msr	BASEPRI, r3
 800d430:	f3bf 8f6f 	isb	sy
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	61bb      	str	r3, [r7, #24]
}
 800d43a:	bf00      	nop
 800d43c:	e7fe      	b.n	800d43c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d43e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00d      	beq.n	800d466 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	2201      	movs	r2, #1
 800d44e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d452:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	4613      	mov	r3, r2
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	68b9      	ldr	r1, [r7, #8]
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f000 f83f 	bl	800d4e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d468:	4618      	mov	r0, r3
 800d46a:	3730      	adds	r7, #48	; 0x30
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d470:	b580      	push	{r7, lr}
 800d472:	b08a      	sub	sp, #40	; 0x28
 800d474:	af02      	add	r7, sp, #8
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	4613      	mov	r3, r2
 800d47c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d10a      	bne.n	800d49a <xQueueGenericCreate+0x2a>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	613b      	str	r3, [r7, #16]
}
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	fb02 f303 	mul.w	r3, r2, r3
 800d4a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	3348      	adds	r3, #72	; 0x48
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f001 fedd 	bl	800f268 <pvPortMalloc>
 800d4ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d011      	beq.n	800d4da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	3348      	adds	r3, #72	; 0x48
 800d4be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4c8:	79fa      	ldrb	r2, [r7, #7]
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	697a      	ldr	r2, [r7, #20]
 800d4d2:	68b9      	ldr	r1, [r7, #8]
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f000 f805 	bl	800d4e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d4da:	69bb      	ldr	r3, [r7, #24]
	}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3720      	adds	r7, #32
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d103      	bne.n	800d500 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	e002      	b.n	800d506 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d512:	2101      	movs	r1, #1
 800d514:	69b8      	ldr	r0, [r7, #24]
 800d516:	f7ff fecb 	bl	800d2b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d51a:	bf00      	nop
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
	...

0800d524 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b08e      	sub	sp, #56	; 0x38
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
 800d530:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d532:	2300      	movs	r3, #0
 800d534:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10a      	bne.n	800d556 <xQueueGenericSend+0x32>
	__asm volatile
 800d540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d544:	f383 8811 	msr	BASEPRI, r3
 800d548:	f3bf 8f6f 	isb	sy
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d552:	bf00      	nop
 800d554:	e7fe      	b.n	800d554 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d103      	bne.n	800d564 <xQueueGenericSend+0x40>
 800d55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <xQueueGenericSend+0x44>
 800d564:	2301      	movs	r3, #1
 800d566:	e000      	b.n	800d56a <xQueueGenericSend+0x46>
 800d568:	2300      	movs	r3, #0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10a      	bne.n	800d584 <xQueueGenericSend+0x60>
	__asm volatile
 800d56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d572:	f383 8811 	msr	BASEPRI, r3
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	f3bf 8f4f 	dsb	sy
 800d57e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d580:	bf00      	nop
 800d582:	e7fe      	b.n	800d582 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	2b02      	cmp	r3, #2
 800d588:	d103      	bne.n	800d592 <xQueueGenericSend+0x6e>
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d101      	bne.n	800d596 <xQueueGenericSend+0x72>
 800d592:	2301      	movs	r3, #1
 800d594:	e000      	b.n	800d598 <xQueueGenericSend+0x74>
 800d596:	2300      	movs	r3, #0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10a      	bne.n	800d5b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a0:	f383 8811 	msr	BASEPRI, r3
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	623b      	str	r3, [r7, #32]
}
 800d5ae:	bf00      	nop
 800d5b0:	e7fe      	b.n	800d5b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5b2:	f001 f9e7 	bl	800e984 <xTaskGetSchedulerState>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d102      	bne.n	800d5c2 <xQueueGenericSend+0x9e>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <xQueueGenericSend+0xa2>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e000      	b.n	800d5c8 <xQueueGenericSend+0xa4>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10a      	bne.n	800d5e2 <xQueueGenericSend+0xbe>
	__asm volatile
 800d5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	61fb      	str	r3, [r7, #28]
}
 800d5de:	bf00      	nop
 800d5e0:	e7fe      	b.n	800d5e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5e2:	f001 fd1f 	bl	800f024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d302      	bcc.n	800d5f8 <xQueueGenericSend+0xd4>
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d129      	bne.n	800d64c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5f8:	683a      	ldr	r2, [r7, #0]
 800d5fa:	68b9      	ldr	r1, [r7, #8]
 800d5fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5fe:	f000 fac1 	bl	800db84 <prvCopyDataToQueue>
 800d602:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d010      	beq.n	800d62e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60e:	3324      	adds	r3, #36	; 0x24
 800d610:	4618      	mov	r0, r3
 800d612:	f000 fff7 	bl	800e604 <xTaskRemoveFromEventList>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d013      	beq.n	800d644 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d61c:	4b3f      	ldr	r3, [pc, #252]	; (800d71c <xQueueGenericSend+0x1f8>)
 800d61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	e00a      	b.n	800d644 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d630:	2b00      	cmp	r3, #0
 800d632:	d007      	beq.n	800d644 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d634:	4b39      	ldr	r3, [pc, #228]	; (800d71c <xQueueGenericSend+0x1f8>)
 800d636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d644:	f001 fd1e 	bl	800f084 <vPortExitCritical>
				return pdPASS;
 800d648:	2301      	movs	r3, #1
 800d64a:	e063      	b.n	800d714 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d103      	bne.n	800d65a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d652:	f001 fd17 	bl	800f084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d656:	2300      	movs	r3, #0
 800d658:	e05c      	b.n	800d714 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d106      	bne.n	800d66e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d660:	f107 0314 	add.w	r3, r7, #20
 800d664:	4618      	mov	r0, r3
 800d666:	f001 f82f 	bl	800e6c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d66a:	2301      	movs	r3, #1
 800d66c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d66e:	f001 fd09 	bl	800f084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d672:	f000 fddf 	bl	800e234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d676:	f001 fcd5 	bl	800f024 <vPortEnterCritical>
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d680:	b25b      	sxtb	r3, r3
 800d682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d686:	d103      	bne.n	800d690 <xQueueGenericSend+0x16c>
 800d688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68a:	2200      	movs	r2, #0
 800d68c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d696:	b25b      	sxtb	r3, r3
 800d698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69c:	d103      	bne.n	800d6a6 <xQueueGenericSend+0x182>
 800d69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6a6:	f001 fced 	bl	800f084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6aa:	1d3a      	adds	r2, r7, #4
 800d6ac:	f107 0314 	add.w	r3, r7, #20
 800d6b0:	4611      	mov	r1, r2
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f001 f81e 	bl	800e6f4 <xTaskCheckForTimeOut>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d124      	bne.n	800d708 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d6be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6c0:	f000 fb58 	bl	800dd74 <prvIsQueueFull>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d018      	beq.n	800d6fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6cc:	3310      	adds	r3, #16
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	4611      	mov	r1, r2
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 ff72 	bl	800e5bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d6d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6da:	f000 fae3 	bl	800dca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d6de:	f000 fdb7 	bl	800e250 <xTaskResumeAll>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f47f af7c 	bne.w	800d5e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d6ea:	4b0c      	ldr	r3, [pc, #48]	; (800d71c <xQueueGenericSend+0x1f8>)
 800d6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f0:	601a      	str	r2, [r3, #0]
 800d6f2:	f3bf 8f4f 	dsb	sy
 800d6f6:	f3bf 8f6f 	isb	sy
 800d6fa:	e772      	b.n	800d5e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6fe:	f000 fad1 	bl	800dca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d702:	f000 fda5 	bl	800e250 <xTaskResumeAll>
 800d706:	e76c      	b.n	800d5e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d70a:	f000 facb 	bl	800dca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d70e:	f000 fd9f 	bl	800e250 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d714:	4618      	mov	r0, r3
 800d716:	3738      	adds	r7, #56	; 0x38
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	e000ed04 	.word	0xe000ed04

0800d720 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08e      	sub	sp, #56	; 0x38
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10a      	bne.n	800d74a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	623b      	str	r3, [r7, #32]
}
 800d746:	bf00      	nop
 800d748:	e7fe      	b.n	800d748 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00a      	beq.n	800d768 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	61fb      	str	r3, [r7, #28]
}
 800d764:	bf00      	nop
 800d766:	e7fe      	b.n	800d766 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d103      	bne.n	800d778 <xQueueGiveFromISR+0x58>
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <xQueueGiveFromISR+0x5c>
 800d778:	2301      	movs	r3, #1
 800d77a:	e000      	b.n	800d77e <xQueueGiveFromISR+0x5e>
 800d77c:	2300      	movs	r3, #0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10a      	bne.n	800d798 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	61bb      	str	r3, [r7, #24]
}
 800d794:	bf00      	nop
 800d796:	e7fe      	b.n	800d796 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d798:	f001 fd26 	bl	800f1e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d79c:	f3ef 8211 	mrs	r2, BASEPRI
 800d7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	617a      	str	r2, [r7, #20]
 800d7b2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d7b4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7bc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d22b      	bcs.n	800d820 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e2:	d112      	bne.n	800d80a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d016      	beq.n	800d81a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ee:	3324      	adds	r3, #36	; 0x24
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f000 ff07 	bl	800e604 <xTaskRemoveFromEventList>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00e      	beq.n	800d81a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00b      	beq.n	800d81a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	2201      	movs	r2, #1
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	e007      	b.n	800d81a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d80e:	3301      	adds	r3, #1
 800d810:	b2db      	uxtb	r3, r3
 800d812:	b25a      	sxtb	r2, r3
 800d814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d81a:	2301      	movs	r3, #1
 800d81c:	637b      	str	r3, [r7, #52]	; 0x34
 800d81e:	e001      	b.n	800d824 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d820:	2300      	movs	r3, #0
 800d822:	637b      	str	r3, [r7, #52]	; 0x34
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d82e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d832:	4618      	mov	r0, r3
 800d834:	3738      	adds	r7, #56	; 0x38
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
	...

0800d83c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b08e      	sub	sp, #56	; 0x38
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d846:	2300      	movs	r3, #0
 800d848:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d84e:	2300      	movs	r3, #0
 800d850:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10a      	bne.n	800d86e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	623b      	str	r3, [r7, #32]
}
 800d86a:	bf00      	nop
 800d86c:	e7fe      	b.n	800d86c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00a      	beq.n	800d88c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	61fb      	str	r3, [r7, #28]
}
 800d888:	bf00      	nop
 800d88a:	e7fe      	b.n	800d88a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d88c:	f001 f87a 	bl	800e984 <xTaskGetSchedulerState>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d102      	bne.n	800d89c <xQueueSemaphoreTake+0x60>
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <xQueueSemaphoreTake+0x64>
 800d89c:	2301      	movs	r3, #1
 800d89e:	e000      	b.n	800d8a2 <xQueueSemaphoreTake+0x66>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d10a      	bne.n	800d8bc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	61bb      	str	r3, [r7, #24]
}
 800d8b8:	bf00      	nop
 800d8ba:	e7fe      	b.n	800d8ba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8bc:	f001 fbb2 	bl	800f024 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d024      	beq.n	800d916 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ce:	1e5a      	subs	r2, r3, #1
 800d8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d104      	bne.n	800d8e6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d8dc:	f001 f9fa 	bl	800ecd4 <pvTaskIncrementMutexHeldCount>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00f      	beq.n	800d90e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f0:	3310      	adds	r3, #16
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f000 fe86 	bl	800e604 <xTaskRemoveFromEventList>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d007      	beq.n	800d90e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8fe:	4b54      	ldr	r3, [pc, #336]	; (800da50 <xQueueSemaphoreTake+0x214>)
 800d900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d904:	601a      	str	r2, [r3, #0]
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d90e:	f001 fbb9 	bl	800f084 <vPortExitCritical>
				return pdPASS;
 800d912:	2301      	movs	r3, #1
 800d914:	e097      	b.n	800da46 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d111      	bne.n	800d940 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00a      	beq.n	800d938 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d926:	f383 8811 	msr	BASEPRI, r3
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	617b      	str	r3, [r7, #20]
}
 800d934:	bf00      	nop
 800d936:	e7fe      	b.n	800d936 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d938:	f001 fba4 	bl	800f084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d93c:	2300      	movs	r3, #0
 800d93e:	e082      	b.n	800da46 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d942:	2b00      	cmp	r3, #0
 800d944:	d106      	bne.n	800d954 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d946:	f107 030c 	add.w	r3, r7, #12
 800d94a:	4618      	mov	r0, r3
 800d94c:	f000 febc 	bl	800e6c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d950:	2301      	movs	r3, #1
 800d952:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d954:	f001 fb96 	bl	800f084 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d958:	f000 fc6c 	bl	800e234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d95c:	f001 fb62 	bl	800f024 <vPortEnterCritical>
 800d960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d966:	b25b      	sxtb	r3, r3
 800d968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96c:	d103      	bne.n	800d976 <xQueueSemaphoreTake+0x13a>
 800d96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d970:	2200      	movs	r2, #0
 800d972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d97c:	b25b      	sxtb	r3, r3
 800d97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d982:	d103      	bne.n	800d98c <xQueueSemaphoreTake+0x150>
 800d984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d986:	2200      	movs	r2, #0
 800d988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d98c:	f001 fb7a 	bl	800f084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d990:	463a      	mov	r2, r7
 800d992:	f107 030c 	add.w	r3, r7, #12
 800d996:	4611      	mov	r1, r2
 800d998:	4618      	mov	r0, r3
 800d99a:	f000 feab 	bl	800e6f4 <xTaskCheckForTimeOut>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d132      	bne.n	800da0a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9a6:	f000 f9cf 	bl	800dd48 <prvIsQueueEmpty>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d026      	beq.n	800d9fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d109      	bne.n	800d9cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d9b8:	f001 fb34 	bl	800f024 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f000 fffd 	bl	800e9c0 <xTaskPriorityInherit>
 800d9c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d9c8:	f001 fb5c 	bl	800f084 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	3324      	adds	r3, #36	; 0x24
 800d9d0:	683a      	ldr	r2, [r7, #0]
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 fdf1 	bl	800e5bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9dc:	f000 f962 	bl	800dca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9e0:	f000 fc36 	bl	800e250 <xTaskResumeAll>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f47f af68 	bne.w	800d8bc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d9ec:	4b18      	ldr	r3, [pc, #96]	; (800da50 <xQueueSemaphoreTake+0x214>)
 800d9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	e75e      	b.n	800d8bc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d9fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da00:	f000 f950 	bl	800dca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da04:	f000 fc24 	bl	800e250 <xTaskResumeAll>
 800da08:	e758      	b.n	800d8bc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da0c:	f000 f94a 	bl	800dca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da10:	f000 fc1e 	bl	800e250 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da16:	f000 f997 	bl	800dd48 <prvIsQueueEmpty>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f43f af4d 	beq.w	800d8bc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00d      	beq.n	800da44 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800da28:	f001 fafc 	bl	800f024 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da2e:	f000 f891 	bl	800db54 <prvGetDisinheritPriorityAfterTimeout>
 800da32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da3a:	4618      	mov	r0, r3
 800da3c:	f001 f8bc 	bl	800ebb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da40:	f001 fb20 	bl	800f084 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da46:	4618      	mov	r0, r3
 800da48:	3738      	adds	r7, #56	; 0x38
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	e000ed04 	.word	0xe000ed04

0800da54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08e      	sub	sp, #56	; 0x38
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800da64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da66:	2b00      	cmp	r3, #0
 800da68:	d10a      	bne.n	800da80 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800da6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	623b      	str	r3, [r7, #32]
}
 800da7c:	bf00      	nop
 800da7e:	e7fe      	b.n	800da7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d103      	bne.n	800da8e <xQueueReceiveFromISR+0x3a>
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <xQueueReceiveFromISR+0x3e>
 800da8e:	2301      	movs	r3, #1
 800da90:	e000      	b.n	800da94 <xQueueReceiveFromISR+0x40>
 800da92:	2300      	movs	r3, #0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10a      	bne.n	800daae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800da98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9c:	f383 8811 	msr	BASEPRI, r3
 800daa0:	f3bf 8f6f 	isb	sy
 800daa4:	f3bf 8f4f 	dsb	sy
 800daa8:	61fb      	str	r3, [r7, #28]
}
 800daaa:	bf00      	nop
 800daac:	e7fe      	b.n	800daac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800daae:	f001 fb9b 	bl	800f1e8 <vPortValidateInterruptPriority>
	__asm volatile
 800dab2:	f3ef 8211 	mrs	r2, BASEPRI
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	61ba      	str	r2, [r7, #24]
 800dac8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800daca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dacc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d02f      	beq.n	800db3a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dae4:	68b9      	ldr	r1, [r7, #8]
 800dae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dae8:	f000 f8b6 	bl	800dc58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daee:	1e5a      	subs	r2, r3, #1
 800daf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800daf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800daf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafc:	d112      	bne.n	800db24 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d016      	beq.n	800db34 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	3310      	adds	r3, #16
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 fd7a 	bl	800e604 <xTaskRemoveFromEventList>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00e      	beq.n	800db34 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00b      	beq.n	800db34 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	e007      	b.n	800db34 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db28:	3301      	adds	r3, #1
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	b25a      	sxtb	r2, r3
 800db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800db34:	2301      	movs	r3, #1
 800db36:	637b      	str	r3, [r7, #52]	; 0x34
 800db38:	e001      	b.n	800db3e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	637b      	str	r3, [r7, #52]	; 0x34
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	f383 8811 	msr	BASEPRI, r3
}
 800db48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3738      	adds	r7, #56	; 0x38
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f1c3 0307 	rsb	r3, r3, #7
 800db6e:	60fb      	str	r3, [r7, #12]
 800db70:	e001      	b.n	800db76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800db72:	2300      	movs	r3, #0
 800db74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800db76:	68fb      	ldr	r3, [r7, #12]
	}
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10d      	bne.n	800dbbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d14d      	bne.n	800dc46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f000 ff7c 	bl	800eaac <xTaskPriorityDisinherit>
 800dbb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	609a      	str	r2, [r3, #8]
 800dbbc:	e043      	b.n	800dc46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d119      	bne.n	800dbf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6858      	ldr	r0, [r3, #4]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbcc:	461a      	mov	r2, r3
 800dbce:	68b9      	ldr	r1, [r7, #8]
 800dbd0:	f002 fa56 	bl	8010080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbdc:	441a      	add	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d32b      	bcc.n	800dc46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	605a      	str	r2, [r3, #4]
 800dbf6:	e026      	b.n	800dc46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68d8      	ldr	r0, [r3, #12]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc00:	461a      	mov	r2, r3
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	f002 fa3c 	bl	8010080 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	68da      	ldr	r2, [r3, #12]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc10:	425b      	negs	r3, r3
 800dc12:	441a      	add	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	68da      	ldr	r2, [r3, #12]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d207      	bcs.n	800dc34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	689a      	ldr	r2, [r3, #8]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2c:	425b      	negs	r3, r3
 800dc2e:	441a      	add	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d105      	bne.n	800dc46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	3b01      	subs	r3, #1
 800dc44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dc4e:	697b      	ldr	r3, [r7, #20]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d018      	beq.n	800dc9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68da      	ldr	r2, [r3, #12]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc72:	441a      	add	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d303      	bcc.n	800dc8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68d9      	ldr	r1, [r3, #12]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc94:	461a      	mov	r2, r3
 800dc96:	6838      	ldr	r0, [r7, #0]
 800dc98:	f002 f9f2 	bl	8010080 <memcpy>
	}
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dcac:	f001 f9ba 	bl	800f024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcb8:	e011      	b.n	800dcde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d012      	beq.n	800dce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	3324      	adds	r3, #36	; 0x24
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 fc9c 	bl	800e604 <xTaskRemoveFromEventList>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d001      	beq.n	800dcd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dcd2:	f000 fd71 	bl	800e7b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	dce9      	bgt.n	800dcba <prvUnlockQueue+0x16>
 800dce6:	e000      	b.n	800dcea <prvUnlockQueue+0x46>
					break;
 800dce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	22ff      	movs	r2, #255	; 0xff
 800dcee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dcf2:	f001 f9c7 	bl	800f084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dcf6:	f001 f995 	bl	800f024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd02:	e011      	b.n	800dd28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d012      	beq.n	800dd32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	3310      	adds	r3, #16
 800dd10:	4618      	mov	r0, r3
 800dd12:	f000 fc77 	bl	800e604 <xTaskRemoveFromEventList>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd1c:	f000 fd4c 	bl	800e7b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	dce9      	bgt.n	800dd04 <prvUnlockQueue+0x60>
 800dd30:	e000      	b.n	800dd34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	22ff      	movs	r2, #255	; 0xff
 800dd38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dd3c:	f001 f9a2 	bl	800f084 <vPortExitCritical>
}
 800dd40:	bf00      	nop
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd50:	f001 f968 	bl	800f024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d102      	bne.n	800dd62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	e001      	b.n	800dd66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd62:	2300      	movs	r3, #0
 800dd64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd66:	f001 f98d 	bl	800f084 <vPortExitCritical>

	return xReturn;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd7c:	f001 f952 	bl	800f024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d102      	bne.n	800dd92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	60fb      	str	r3, [r7, #12]
 800dd90:	e001      	b.n	800dd96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dd92:	2300      	movs	r3, #0
 800dd94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd96:	f001 f975 	bl	800f084 <vPortExitCritical>

	return xReturn;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b08e      	sub	sp, #56	; 0x38
 800dda8:	af04      	add	r7, sp, #16
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
 800ddb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10a      	bne.n	800ddce <xTaskCreateStatic+0x2a>
	__asm volatile
 800ddb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbc:	f383 8811 	msr	BASEPRI, r3
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	623b      	str	r3, [r7, #32]
}
 800ddca:	bf00      	nop
 800ddcc:	e7fe      	b.n	800ddcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ddce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10a      	bne.n	800ddea <xTaskCreateStatic+0x46>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	61fb      	str	r3, [r7, #28]
}
 800dde6:	bf00      	nop
 800dde8:	e7fe      	b.n	800dde8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ddea:	23b4      	movs	r3, #180	; 0xb4
 800ddec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	2bb4      	cmp	r3, #180	; 0xb4
 800ddf2:	d00a      	beq.n	800de0a <xTaskCreateStatic+0x66>
	__asm volatile
 800ddf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf8:	f383 8811 	msr	BASEPRI, r3
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	61bb      	str	r3, [r7, #24]
}
 800de06:	bf00      	nop
 800de08:	e7fe      	b.n	800de08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d01e      	beq.n	800de50 <xTaskCreateStatic+0xac>
 800de12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de14:	2b00      	cmp	r3, #0
 800de16:	d01b      	beq.n	800de50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de24:	2202      	movs	r2, #2
 800de26:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de2a:	2300      	movs	r3, #0
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de30:	9302      	str	r3, [sp, #8]
 800de32:	f107 0314 	add.w	r3, r7, #20
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	68b9      	ldr	r1, [r7, #8]
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f000 f850 	bl	800dee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de4a:	f000 f8eb 	bl	800e024 <prvAddNewTaskToReadyList>
 800de4e:	e001      	b.n	800de54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800de50:	2300      	movs	r3, #0
 800de52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de54:	697b      	ldr	r3, [r7, #20]
	}
 800de56:	4618      	mov	r0, r3
 800de58:	3728      	adds	r7, #40	; 0x28
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b08c      	sub	sp, #48	; 0x30
 800de62:	af04      	add	r7, sp, #16
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	603b      	str	r3, [r7, #0]
 800de6a:	4613      	mov	r3, r2
 800de6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de6e:	88fb      	ldrh	r3, [r7, #6]
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	4618      	mov	r0, r3
 800de74:	f001 f9f8 	bl	800f268 <pvPortMalloc>
 800de78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00e      	beq.n	800de9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de80:	20b4      	movs	r0, #180	; 0xb4
 800de82:	f001 f9f1 	bl	800f268 <pvPortMalloc>
 800de86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d003      	beq.n	800de96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	697a      	ldr	r2, [r7, #20]
 800de92:	631a      	str	r2, [r3, #48]	; 0x30
 800de94:	e005      	b.n	800dea2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de96:	6978      	ldr	r0, [r7, #20]
 800de98:	f001 fab2 	bl	800f400 <vPortFree>
 800de9c:	e001      	b.n	800dea2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de9e:	2300      	movs	r3, #0
 800dea0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d017      	beq.n	800ded8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	2200      	movs	r2, #0
 800deac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800deb0:	88fa      	ldrh	r2, [r7, #6]
 800deb2:	2300      	movs	r3, #0
 800deb4:	9303      	str	r3, [sp, #12]
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	9302      	str	r3, [sp, #8]
 800deba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	9300      	str	r3, [sp, #0]
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	68b9      	ldr	r1, [r7, #8]
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	f000 f80e 	bl	800dee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800decc:	69f8      	ldr	r0, [r7, #28]
 800dece:	f000 f8a9 	bl	800e024 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ded2:	2301      	movs	r3, #1
 800ded4:	61bb      	str	r3, [r7, #24]
 800ded6:	e002      	b.n	800dede <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ded8:	f04f 33ff 	mov.w	r3, #4294967295
 800dedc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dede:	69bb      	ldr	r3, [r7, #24]
	}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3720      	adds	r7, #32
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
 800def4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800def6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df00:	3b01      	subs	r3, #1
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	4413      	add	r3, r2
 800df06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	f023 0307 	bic.w	r3, r3, #7
 800df0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	f003 0307 	and.w	r3, r3, #7
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00a      	beq.n	800df30 <prvInitialiseNewTask+0x48>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	617b      	str	r3, [r7, #20]
}
 800df2c:	bf00      	nop
 800df2e:	e7fe      	b.n	800df2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d01f      	beq.n	800df76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df36:	2300      	movs	r3, #0
 800df38:	61fb      	str	r3, [r7, #28]
 800df3a:	e012      	b.n	800df62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	4413      	add	r3, r2
 800df42:	7819      	ldrb	r1, [r3, #0]
 800df44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	4413      	add	r3, r2
 800df4a:	3334      	adds	r3, #52	; 0x34
 800df4c:	460a      	mov	r2, r1
 800df4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	4413      	add	r3, r2
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d006      	beq.n	800df6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	3301      	adds	r3, #1
 800df60:	61fb      	str	r3, [r7, #28]
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	2b0f      	cmp	r3, #15
 800df66:	d9e9      	bls.n	800df3c <prvInitialiseNewTask+0x54>
 800df68:	e000      	b.n	800df6c <prvInitialiseNewTask+0x84>
			{
				break;
 800df6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	2200      	movs	r2, #0
 800df70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df74:	e003      	b.n	800df7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df78:	2200      	movs	r2, #0
 800df7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df80:	2b06      	cmp	r3, #6
 800df82:	d901      	bls.n	800df88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df84:	2306      	movs	r3, #6
 800df86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800df94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df96:	2200      	movs	r2, #0
 800df98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9c:	3304      	adds	r3, #4
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7ff f8f2 	bl	800d188 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa6:	3318      	adds	r3, #24
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7ff f8ed 	bl	800d188 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb6:	f1c3 0207 	rsb	r2, r3, #7
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	334c      	adds	r3, #76	; 0x4c
 800dfd8:	2260      	movs	r2, #96	; 0x60
 800dfda:	2100      	movs	r1, #0
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f002 f85d 	bl	801009c <memset>
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe4:	4a0c      	ldr	r2, [pc, #48]	; (800e018 <prvInitialiseNewTask+0x130>)
 800dfe6:	651a      	str	r2, [r3, #80]	; 0x50
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfea:	4a0c      	ldr	r2, [pc, #48]	; (800e01c <prvInitialiseNewTask+0x134>)
 800dfec:	655a      	str	r2, [r3, #84]	; 0x54
 800dfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff0:	4a0b      	ldr	r2, [pc, #44]	; (800e020 <prvInitialiseNewTask+0x138>)
 800dff2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	68f9      	ldr	r1, [r7, #12]
 800dff8:	69b8      	ldr	r0, [r7, #24]
 800dffa:	f000 fee5 	bl	800edc8 <pxPortInitialiseStack>
 800dffe:	4602      	mov	r2, r0
 800e000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e002:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e00e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e010:	bf00      	nop
 800e012:	3720      	adds	r7, #32
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	08010c94 	.word	0x08010c94
 800e01c:	08010cb4 	.word	0x08010cb4
 800e020:	08010c74 	.word	0x08010c74

0800e024 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e02c:	f000 fffa 	bl	800f024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e030:	4b2a      	ldr	r3, [pc, #168]	; (800e0dc <prvAddNewTaskToReadyList+0xb8>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	3301      	adds	r3, #1
 800e036:	4a29      	ldr	r2, [pc, #164]	; (800e0dc <prvAddNewTaskToReadyList+0xb8>)
 800e038:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e03a:	4b29      	ldr	r3, [pc, #164]	; (800e0e0 <prvAddNewTaskToReadyList+0xbc>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d109      	bne.n	800e056 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e042:	4a27      	ldr	r2, [pc, #156]	; (800e0e0 <prvAddNewTaskToReadyList+0xbc>)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e048:	4b24      	ldr	r3, [pc, #144]	; (800e0dc <prvAddNewTaskToReadyList+0xb8>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d110      	bne.n	800e072 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e050:	f000 fbd6 	bl	800e800 <prvInitialiseTaskLists>
 800e054:	e00d      	b.n	800e072 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e056:	4b23      	ldr	r3, [pc, #140]	; (800e0e4 <prvAddNewTaskToReadyList+0xc0>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d109      	bne.n	800e072 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e05e:	4b20      	ldr	r3, [pc, #128]	; (800e0e0 <prvAddNewTaskToReadyList+0xbc>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e068:	429a      	cmp	r2, r3
 800e06a:	d802      	bhi.n	800e072 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e06c:	4a1c      	ldr	r2, [pc, #112]	; (800e0e0 <prvAddNewTaskToReadyList+0xbc>)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e072:	4b1d      	ldr	r3, [pc, #116]	; (800e0e8 <prvAddNewTaskToReadyList+0xc4>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3301      	adds	r3, #1
 800e078:	4a1b      	ldr	r2, [pc, #108]	; (800e0e8 <prvAddNewTaskToReadyList+0xc4>)
 800e07a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e080:	2201      	movs	r2, #1
 800e082:	409a      	lsls	r2, r3
 800e084:	4b19      	ldr	r3, [pc, #100]	; (800e0ec <prvAddNewTaskToReadyList+0xc8>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4313      	orrs	r3, r2
 800e08a:	4a18      	ldr	r2, [pc, #96]	; (800e0ec <prvAddNewTaskToReadyList+0xc8>)
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e092:	4613      	mov	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4a15      	ldr	r2, [pc, #84]	; (800e0f0 <prvAddNewTaskToReadyList+0xcc>)
 800e09c:	441a      	add	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	f7ff f87c 	bl	800d1a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0aa:	f000 ffeb 	bl	800f084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0ae:	4b0d      	ldr	r3, [pc, #52]	; (800e0e4 <prvAddNewTaskToReadyList+0xc0>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00e      	beq.n	800e0d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0b6:	4b0a      	ldr	r3, [pc, #40]	; (800e0e0 <prvAddNewTaskToReadyList+0xbc>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d207      	bcs.n	800e0d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0c4:	4b0b      	ldr	r3, [pc, #44]	; (800e0f4 <prvAddNewTaskToReadyList+0xd0>)
 800e0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0ca:	601a      	str	r2, [r3, #0]
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	20000918 	.word	0x20000918
 800e0e0:	20000818 	.word	0x20000818
 800e0e4:	20000924 	.word	0x20000924
 800e0e8:	20000934 	.word	0x20000934
 800e0ec:	20000920 	.word	0x20000920
 800e0f0:	2000081c 	.word	0x2000081c
 800e0f4:	e000ed04 	.word	0xe000ed04

0800e0f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e100:	2300      	movs	r3, #0
 800e102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d017      	beq.n	800e13a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e10a:	4b13      	ldr	r3, [pc, #76]	; (800e158 <vTaskDelay+0x60>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00a      	beq.n	800e128 <vTaskDelay+0x30>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	60bb      	str	r3, [r7, #8]
}
 800e124:	bf00      	nop
 800e126:	e7fe      	b.n	800e126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e128:	f000 f884 	bl	800e234 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e12c:	2100      	movs	r1, #0
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fde4 	bl	800ecfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e134:	f000 f88c 	bl	800e250 <xTaskResumeAll>
 800e138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d107      	bne.n	800e150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e140:	4b06      	ldr	r3, [pc, #24]	; (800e15c <vTaskDelay+0x64>)
 800e142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e146:	601a      	str	r2, [r3, #0]
 800e148:	f3bf 8f4f 	dsb	sy
 800e14c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e150:	bf00      	nop
 800e152:	3710      	adds	r7, #16
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}
 800e158:	20000940 	.word	0x20000940
 800e15c:	e000ed04 	.word	0xe000ed04

0800e160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b08a      	sub	sp, #40	; 0x28
 800e164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e16a:	2300      	movs	r3, #0
 800e16c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e16e:	463a      	mov	r2, r7
 800e170:	1d39      	adds	r1, r7, #4
 800e172:	f107 0308 	add.w	r3, r7, #8
 800e176:	4618      	mov	r0, r3
 800e178:	f7f2 fca6 	bl	8000ac8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e17c:	6839      	ldr	r1, [r7, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	68ba      	ldr	r2, [r7, #8]
 800e182:	9202      	str	r2, [sp, #8]
 800e184:	9301      	str	r3, [sp, #4]
 800e186:	2300      	movs	r3, #0
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	2300      	movs	r3, #0
 800e18c:	460a      	mov	r2, r1
 800e18e:	4921      	ldr	r1, [pc, #132]	; (800e214 <vTaskStartScheduler+0xb4>)
 800e190:	4821      	ldr	r0, [pc, #132]	; (800e218 <vTaskStartScheduler+0xb8>)
 800e192:	f7ff fe07 	bl	800dda4 <xTaskCreateStatic>
 800e196:	4603      	mov	r3, r0
 800e198:	4a20      	ldr	r2, [pc, #128]	; (800e21c <vTaskStartScheduler+0xbc>)
 800e19a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e19c:	4b1f      	ldr	r3, [pc, #124]	; (800e21c <vTaskStartScheduler+0xbc>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	617b      	str	r3, [r7, #20]
 800e1a8:	e001      	b.n	800e1ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d11b      	bne.n	800e1ec <vTaskStartScheduler+0x8c>
	__asm volatile
 800e1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	613b      	str	r3, [r7, #16]
}
 800e1c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1c8:	4b15      	ldr	r3, [pc, #84]	; (800e220 <vTaskStartScheduler+0xc0>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	334c      	adds	r3, #76	; 0x4c
 800e1ce:	4a15      	ldr	r2, [pc, #84]	; (800e224 <vTaskStartScheduler+0xc4>)
 800e1d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e1d2:	4b15      	ldr	r3, [pc, #84]	; (800e228 <vTaskStartScheduler+0xc8>)
 800e1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e1da:	4b14      	ldr	r3, [pc, #80]	; (800e22c <vTaskStartScheduler+0xcc>)
 800e1dc:	2201      	movs	r2, #1
 800e1de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e1e0:	4b13      	ldr	r3, [pc, #76]	; (800e230 <vTaskStartScheduler+0xd0>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e1e6:	f000 fe7b 	bl	800eee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e1ea:	e00e      	b.n	800e20a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f2:	d10a      	bne.n	800e20a <vTaskStartScheduler+0xaa>
	__asm volatile
 800e1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f8:	f383 8811 	msr	BASEPRI, r3
 800e1fc:	f3bf 8f6f 	isb	sy
 800e200:	f3bf 8f4f 	dsb	sy
 800e204:	60fb      	str	r3, [r7, #12]
}
 800e206:	bf00      	nop
 800e208:	e7fe      	b.n	800e208 <vTaskStartScheduler+0xa8>
}
 800e20a:	bf00      	nop
 800e20c:	3718      	adds	r7, #24
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	08010c0c 	.word	0x08010c0c
 800e218:	0800e7d1 	.word	0x0800e7d1
 800e21c:	2000093c 	.word	0x2000093c
 800e220:	20000818 	.word	0x20000818
 800e224:	20000110 	.word	0x20000110
 800e228:	20000938 	.word	0x20000938
 800e22c:	20000924 	.word	0x20000924
 800e230:	2000091c 	.word	0x2000091c

0800e234 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e234:	b480      	push	{r7}
 800e236:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e238:	4b04      	ldr	r3, [pc, #16]	; (800e24c <vTaskSuspendAll+0x18>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	3301      	adds	r3, #1
 800e23e:	4a03      	ldr	r2, [pc, #12]	; (800e24c <vTaskSuspendAll+0x18>)
 800e240:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e242:	bf00      	nop
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr
 800e24c:	20000940 	.word	0x20000940

0800e250 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e256:	2300      	movs	r3, #0
 800e258:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e25a:	2300      	movs	r3, #0
 800e25c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e25e:	4b41      	ldr	r3, [pc, #260]	; (800e364 <xTaskResumeAll+0x114>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10a      	bne.n	800e27c <xTaskResumeAll+0x2c>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	603b      	str	r3, [r7, #0]
}
 800e278:	bf00      	nop
 800e27a:	e7fe      	b.n	800e27a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e27c:	f000 fed2 	bl	800f024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e280:	4b38      	ldr	r3, [pc, #224]	; (800e364 <xTaskResumeAll+0x114>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	3b01      	subs	r3, #1
 800e286:	4a37      	ldr	r2, [pc, #220]	; (800e364 <xTaskResumeAll+0x114>)
 800e288:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e28a:	4b36      	ldr	r3, [pc, #216]	; (800e364 <xTaskResumeAll+0x114>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d161      	bne.n	800e356 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e292:	4b35      	ldr	r3, [pc, #212]	; (800e368 <xTaskResumeAll+0x118>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d05d      	beq.n	800e356 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e29a:	e02e      	b.n	800e2fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e29c:	4b33      	ldr	r3, [pc, #204]	; (800e36c <xTaskResumeAll+0x11c>)
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	3318      	adds	r3, #24
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fe ffd7 	bl	800d25c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	3304      	adds	r3, #4
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe ffd2 	bl	800d25c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2bc:	2201      	movs	r2, #1
 800e2be:	409a      	lsls	r2, r3
 800e2c0:	4b2b      	ldr	r3, [pc, #172]	; (800e370 <xTaskResumeAll+0x120>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	4a2a      	ldr	r2, [pc, #168]	; (800e370 <xTaskResumeAll+0x120>)
 800e2c8:	6013      	str	r3, [r2, #0]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	4413      	add	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4a27      	ldr	r2, [pc, #156]	; (800e374 <xTaskResumeAll+0x124>)
 800e2d8:	441a      	add	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	4619      	mov	r1, r3
 800e2e0:	4610      	mov	r0, r2
 800e2e2:	f7fe ff5e 	bl	800d1a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ea:	4b23      	ldr	r3, [pc, #140]	; (800e378 <xTaskResumeAll+0x128>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d302      	bcc.n	800e2fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e2f4:	4b21      	ldr	r3, [pc, #132]	; (800e37c <xTaskResumeAll+0x12c>)
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2fa:	4b1c      	ldr	r3, [pc, #112]	; (800e36c <xTaskResumeAll+0x11c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1cc      	bne.n	800e29c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e308:	f000 fb1c 	bl	800e944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e30c:	4b1c      	ldr	r3, [pc, #112]	; (800e380 <xTaskResumeAll+0x130>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d010      	beq.n	800e33a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e318:	f000 f836 	bl	800e388 <xTaskIncrementTick>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d002      	beq.n	800e328 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e322:	4b16      	ldr	r3, [pc, #88]	; (800e37c <xTaskResumeAll+0x12c>)
 800e324:	2201      	movs	r2, #1
 800e326:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3b01      	subs	r3, #1
 800e32c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1f1      	bne.n	800e318 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e334:	4b12      	ldr	r3, [pc, #72]	; (800e380 <xTaskResumeAll+0x130>)
 800e336:	2200      	movs	r2, #0
 800e338:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e33a:	4b10      	ldr	r3, [pc, #64]	; (800e37c <xTaskResumeAll+0x12c>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d009      	beq.n	800e356 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e342:	2301      	movs	r3, #1
 800e344:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e346:	4b0f      	ldr	r3, [pc, #60]	; (800e384 <xTaskResumeAll+0x134>)
 800e348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34c:	601a      	str	r2, [r3, #0]
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e356:	f000 fe95 	bl	800f084 <vPortExitCritical>

	return xAlreadyYielded;
 800e35a:	68bb      	ldr	r3, [r7, #8]
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}
 800e364:	20000940 	.word	0x20000940
 800e368:	20000918 	.word	0x20000918
 800e36c:	200008d8 	.word	0x200008d8
 800e370:	20000920 	.word	0x20000920
 800e374:	2000081c 	.word	0x2000081c
 800e378:	20000818 	.word	0x20000818
 800e37c:	2000092c 	.word	0x2000092c
 800e380:	20000928 	.word	0x20000928
 800e384:	e000ed04 	.word	0xe000ed04

0800e388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e38e:	2300      	movs	r3, #0
 800e390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e392:	4b4e      	ldr	r3, [pc, #312]	; (800e4cc <xTaskIncrementTick+0x144>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	f040 808e 	bne.w	800e4b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e39c:	4b4c      	ldr	r3, [pc, #304]	; (800e4d0 <xTaskIncrementTick+0x148>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3a4:	4a4a      	ldr	r2, [pc, #296]	; (800e4d0 <xTaskIncrementTick+0x148>)
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d120      	bne.n	800e3f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e3b0:	4b48      	ldr	r3, [pc, #288]	; (800e4d4 <xTaskIncrementTick+0x14c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00a      	beq.n	800e3d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800e3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3be:	f383 8811 	msr	BASEPRI, r3
 800e3c2:	f3bf 8f6f 	isb	sy
 800e3c6:	f3bf 8f4f 	dsb	sy
 800e3ca:	603b      	str	r3, [r7, #0]
}
 800e3cc:	bf00      	nop
 800e3ce:	e7fe      	b.n	800e3ce <xTaskIncrementTick+0x46>
 800e3d0:	4b40      	ldr	r3, [pc, #256]	; (800e4d4 <xTaskIncrementTick+0x14c>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	60fb      	str	r3, [r7, #12]
 800e3d6:	4b40      	ldr	r3, [pc, #256]	; (800e4d8 <xTaskIncrementTick+0x150>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a3e      	ldr	r2, [pc, #248]	; (800e4d4 <xTaskIncrementTick+0x14c>)
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	4a3e      	ldr	r2, [pc, #248]	; (800e4d8 <xTaskIncrementTick+0x150>)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	6013      	str	r3, [r2, #0]
 800e3e4:	4b3d      	ldr	r3, [pc, #244]	; (800e4dc <xTaskIncrementTick+0x154>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	4a3c      	ldr	r2, [pc, #240]	; (800e4dc <xTaskIncrementTick+0x154>)
 800e3ec:	6013      	str	r3, [r2, #0]
 800e3ee:	f000 faa9 	bl	800e944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e3f2:	4b3b      	ldr	r3, [pc, #236]	; (800e4e0 <xTaskIncrementTick+0x158>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	693a      	ldr	r2, [r7, #16]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d348      	bcc.n	800e48e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3fc:	4b35      	ldr	r3, [pc, #212]	; (800e4d4 <xTaskIncrementTick+0x14c>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d104      	bne.n	800e410 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e406:	4b36      	ldr	r3, [pc, #216]	; (800e4e0 <xTaskIncrementTick+0x158>)
 800e408:	f04f 32ff 	mov.w	r2, #4294967295
 800e40c:	601a      	str	r2, [r3, #0]
					break;
 800e40e:	e03e      	b.n	800e48e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e410:	4b30      	ldr	r3, [pc, #192]	; (800e4d4 <xTaskIncrementTick+0x14c>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e420:	693a      	ldr	r2, [r7, #16]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	429a      	cmp	r2, r3
 800e426:	d203      	bcs.n	800e430 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e428:	4a2d      	ldr	r2, [pc, #180]	; (800e4e0 <xTaskIncrementTick+0x158>)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e42e:	e02e      	b.n	800e48e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	3304      	adds	r3, #4
 800e434:	4618      	mov	r0, r3
 800e436:	f7fe ff11 	bl	800d25c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d004      	beq.n	800e44c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	3318      	adds	r3, #24
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe ff08 	bl	800d25c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e450:	2201      	movs	r2, #1
 800e452:	409a      	lsls	r2, r3
 800e454:	4b23      	ldr	r3, [pc, #140]	; (800e4e4 <xTaskIncrementTick+0x15c>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4313      	orrs	r3, r2
 800e45a:	4a22      	ldr	r2, [pc, #136]	; (800e4e4 <xTaskIncrementTick+0x15c>)
 800e45c:	6013      	str	r3, [r2, #0]
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e462:	4613      	mov	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4413      	add	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4a1f      	ldr	r2, [pc, #124]	; (800e4e8 <xTaskIncrementTick+0x160>)
 800e46c:	441a      	add	r2, r3
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	3304      	adds	r3, #4
 800e472:	4619      	mov	r1, r3
 800e474:	4610      	mov	r0, r2
 800e476:	f7fe fe94 	bl	800d1a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e47e:	4b1b      	ldr	r3, [pc, #108]	; (800e4ec <xTaskIncrementTick+0x164>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e484:	429a      	cmp	r2, r3
 800e486:	d3b9      	bcc.n	800e3fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e488:	2301      	movs	r3, #1
 800e48a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e48c:	e7b6      	b.n	800e3fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e48e:	4b17      	ldr	r3, [pc, #92]	; (800e4ec <xTaskIncrementTick+0x164>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e494:	4914      	ldr	r1, [pc, #80]	; (800e4e8 <xTaskIncrementTick+0x160>)
 800e496:	4613      	mov	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	4413      	add	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	440b      	add	r3, r1
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d901      	bls.n	800e4aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e4aa:	4b11      	ldr	r3, [pc, #68]	; (800e4f0 <xTaskIncrementTick+0x168>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d007      	beq.n	800e4c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	617b      	str	r3, [r7, #20]
 800e4b6:	e004      	b.n	800e4c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e4b8:	4b0e      	ldr	r3, [pc, #56]	; (800e4f4 <xTaskIncrementTick+0x16c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	4a0d      	ldr	r2, [pc, #52]	; (800e4f4 <xTaskIncrementTick+0x16c>)
 800e4c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e4c2:	697b      	ldr	r3, [r7, #20]
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3718      	adds	r7, #24
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	20000940 	.word	0x20000940
 800e4d0:	2000091c 	.word	0x2000091c
 800e4d4:	200008d0 	.word	0x200008d0
 800e4d8:	200008d4 	.word	0x200008d4
 800e4dc:	20000930 	.word	0x20000930
 800e4e0:	20000938 	.word	0x20000938
 800e4e4:	20000920 	.word	0x20000920
 800e4e8:	2000081c 	.word	0x2000081c
 800e4ec:	20000818 	.word	0x20000818
 800e4f0:	2000092c 	.word	0x2000092c
 800e4f4:	20000928 	.word	0x20000928

0800e4f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b087      	sub	sp, #28
 800e4fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4fe:	4b29      	ldr	r3, [pc, #164]	; (800e5a4 <vTaskSwitchContext+0xac>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e506:	4b28      	ldr	r3, [pc, #160]	; (800e5a8 <vTaskSwitchContext+0xb0>)
 800e508:	2201      	movs	r2, #1
 800e50a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e50c:	e044      	b.n	800e598 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e50e:	4b26      	ldr	r3, [pc, #152]	; (800e5a8 <vTaskSwitchContext+0xb0>)
 800e510:	2200      	movs	r2, #0
 800e512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e514:	4b25      	ldr	r3, [pc, #148]	; (800e5ac <vTaskSwitchContext+0xb4>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	fab3 f383 	clz	r3, r3
 800e520:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e522:	7afb      	ldrb	r3, [r7, #11]
 800e524:	f1c3 031f 	rsb	r3, r3, #31
 800e528:	617b      	str	r3, [r7, #20]
 800e52a:	4921      	ldr	r1, [pc, #132]	; (800e5b0 <vTaskSwitchContext+0xb8>)
 800e52c:	697a      	ldr	r2, [r7, #20]
 800e52e:	4613      	mov	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	440b      	add	r3, r1
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10a      	bne.n	800e554 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	607b      	str	r3, [r7, #4]
}
 800e550:	bf00      	nop
 800e552:	e7fe      	b.n	800e552 <vTaskSwitchContext+0x5a>
 800e554:	697a      	ldr	r2, [r7, #20]
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	4a14      	ldr	r2, [pc, #80]	; (800e5b0 <vTaskSwitchContext+0xb8>)
 800e560:	4413      	add	r3, r2
 800e562:	613b      	str	r3, [r7, #16]
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	685a      	ldr	r2, [r3, #4]
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	605a      	str	r2, [r3, #4]
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	685a      	ldr	r2, [r3, #4]
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	3308      	adds	r3, #8
 800e576:	429a      	cmp	r2, r3
 800e578:	d104      	bne.n	800e584 <vTaskSwitchContext+0x8c>
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	605a      	str	r2, [r3, #4]
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	4a0a      	ldr	r2, [pc, #40]	; (800e5b4 <vTaskSwitchContext+0xbc>)
 800e58c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e58e:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <vTaskSwitchContext+0xbc>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	334c      	adds	r3, #76	; 0x4c
 800e594:	4a08      	ldr	r2, [pc, #32]	; (800e5b8 <vTaskSwitchContext+0xc0>)
 800e596:	6013      	str	r3, [r2, #0]
}
 800e598:	bf00      	nop
 800e59a:	371c      	adds	r7, #28
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr
 800e5a4:	20000940 	.word	0x20000940
 800e5a8:	2000092c 	.word	0x2000092c
 800e5ac:	20000920 	.word	0x20000920
 800e5b0:	2000081c 	.word	0x2000081c
 800e5b4:	20000818 	.word	0x20000818
 800e5b8:	20000110 	.word	0x20000110

0800e5bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10a      	bne.n	800e5e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	60fb      	str	r3, [r7, #12]
}
 800e5de:	bf00      	nop
 800e5e0:	e7fe      	b.n	800e5e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5e2:	4b07      	ldr	r3, [pc, #28]	; (800e600 <vTaskPlaceOnEventList+0x44>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	3318      	adds	r3, #24
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7fe fdfd 	bl	800d1ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5f0:	2101      	movs	r1, #1
 800e5f2:	6838      	ldr	r0, [r7, #0]
 800e5f4:	f000 fb82 	bl	800ecfc <prvAddCurrentTaskToDelayedList>
}
 800e5f8:	bf00      	nop
 800e5fa:	3710      	adds	r7, #16
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	20000818 	.word	0x20000818

0800e604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10a      	bne.n	800e630 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	60fb      	str	r3, [r7, #12]
}
 800e62c:	bf00      	nop
 800e62e:	e7fe      	b.n	800e62e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	3318      	adds	r3, #24
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe fe11 	bl	800d25c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e63a:	4b1d      	ldr	r3, [pc, #116]	; (800e6b0 <xTaskRemoveFromEventList+0xac>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d11c      	bne.n	800e67c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	3304      	adds	r3, #4
 800e646:	4618      	mov	r0, r3
 800e648:	f7fe fe08 	bl	800d25c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e650:	2201      	movs	r2, #1
 800e652:	409a      	lsls	r2, r3
 800e654:	4b17      	ldr	r3, [pc, #92]	; (800e6b4 <xTaskRemoveFromEventList+0xb0>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4313      	orrs	r3, r2
 800e65a:	4a16      	ldr	r2, [pc, #88]	; (800e6b4 <xTaskRemoveFromEventList+0xb0>)
 800e65c:	6013      	str	r3, [r2, #0]
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e662:	4613      	mov	r3, r2
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	4413      	add	r3, r2
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4a13      	ldr	r2, [pc, #76]	; (800e6b8 <xTaskRemoveFromEventList+0xb4>)
 800e66c:	441a      	add	r2, r3
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	3304      	adds	r3, #4
 800e672:	4619      	mov	r1, r3
 800e674:	4610      	mov	r0, r2
 800e676:	f7fe fd94 	bl	800d1a2 <vListInsertEnd>
 800e67a:	e005      	b.n	800e688 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	3318      	adds	r3, #24
 800e680:	4619      	mov	r1, r3
 800e682:	480e      	ldr	r0, [pc, #56]	; (800e6bc <xTaskRemoveFromEventList+0xb8>)
 800e684:	f7fe fd8d 	bl	800d1a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e68c:	4b0c      	ldr	r3, [pc, #48]	; (800e6c0 <xTaskRemoveFromEventList+0xbc>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e692:	429a      	cmp	r2, r3
 800e694:	d905      	bls.n	800e6a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e696:	2301      	movs	r3, #1
 800e698:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e69a:	4b0a      	ldr	r3, [pc, #40]	; (800e6c4 <xTaskRemoveFromEventList+0xc0>)
 800e69c:	2201      	movs	r2, #1
 800e69e:	601a      	str	r2, [r3, #0]
 800e6a0:	e001      	b.n	800e6a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e6a6:	697b      	ldr	r3, [r7, #20]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3718      	adds	r7, #24
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	20000940 	.word	0x20000940
 800e6b4:	20000920 	.word	0x20000920
 800e6b8:	2000081c 	.word	0x2000081c
 800e6bc:	200008d8 	.word	0x200008d8
 800e6c0:	20000818 	.word	0x20000818
 800e6c4:	2000092c 	.word	0x2000092c

0800e6c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e6d0:	4b06      	ldr	r3, [pc, #24]	; (800e6ec <vTaskInternalSetTimeOutState+0x24>)
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e6d8:	4b05      	ldr	r3, [pc, #20]	; (800e6f0 <vTaskInternalSetTimeOutState+0x28>)
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	605a      	str	r2, [r3, #4]
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	20000930 	.word	0x20000930
 800e6f0:	2000091c 	.word	0x2000091c

0800e6f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b088      	sub	sp, #32
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10a      	bne.n	800e71a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	613b      	str	r3, [r7, #16]
}
 800e716:	bf00      	nop
 800e718:	e7fe      	b.n	800e718 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10a      	bne.n	800e736 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	60fb      	str	r3, [r7, #12]
}
 800e732:	bf00      	nop
 800e734:	e7fe      	b.n	800e734 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e736:	f000 fc75 	bl	800f024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e73a:	4b1d      	ldr	r3, [pc, #116]	; (800e7b0 <xTaskCheckForTimeOut+0xbc>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	69ba      	ldr	r2, [r7, #24]
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e752:	d102      	bne.n	800e75a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e754:	2300      	movs	r3, #0
 800e756:	61fb      	str	r3, [r7, #28]
 800e758:	e023      	b.n	800e7a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	4b15      	ldr	r3, [pc, #84]	; (800e7b4 <xTaskCheckForTimeOut+0xc0>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	429a      	cmp	r2, r3
 800e764:	d007      	beq.n	800e776 <xTaskCheckForTimeOut+0x82>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	69ba      	ldr	r2, [r7, #24]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d302      	bcc.n	800e776 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e770:	2301      	movs	r3, #1
 800e772:	61fb      	str	r3, [r7, #28]
 800e774:	e015      	b.n	800e7a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	697a      	ldr	r2, [r7, #20]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d20b      	bcs.n	800e798 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	1ad2      	subs	r2, r2, r3
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f7ff ff9b 	bl	800e6c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e792:	2300      	movs	r3, #0
 800e794:	61fb      	str	r3, [r7, #28]
 800e796:	e004      	b.n	800e7a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	2200      	movs	r2, #0
 800e79c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e7a2:	f000 fc6f 	bl	800f084 <vPortExitCritical>

	return xReturn;
 800e7a6:	69fb      	ldr	r3, [r7, #28]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3720      	adds	r7, #32
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	2000091c 	.word	0x2000091c
 800e7b4:	20000930 	.word	0x20000930

0800e7b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e7bc:	4b03      	ldr	r3, [pc, #12]	; (800e7cc <vTaskMissedYield+0x14>)
 800e7be:	2201      	movs	r2, #1
 800e7c0:	601a      	str	r2, [r3, #0]
}
 800e7c2:	bf00      	nop
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	2000092c 	.word	0x2000092c

0800e7d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e7d8:	f000 f852 	bl	800e880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e7dc:	4b06      	ldr	r3, [pc, #24]	; (800e7f8 <prvIdleTask+0x28>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d9f9      	bls.n	800e7d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e7e4:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <prvIdleTask+0x2c>)
 800e7e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ea:	601a      	str	r2, [r3, #0]
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e7f4:	e7f0      	b.n	800e7d8 <prvIdleTask+0x8>
 800e7f6:	bf00      	nop
 800e7f8:	2000081c 	.word	0x2000081c
 800e7fc:	e000ed04 	.word	0xe000ed04

0800e800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e806:	2300      	movs	r3, #0
 800e808:	607b      	str	r3, [r7, #4]
 800e80a:	e00c      	b.n	800e826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	4613      	mov	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	4413      	add	r3, r2
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	4a12      	ldr	r2, [pc, #72]	; (800e860 <prvInitialiseTaskLists+0x60>)
 800e818:	4413      	add	r3, r2
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fe fc94 	bl	800d148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	3301      	adds	r3, #1
 800e824:	607b      	str	r3, [r7, #4]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2b06      	cmp	r3, #6
 800e82a:	d9ef      	bls.n	800e80c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e82c:	480d      	ldr	r0, [pc, #52]	; (800e864 <prvInitialiseTaskLists+0x64>)
 800e82e:	f7fe fc8b 	bl	800d148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e832:	480d      	ldr	r0, [pc, #52]	; (800e868 <prvInitialiseTaskLists+0x68>)
 800e834:	f7fe fc88 	bl	800d148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e838:	480c      	ldr	r0, [pc, #48]	; (800e86c <prvInitialiseTaskLists+0x6c>)
 800e83a:	f7fe fc85 	bl	800d148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e83e:	480c      	ldr	r0, [pc, #48]	; (800e870 <prvInitialiseTaskLists+0x70>)
 800e840:	f7fe fc82 	bl	800d148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e844:	480b      	ldr	r0, [pc, #44]	; (800e874 <prvInitialiseTaskLists+0x74>)
 800e846:	f7fe fc7f 	bl	800d148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e84a:	4b0b      	ldr	r3, [pc, #44]	; (800e878 <prvInitialiseTaskLists+0x78>)
 800e84c:	4a05      	ldr	r2, [pc, #20]	; (800e864 <prvInitialiseTaskLists+0x64>)
 800e84e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e850:	4b0a      	ldr	r3, [pc, #40]	; (800e87c <prvInitialiseTaskLists+0x7c>)
 800e852:	4a05      	ldr	r2, [pc, #20]	; (800e868 <prvInitialiseTaskLists+0x68>)
 800e854:	601a      	str	r2, [r3, #0]
}
 800e856:	bf00      	nop
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	2000081c 	.word	0x2000081c
 800e864:	200008a8 	.word	0x200008a8
 800e868:	200008bc 	.word	0x200008bc
 800e86c:	200008d8 	.word	0x200008d8
 800e870:	200008ec 	.word	0x200008ec
 800e874:	20000904 	.word	0x20000904
 800e878:	200008d0 	.word	0x200008d0
 800e87c:	200008d4 	.word	0x200008d4

0800e880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e886:	e019      	b.n	800e8bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e888:	f000 fbcc 	bl	800f024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e88c:	4b10      	ldr	r3, [pc, #64]	; (800e8d0 <prvCheckTasksWaitingTermination+0x50>)
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	3304      	adds	r3, #4
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fe fcdf 	bl	800d25c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e89e:	4b0d      	ldr	r3, [pc, #52]	; (800e8d4 <prvCheckTasksWaitingTermination+0x54>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3b01      	subs	r3, #1
 800e8a4:	4a0b      	ldr	r2, [pc, #44]	; (800e8d4 <prvCheckTasksWaitingTermination+0x54>)
 800e8a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e8a8:	4b0b      	ldr	r3, [pc, #44]	; (800e8d8 <prvCheckTasksWaitingTermination+0x58>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	4a0a      	ldr	r2, [pc, #40]	; (800e8d8 <prvCheckTasksWaitingTermination+0x58>)
 800e8b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e8b2:	f000 fbe7 	bl	800f084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 f810 	bl	800e8dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8bc:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <prvCheckTasksWaitingTermination+0x58>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d1e1      	bne.n	800e888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e8c4:	bf00      	nop
 800e8c6:	bf00      	nop
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	200008ec 	.word	0x200008ec
 800e8d4:	20000918 	.word	0x20000918
 800e8d8:	20000900 	.word	0x20000900

0800e8dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	334c      	adds	r3, #76	; 0x4c
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f001 fc81 	bl	80101f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d108      	bne.n	800e90a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f000 fd7f 	bl	800f400 <vPortFree>
				vPortFree( pxTCB );
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 fd7c 	bl	800f400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e908:	e018      	b.n	800e93c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e910:	2b01      	cmp	r3, #1
 800e912:	d103      	bne.n	800e91c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fd73 	bl	800f400 <vPortFree>
	}
 800e91a:	e00f      	b.n	800e93c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e922:	2b02      	cmp	r3, #2
 800e924:	d00a      	beq.n	800e93c <prvDeleteTCB+0x60>
	__asm volatile
 800e926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	60fb      	str	r3, [r7, #12]
}
 800e938:	bf00      	nop
 800e93a:	e7fe      	b.n	800e93a <prvDeleteTCB+0x5e>
	}
 800e93c:	bf00      	nop
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e94a:	4b0c      	ldr	r3, [pc, #48]	; (800e97c <prvResetNextTaskUnblockTime+0x38>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d104      	bne.n	800e95e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <prvResetNextTaskUnblockTime+0x3c>)
 800e956:	f04f 32ff 	mov.w	r2, #4294967295
 800e95a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e95c:	e008      	b.n	800e970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e95e:	4b07      	ldr	r3, [pc, #28]	; (800e97c <prvResetNextTaskUnblockTime+0x38>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	4a04      	ldr	r2, [pc, #16]	; (800e980 <prvResetNextTaskUnblockTime+0x3c>)
 800e96e:	6013      	str	r3, [r2, #0]
}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	200008d0 	.word	0x200008d0
 800e980:	20000938 	.word	0x20000938

0800e984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e98a:	4b0b      	ldr	r3, [pc, #44]	; (800e9b8 <xTaskGetSchedulerState+0x34>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d102      	bne.n	800e998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e992:	2301      	movs	r3, #1
 800e994:	607b      	str	r3, [r7, #4]
 800e996:	e008      	b.n	800e9aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e998:	4b08      	ldr	r3, [pc, #32]	; (800e9bc <xTaskGetSchedulerState+0x38>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d102      	bne.n	800e9a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e9a0:	2302      	movs	r3, #2
 800e9a2:	607b      	str	r3, [r7, #4]
 800e9a4:	e001      	b.n	800e9aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e9aa:	687b      	ldr	r3, [r7, #4]
	}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	370c      	adds	r7, #12
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr
 800e9b8:	20000924 	.word	0x20000924
 800e9bc:	20000940 	.word	0x20000940

0800e9c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d05e      	beq.n	800ea94 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9da:	4b31      	ldr	r3, [pc, #196]	; (800eaa0 <xTaskPriorityInherit+0xe0>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d24e      	bcs.n	800ea82 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	699b      	ldr	r3, [r3, #24]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	db06      	blt.n	800e9fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ec:	4b2c      	ldr	r3, [pc, #176]	; (800eaa0 <xTaskPriorityInherit+0xe0>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f2:	f1c3 0207 	rsb	r2, r3, #7
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	6959      	ldr	r1, [r3, #20]
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea02:	4613      	mov	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4413      	add	r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	4a26      	ldr	r2, [pc, #152]	; (800eaa4 <xTaskPriorityInherit+0xe4>)
 800ea0c:	4413      	add	r3, r2
 800ea0e:	4299      	cmp	r1, r3
 800ea10:	d12f      	bne.n	800ea72 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	3304      	adds	r3, #4
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fe fc20 	bl	800d25c <uxListRemove>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d10a      	bne.n	800ea38 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea26:	2201      	movs	r2, #1
 800ea28:	fa02 f303 	lsl.w	r3, r2, r3
 800ea2c:	43da      	mvns	r2, r3
 800ea2e:	4b1e      	ldr	r3, [pc, #120]	; (800eaa8 <xTaskPriorityInherit+0xe8>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4013      	ands	r3, r2
 800ea34:	4a1c      	ldr	r2, [pc, #112]	; (800eaa8 <xTaskPriorityInherit+0xe8>)
 800ea36:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea38:	4b19      	ldr	r3, [pc, #100]	; (800eaa0 <xTaskPriorityInherit+0xe0>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea46:	2201      	movs	r2, #1
 800ea48:	409a      	lsls	r2, r3
 800ea4a:	4b17      	ldr	r3, [pc, #92]	; (800eaa8 <xTaskPriorityInherit+0xe8>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	4a15      	ldr	r2, [pc, #84]	; (800eaa8 <xTaskPriorityInherit+0xe8>)
 800ea52:	6013      	str	r3, [r2, #0]
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea58:	4613      	mov	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4413      	add	r3, r2
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4a10      	ldr	r2, [pc, #64]	; (800eaa4 <xTaskPriorityInherit+0xe4>)
 800ea62:	441a      	add	r2, r3
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	3304      	adds	r3, #4
 800ea68:	4619      	mov	r1, r3
 800ea6a:	4610      	mov	r0, r2
 800ea6c:	f7fe fb99 	bl	800d1a2 <vListInsertEnd>
 800ea70:	e004      	b.n	800ea7c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea72:	4b0b      	ldr	r3, [pc, #44]	; (800eaa0 <xTaskPriorityInherit+0xe0>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	60fb      	str	r3, [r7, #12]
 800ea80:	e008      	b.n	800ea94 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea86:	4b06      	ldr	r3, [pc, #24]	; (800eaa0 <xTaskPriorityInherit+0xe0>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d201      	bcs.n	800ea94 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ea90:	2301      	movs	r3, #1
 800ea92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea94:	68fb      	ldr	r3, [r7, #12]
	}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	20000818 	.word	0x20000818
 800eaa4:	2000081c 	.word	0x2000081c
 800eaa8:	20000920 	.word	0x20000920

0800eaac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eab8:	2300      	movs	r3, #0
 800eaba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d06e      	beq.n	800eba0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eac2:	4b3a      	ldr	r3, [pc, #232]	; (800ebac <xTaskPriorityDisinherit+0x100>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	693a      	ldr	r2, [r7, #16]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d00a      	beq.n	800eae2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	60fb      	str	r3, [r7, #12]
}
 800eade:	bf00      	nop
 800eae0:	e7fe      	b.n	800eae0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d10a      	bne.n	800eb00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaee:	f383 8811 	msr	BASEPRI, r3
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	f3bf 8f4f 	dsb	sy
 800eafa:	60bb      	str	r3, [r7, #8]
}
 800eafc:	bf00      	nop
 800eafe:	e7fe      	b.n	800eafe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb04:	1e5a      	subs	r2, r3, #1
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d044      	beq.n	800eba0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d140      	bne.n	800eba0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	3304      	adds	r3, #4
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fe fb9a 	bl	800d25c <uxListRemove>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d115      	bne.n	800eb5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb32:	491f      	ldr	r1, [pc, #124]	; (800ebb0 <xTaskPriorityDisinherit+0x104>)
 800eb34:	4613      	mov	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4413      	add	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	440b      	add	r3, r1
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10a      	bne.n	800eb5a <xTaskPriorityDisinherit+0xae>
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb48:	2201      	movs	r2, #1
 800eb4a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb4e:	43da      	mvns	r2, r3
 800eb50:	4b18      	ldr	r3, [pc, #96]	; (800ebb4 <xTaskPriorityDisinherit+0x108>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4013      	ands	r3, r2
 800eb56:	4a17      	ldr	r2, [pc, #92]	; (800ebb4 <xTaskPriorityDisinherit+0x108>)
 800eb58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb66:	f1c3 0207 	rsb	r2, r3, #7
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb72:	2201      	movs	r2, #1
 800eb74:	409a      	lsls	r2, r3
 800eb76:	4b0f      	ldr	r3, [pc, #60]	; (800ebb4 <xTaskPriorityDisinherit+0x108>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	4a0d      	ldr	r2, [pc, #52]	; (800ebb4 <xTaskPriorityDisinherit+0x108>)
 800eb7e:	6013      	str	r3, [r2, #0]
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb84:	4613      	mov	r3, r2
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	4413      	add	r3, r2
 800eb8a:	009b      	lsls	r3, r3, #2
 800eb8c:	4a08      	ldr	r2, [pc, #32]	; (800ebb0 <xTaskPriorityDisinherit+0x104>)
 800eb8e:	441a      	add	r2, r3
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	3304      	adds	r3, #4
 800eb94:	4619      	mov	r1, r3
 800eb96:	4610      	mov	r0, r2
 800eb98:	f7fe fb03 	bl	800d1a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eba0:	697b      	ldr	r3, [r7, #20]
	}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3718      	adds	r7, #24
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	20000818 	.word	0x20000818
 800ebb0:	2000081c 	.word	0x2000081c
 800ebb4:	20000920 	.word	0x20000920

0800ebb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b088      	sub	sp, #32
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d077      	beq.n	800ecc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d10a      	bne.n	800ebee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ebd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebdc:	f383 8811 	msr	BASEPRI, r3
 800ebe0:	f3bf 8f6f 	isb	sy
 800ebe4:	f3bf 8f4f 	dsb	sy
 800ebe8:	60fb      	str	r3, [r7, #12]
}
 800ebea:	bf00      	nop
 800ebec:	e7fe      	b.n	800ebec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d902      	bls.n	800ebfe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	61fb      	str	r3, [r7, #28]
 800ebfc:	e002      	b.n	800ec04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec08:	69fa      	ldr	r2, [r7, #28]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d058      	beq.n	800ecc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec12:	697a      	ldr	r2, [r7, #20]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d153      	bne.n	800ecc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ec18:	4b2b      	ldr	r3, [pc, #172]	; (800ecc8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	69ba      	ldr	r2, [r7, #24]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d10a      	bne.n	800ec38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ec22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	60bb      	str	r3, [r7, #8]
}
 800ec34:	bf00      	nop
 800ec36:	e7fe      	b.n	800ec36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	69fa      	ldr	r2, [r7, #28]
 800ec42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	699b      	ldr	r3, [r3, #24]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	db04      	blt.n	800ec56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	f1c3 0207 	rsb	r2, r3, #7
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	6959      	ldr	r1, [r3, #20]
 800ec5a:	693a      	ldr	r2, [r7, #16]
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	009b      	lsls	r3, r3, #2
 800ec60:	4413      	add	r3, r2
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	4a19      	ldr	r2, [pc, #100]	; (800eccc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ec66:	4413      	add	r3, r2
 800ec68:	4299      	cmp	r1, r3
 800ec6a:	d129      	bne.n	800ecc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	3304      	adds	r3, #4
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fe faf3 	bl	800d25c <uxListRemove>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d10a      	bne.n	800ec92 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec80:	2201      	movs	r2, #1
 800ec82:	fa02 f303 	lsl.w	r3, r2, r3
 800ec86:	43da      	mvns	r2, r3
 800ec88:	4b11      	ldr	r3, [pc, #68]	; (800ecd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	4a10      	ldr	r2, [pc, #64]	; (800ecd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ec90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec96:	2201      	movs	r2, #1
 800ec98:	409a      	lsls	r2, r3
 800ec9a:	4b0d      	ldr	r3, [pc, #52]	; (800ecd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	4a0b      	ldr	r2, [pc, #44]	; (800ecd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eca2:	6013      	str	r3, [r2, #0]
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eca8:	4613      	mov	r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	4413      	add	r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	4a06      	ldr	r2, [pc, #24]	; (800eccc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ecb2:	441a      	add	r2, r3
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	4619      	mov	r1, r3
 800ecba:	4610      	mov	r0, r2
 800ecbc:	f7fe fa71 	bl	800d1a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecc0:	bf00      	nop
 800ecc2:	3720      	adds	r7, #32
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	20000818 	.word	0x20000818
 800eccc:	2000081c 	.word	0x2000081c
 800ecd0:	20000920 	.word	0x20000920

0800ecd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ecd4:	b480      	push	{r7}
 800ecd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ecd8:	4b07      	ldr	r3, [pc, #28]	; (800ecf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d004      	beq.n	800ecea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ece0:	4b05      	ldr	r3, [pc, #20]	; (800ecf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ece6:	3201      	adds	r2, #1
 800ece8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ecea:	4b03      	ldr	r3, [pc, #12]	; (800ecf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecec:	681b      	ldr	r3, [r3, #0]
	}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	20000818 	.word	0x20000818

0800ecfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed06:	4b29      	ldr	r3, [pc, #164]	; (800edac <prvAddCurrentTaskToDelayedList+0xb0>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed0c:	4b28      	ldr	r3, [pc, #160]	; (800edb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	3304      	adds	r3, #4
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fe faa2 	bl	800d25c <uxListRemove>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d10b      	bne.n	800ed36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ed1e:	4b24      	ldr	r3, [pc, #144]	; (800edb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed24:	2201      	movs	r2, #1
 800ed26:	fa02 f303 	lsl.w	r3, r2, r3
 800ed2a:	43da      	mvns	r2, r3
 800ed2c:	4b21      	ldr	r3, [pc, #132]	; (800edb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4013      	ands	r3, r2
 800ed32:	4a20      	ldr	r2, [pc, #128]	; (800edb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ed34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed3c:	d10a      	bne.n	800ed54 <prvAddCurrentTaskToDelayedList+0x58>
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d007      	beq.n	800ed54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed44:	4b1a      	ldr	r3, [pc, #104]	; (800edb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	3304      	adds	r3, #4
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	481a      	ldr	r0, [pc, #104]	; (800edb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ed4e:	f7fe fa28 	bl	800d1a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed52:	e026      	b.n	800eda2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4413      	add	r3, r2
 800ed5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed5c:	4b14      	ldr	r3, [pc, #80]	; (800edb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed64:	68ba      	ldr	r2, [r7, #8]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d209      	bcs.n	800ed80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed6c:	4b13      	ldr	r3, [pc, #76]	; (800edbc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	4b0f      	ldr	r3, [pc, #60]	; (800edb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	3304      	adds	r3, #4
 800ed76:	4619      	mov	r1, r3
 800ed78:	4610      	mov	r0, r2
 800ed7a:	f7fe fa36 	bl	800d1ea <vListInsert>
}
 800ed7e:	e010      	b.n	800eda2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed80:	4b0f      	ldr	r3, [pc, #60]	; (800edc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	4b0a      	ldr	r3, [pc, #40]	; (800edb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3304      	adds	r3, #4
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	f7fe fa2c 	bl	800d1ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ed92:	4b0c      	ldr	r3, [pc, #48]	; (800edc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	68ba      	ldr	r2, [r7, #8]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d202      	bcs.n	800eda2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ed9c:	4a09      	ldr	r2, [pc, #36]	; (800edc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	6013      	str	r3, [r2, #0]
}
 800eda2:	bf00      	nop
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	2000091c 	.word	0x2000091c
 800edb0:	20000818 	.word	0x20000818
 800edb4:	20000920 	.word	0x20000920
 800edb8:	20000904 	.word	0x20000904
 800edbc:	200008d4 	.word	0x200008d4
 800edc0:	200008d0 	.word	0x200008d0
 800edc4:	20000938 	.word	0x20000938

0800edc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800edc8:	b480      	push	{r7}
 800edca:	b085      	sub	sp, #20
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	3b04      	subs	r3, #4
 800edd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ede0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	3b04      	subs	r3, #4
 800ede6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	f023 0201 	bic.w	r2, r3, #1
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	3b04      	subs	r3, #4
 800edf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800edf8:	4a0c      	ldr	r2, [pc, #48]	; (800ee2c <pxPortInitialiseStack+0x64>)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	3b14      	subs	r3, #20
 800ee02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	3b04      	subs	r3, #4
 800ee0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f06f 0202 	mvn.w	r2, #2
 800ee16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	3b20      	subs	r3, #32
 800ee1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	0800ee31 	.word	0x0800ee31

0800ee30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ee30:	b480      	push	{r7}
 800ee32:	b085      	sub	sp, #20
 800ee34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ee36:	2300      	movs	r3, #0
 800ee38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ee3a:	4b12      	ldr	r3, [pc, #72]	; (800ee84 <prvTaskExitError+0x54>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee42:	d00a      	beq.n	800ee5a <prvTaskExitError+0x2a>
	__asm volatile
 800ee44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	60fb      	str	r3, [r7, #12]
}
 800ee56:	bf00      	nop
 800ee58:	e7fe      	b.n	800ee58 <prvTaskExitError+0x28>
	__asm volatile
 800ee5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5e:	f383 8811 	msr	BASEPRI, r3
 800ee62:	f3bf 8f6f 	isb	sy
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	60bb      	str	r3, [r7, #8]
}
 800ee6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ee6e:	bf00      	nop
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d0fc      	beq.n	800ee70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ee76:	bf00      	nop
 800ee78:	bf00      	nop
 800ee7a:	3714      	adds	r7, #20
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr
 800ee84:	200000a8 	.word	0x200000a8
	...

0800ee90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ee90:	4b07      	ldr	r3, [pc, #28]	; (800eeb0 <pxCurrentTCBConst2>)
 800ee92:	6819      	ldr	r1, [r3, #0]
 800ee94:	6808      	ldr	r0, [r1, #0]
 800ee96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9a:	f380 8809 	msr	PSP, r0
 800ee9e:	f3bf 8f6f 	isb	sy
 800eea2:	f04f 0000 	mov.w	r0, #0
 800eea6:	f380 8811 	msr	BASEPRI, r0
 800eeaa:	4770      	bx	lr
 800eeac:	f3af 8000 	nop.w

0800eeb0 <pxCurrentTCBConst2>:
 800eeb0:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eeb4:	bf00      	nop
 800eeb6:	bf00      	nop

0800eeb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eeb8:	4808      	ldr	r0, [pc, #32]	; (800eedc <prvPortStartFirstTask+0x24>)
 800eeba:	6800      	ldr	r0, [r0, #0]
 800eebc:	6800      	ldr	r0, [r0, #0]
 800eebe:	f380 8808 	msr	MSP, r0
 800eec2:	f04f 0000 	mov.w	r0, #0
 800eec6:	f380 8814 	msr	CONTROL, r0
 800eeca:	b662      	cpsie	i
 800eecc:	b661      	cpsie	f
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	f3bf 8f6f 	isb	sy
 800eed6:	df00      	svc	0
 800eed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eeda:	bf00      	nop
 800eedc:	e000ed08 	.word	0xe000ed08

0800eee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b086      	sub	sp, #24
 800eee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eee6:	4b46      	ldr	r3, [pc, #280]	; (800f000 <xPortStartScheduler+0x120>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4a46      	ldr	r2, [pc, #280]	; (800f004 <xPortStartScheduler+0x124>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d10a      	bne.n	800ef06 <xPortStartScheduler+0x26>
	__asm volatile
 800eef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	613b      	str	r3, [r7, #16]
}
 800ef02:	bf00      	nop
 800ef04:	e7fe      	b.n	800ef04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ef06:	4b3e      	ldr	r3, [pc, #248]	; (800f000 <xPortStartScheduler+0x120>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a3f      	ldr	r2, [pc, #252]	; (800f008 <xPortStartScheduler+0x128>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d10a      	bne.n	800ef26 <xPortStartScheduler+0x46>
	__asm volatile
 800ef10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef14:	f383 8811 	msr	BASEPRI, r3
 800ef18:	f3bf 8f6f 	isb	sy
 800ef1c:	f3bf 8f4f 	dsb	sy
 800ef20:	60fb      	str	r3, [r7, #12]
}
 800ef22:	bf00      	nop
 800ef24:	e7fe      	b.n	800ef24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ef26:	4b39      	ldr	r3, [pc, #228]	; (800f00c <xPortStartScheduler+0x12c>)
 800ef28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	22ff      	movs	r2, #255	; 0xff
 800ef36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ef40:	78fb      	ldrb	r3, [r7, #3]
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ef48:	b2da      	uxtb	r2, r3
 800ef4a:	4b31      	ldr	r3, [pc, #196]	; (800f010 <xPortStartScheduler+0x130>)
 800ef4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ef4e:	4b31      	ldr	r3, [pc, #196]	; (800f014 <xPortStartScheduler+0x134>)
 800ef50:	2207      	movs	r2, #7
 800ef52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef54:	e009      	b.n	800ef6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ef56:	4b2f      	ldr	r3, [pc, #188]	; (800f014 <xPortStartScheduler+0x134>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	4a2d      	ldr	r2, [pc, #180]	; (800f014 <xPortStartScheduler+0x134>)
 800ef5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ef60:	78fb      	ldrb	r3, [r7, #3]
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	005b      	lsls	r3, r3, #1
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef6a:	78fb      	ldrb	r3, [r7, #3]
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef72:	2b80      	cmp	r3, #128	; 0x80
 800ef74:	d0ef      	beq.n	800ef56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ef76:	4b27      	ldr	r3, [pc, #156]	; (800f014 <xPortStartScheduler+0x134>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f1c3 0307 	rsb	r3, r3, #7
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	d00a      	beq.n	800ef98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ef82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef86:	f383 8811 	msr	BASEPRI, r3
 800ef8a:	f3bf 8f6f 	isb	sy
 800ef8e:	f3bf 8f4f 	dsb	sy
 800ef92:	60bb      	str	r3, [r7, #8]
}
 800ef94:	bf00      	nop
 800ef96:	e7fe      	b.n	800ef96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ef98:	4b1e      	ldr	r3, [pc, #120]	; (800f014 <xPortStartScheduler+0x134>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	021b      	lsls	r3, r3, #8
 800ef9e:	4a1d      	ldr	r2, [pc, #116]	; (800f014 <xPortStartScheduler+0x134>)
 800efa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800efa2:	4b1c      	ldr	r3, [pc, #112]	; (800f014 <xPortStartScheduler+0x134>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800efaa:	4a1a      	ldr	r2, [pc, #104]	; (800f014 <xPortStartScheduler+0x134>)
 800efac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	b2da      	uxtb	r2, r3
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800efb6:	4b18      	ldr	r3, [pc, #96]	; (800f018 <xPortStartScheduler+0x138>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a17      	ldr	r2, [pc, #92]	; (800f018 <xPortStartScheduler+0x138>)
 800efbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800efc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800efc2:	4b15      	ldr	r3, [pc, #84]	; (800f018 <xPortStartScheduler+0x138>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a14      	ldr	r2, [pc, #80]	; (800f018 <xPortStartScheduler+0x138>)
 800efc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800efcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800efce:	f000 f8dd 	bl	800f18c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800efd2:	4b12      	ldr	r3, [pc, #72]	; (800f01c <xPortStartScheduler+0x13c>)
 800efd4:	2200      	movs	r2, #0
 800efd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800efd8:	f000 f8fc 	bl	800f1d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800efdc:	4b10      	ldr	r3, [pc, #64]	; (800f020 <xPortStartScheduler+0x140>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4a0f      	ldr	r2, [pc, #60]	; (800f020 <xPortStartScheduler+0x140>)
 800efe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800efe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800efe8:	f7ff ff66 	bl	800eeb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800efec:	f7ff fa84 	bl	800e4f8 <vTaskSwitchContext>
	prvTaskExitError();
 800eff0:	f7ff ff1e 	bl	800ee30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eff4:	2300      	movs	r3, #0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3718      	adds	r7, #24
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	e000ed00 	.word	0xe000ed00
 800f004:	410fc271 	.word	0x410fc271
 800f008:	410fc270 	.word	0x410fc270
 800f00c:	e000e400 	.word	0xe000e400
 800f010:	20000944 	.word	0x20000944
 800f014:	20000948 	.word	0x20000948
 800f018:	e000ed20 	.word	0xe000ed20
 800f01c:	200000a8 	.word	0x200000a8
 800f020:	e000ef34 	.word	0xe000ef34

0800f024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
	__asm volatile
 800f02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02e:	f383 8811 	msr	BASEPRI, r3
 800f032:	f3bf 8f6f 	isb	sy
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	607b      	str	r3, [r7, #4]
}
 800f03c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f03e:	4b0f      	ldr	r3, [pc, #60]	; (800f07c <vPortEnterCritical+0x58>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3301      	adds	r3, #1
 800f044:	4a0d      	ldr	r2, [pc, #52]	; (800f07c <vPortEnterCritical+0x58>)
 800f046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f048:	4b0c      	ldr	r3, [pc, #48]	; (800f07c <vPortEnterCritical+0x58>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d10f      	bne.n	800f070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f050:	4b0b      	ldr	r3, [pc, #44]	; (800f080 <vPortEnterCritical+0x5c>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	b2db      	uxtb	r3, r3
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00a      	beq.n	800f070 <vPortEnterCritical+0x4c>
	__asm volatile
 800f05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05e:	f383 8811 	msr	BASEPRI, r3
 800f062:	f3bf 8f6f 	isb	sy
 800f066:	f3bf 8f4f 	dsb	sy
 800f06a:	603b      	str	r3, [r7, #0]
}
 800f06c:	bf00      	nop
 800f06e:	e7fe      	b.n	800f06e <vPortEnterCritical+0x4a>
	}
}
 800f070:	bf00      	nop
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr
 800f07c:	200000a8 	.word	0x200000a8
 800f080:	e000ed04 	.word	0xe000ed04

0800f084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f08a:	4b12      	ldr	r3, [pc, #72]	; (800f0d4 <vPortExitCritical+0x50>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d10a      	bne.n	800f0a8 <vPortExitCritical+0x24>
	__asm volatile
 800f092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f096:	f383 8811 	msr	BASEPRI, r3
 800f09a:	f3bf 8f6f 	isb	sy
 800f09e:	f3bf 8f4f 	dsb	sy
 800f0a2:	607b      	str	r3, [r7, #4]
}
 800f0a4:	bf00      	nop
 800f0a6:	e7fe      	b.n	800f0a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f0a8:	4b0a      	ldr	r3, [pc, #40]	; (800f0d4 <vPortExitCritical+0x50>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	4a09      	ldr	r2, [pc, #36]	; (800f0d4 <vPortExitCritical+0x50>)
 800f0b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f0b2:	4b08      	ldr	r3, [pc, #32]	; (800f0d4 <vPortExitCritical+0x50>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d105      	bne.n	800f0c6 <vPortExitCritical+0x42>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	f383 8811 	msr	BASEPRI, r3
}
 800f0c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f0c6:	bf00      	nop
 800f0c8:	370c      	adds	r7, #12
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	200000a8 	.word	0x200000a8
	...

0800f0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f0e0:	f3ef 8009 	mrs	r0, PSP
 800f0e4:	f3bf 8f6f 	isb	sy
 800f0e8:	4b15      	ldr	r3, [pc, #84]	; (800f140 <pxCurrentTCBConst>)
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	f01e 0f10 	tst.w	lr, #16
 800f0f0:	bf08      	it	eq
 800f0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0fa:	6010      	str	r0, [r2, #0]
 800f0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f100:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f104:	f380 8811 	msr	BASEPRI, r0
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f7ff f9f2 	bl	800e4f8 <vTaskSwitchContext>
 800f114:	f04f 0000 	mov.w	r0, #0
 800f118:	f380 8811 	msr	BASEPRI, r0
 800f11c:	bc09      	pop	{r0, r3}
 800f11e:	6819      	ldr	r1, [r3, #0]
 800f120:	6808      	ldr	r0, [r1, #0]
 800f122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f126:	f01e 0f10 	tst.w	lr, #16
 800f12a:	bf08      	it	eq
 800f12c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f130:	f380 8809 	msr	PSP, r0
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	f3af 8000 	nop.w

0800f140 <pxCurrentTCBConst>:
 800f140:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f144:	bf00      	nop
 800f146:	bf00      	nop

0800f148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
	__asm volatile
 800f14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f152:	f383 8811 	msr	BASEPRI, r3
 800f156:	f3bf 8f6f 	isb	sy
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	607b      	str	r3, [r7, #4]
}
 800f160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f162:	f7ff f911 	bl	800e388 <xTaskIncrementTick>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d003      	beq.n	800f174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f16c:	4b06      	ldr	r3, [pc, #24]	; (800f188 <SysTick_Handler+0x40>)
 800f16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f172:	601a      	str	r2, [r3, #0]
 800f174:	2300      	movs	r3, #0
 800f176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	f383 8811 	msr	BASEPRI, r3
}
 800f17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f180:	bf00      	nop
 800f182:	3708      	adds	r7, #8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	e000ed04 	.word	0xe000ed04

0800f18c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f18c:	b480      	push	{r7}
 800f18e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f190:	4b0b      	ldr	r3, [pc, #44]	; (800f1c0 <vPortSetupTimerInterrupt+0x34>)
 800f192:	2200      	movs	r2, #0
 800f194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f196:	4b0b      	ldr	r3, [pc, #44]	; (800f1c4 <vPortSetupTimerInterrupt+0x38>)
 800f198:	2200      	movs	r2, #0
 800f19a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f19c:	4b0a      	ldr	r3, [pc, #40]	; (800f1c8 <vPortSetupTimerInterrupt+0x3c>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4a0a      	ldr	r2, [pc, #40]	; (800f1cc <vPortSetupTimerInterrupt+0x40>)
 800f1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1a6:	099b      	lsrs	r3, r3, #6
 800f1a8:	4a09      	ldr	r2, [pc, #36]	; (800f1d0 <vPortSetupTimerInterrupt+0x44>)
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f1ae:	4b04      	ldr	r3, [pc, #16]	; (800f1c0 <vPortSetupTimerInterrupt+0x34>)
 800f1b0:	2207      	movs	r2, #7
 800f1b2:	601a      	str	r2, [r3, #0]
}
 800f1b4:	bf00      	nop
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	e000e010 	.word	0xe000e010
 800f1c4:	e000e018 	.word	0xe000e018
 800f1c8:	2000000c 	.word	0x2000000c
 800f1cc:	10624dd3 	.word	0x10624dd3
 800f1d0:	e000e014 	.word	0xe000e014

0800f1d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f1d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f1e4 <vPortEnableVFP+0x10>
 800f1d8:	6801      	ldr	r1, [r0, #0]
 800f1da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f1de:	6001      	str	r1, [r0, #0]
 800f1e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f1e2:	bf00      	nop
 800f1e4:	e000ed88 	.word	0xe000ed88

0800f1e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f1ee:	f3ef 8305 	mrs	r3, IPSR
 800f1f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2b0f      	cmp	r3, #15
 800f1f8:	d914      	bls.n	800f224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f1fa:	4a17      	ldr	r2, [pc, #92]	; (800f258 <vPortValidateInterruptPriority+0x70>)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	4413      	add	r3, r2
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f204:	4b15      	ldr	r3, [pc, #84]	; (800f25c <vPortValidateInterruptPriority+0x74>)
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	7afa      	ldrb	r2, [r7, #11]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d20a      	bcs.n	800f224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	607b      	str	r3, [r7, #4]
}
 800f220:	bf00      	nop
 800f222:	e7fe      	b.n	800f222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f224:	4b0e      	ldr	r3, [pc, #56]	; (800f260 <vPortValidateInterruptPriority+0x78>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f22c:	4b0d      	ldr	r3, [pc, #52]	; (800f264 <vPortValidateInterruptPriority+0x7c>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	429a      	cmp	r2, r3
 800f232:	d90a      	bls.n	800f24a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f238:	f383 8811 	msr	BASEPRI, r3
 800f23c:	f3bf 8f6f 	isb	sy
 800f240:	f3bf 8f4f 	dsb	sy
 800f244:	603b      	str	r3, [r7, #0]
}
 800f246:	bf00      	nop
 800f248:	e7fe      	b.n	800f248 <vPortValidateInterruptPriority+0x60>
	}
 800f24a:	bf00      	nop
 800f24c:	3714      	adds	r7, #20
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	e000e3f0 	.word	0xe000e3f0
 800f25c:	20000944 	.word	0x20000944
 800f260:	e000ed0c 	.word	0xe000ed0c
 800f264:	20000948 	.word	0x20000948

0800f268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b08a      	sub	sp, #40	; 0x28
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f270:	2300      	movs	r3, #0
 800f272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f274:	f7fe ffde 	bl	800e234 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f278:	4b5b      	ldr	r3, [pc, #364]	; (800f3e8 <pvPortMalloc+0x180>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d101      	bne.n	800f284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f280:	f000 f920 	bl	800f4c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f284:	4b59      	ldr	r3, [pc, #356]	; (800f3ec <pvPortMalloc+0x184>)
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4013      	ands	r3, r2
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f040 8093 	bne.w	800f3b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d01d      	beq.n	800f2d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f298:	2208      	movs	r2, #8
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4413      	add	r3, r2
 800f29e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f003 0307 	and.w	r3, r3, #7
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d014      	beq.n	800f2d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f023 0307 	bic.w	r3, r3, #7
 800f2b0:	3308      	adds	r3, #8
 800f2b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f003 0307 	and.w	r3, r3, #7
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00a      	beq.n	800f2d4 <pvPortMalloc+0x6c>
	__asm volatile
 800f2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	617b      	str	r3, [r7, #20]
}
 800f2d0:	bf00      	nop
 800f2d2:	e7fe      	b.n	800f2d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d06e      	beq.n	800f3b8 <pvPortMalloc+0x150>
 800f2da:	4b45      	ldr	r3, [pc, #276]	; (800f3f0 <pvPortMalloc+0x188>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d869      	bhi.n	800f3b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f2e4:	4b43      	ldr	r3, [pc, #268]	; (800f3f4 <pvPortMalloc+0x18c>)
 800f2e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f2e8:	4b42      	ldr	r3, [pc, #264]	; (800f3f4 <pvPortMalloc+0x18c>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2ee:	e004      	b.n	800f2fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	429a      	cmp	r2, r3
 800f302:	d903      	bls.n	800f30c <pvPortMalloc+0xa4>
 800f304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1f1      	bne.n	800f2f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f30c:	4b36      	ldr	r3, [pc, #216]	; (800f3e8 <pvPortMalloc+0x180>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f312:	429a      	cmp	r2, r3
 800f314:	d050      	beq.n	800f3b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f316:	6a3b      	ldr	r3, [r7, #32]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2208      	movs	r2, #8
 800f31c:	4413      	add	r3, r2
 800f31e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	6a3b      	ldr	r3, [r7, #32]
 800f326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32a:	685a      	ldr	r2, [r3, #4]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	1ad2      	subs	r2, r2, r3
 800f330:	2308      	movs	r3, #8
 800f332:	005b      	lsls	r3, r3, #1
 800f334:	429a      	cmp	r2, r3
 800f336:	d91f      	bls.n	800f378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	4413      	add	r3, r2
 800f33e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	f003 0307 	and.w	r3, r3, #7
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00a      	beq.n	800f360 <pvPortMalloc+0xf8>
	__asm volatile
 800f34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34e:	f383 8811 	msr	BASEPRI, r3
 800f352:	f3bf 8f6f 	isb	sy
 800f356:	f3bf 8f4f 	dsb	sy
 800f35a:	613b      	str	r3, [r7, #16]
}
 800f35c:	bf00      	nop
 800f35e:	e7fe      	b.n	800f35e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f362:	685a      	ldr	r2, [r3, #4]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	1ad2      	subs	r2, r2, r3
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f372:	69b8      	ldr	r0, [r7, #24]
 800f374:	f000 f908 	bl	800f588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f378:	4b1d      	ldr	r3, [pc, #116]	; (800f3f0 <pvPortMalloc+0x188>)
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	1ad3      	subs	r3, r2, r3
 800f382:	4a1b      	ldr	r2, [pc, #108]	; (800f3f0 <pvPortMalloc+0x188>)
 800f384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f386:	4b1a      	ldr	r3, [pc, #104]	; (800f3f0 <pvPortMalloc+0x188>)
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	4b1b      	ldr	r3, [pc, #108]	; (800f3f8 <pvPortMalloc+0x190>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d203      	bcs.n	800f39a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f392:	4b17      	ldr	r3, [pc, #92]	; (800f3f0 <pvPortMalloc+0x188>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4a18      	ldr	r2, [pc, #96]	; (800f3f8 <pvPortMalloc+0x190>)
 800f398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	685a      	ldr	r2, [r3, #4]
 800f39e:	4b13      	ldr	r3, [pc, #76]	; (800f3ec <pvPortMalloc+0x184>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	431a      	orrs	r2, r3
 800f3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f3ae:	4b13      	ldr	r3, [pc, #76]	; (800f3fc <pvPortMalloc+0x194>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	4a11      	ldr	r2, [pc, #68]	; (800f3fc <pvPortMalloc+0x194>)
 800f3b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f3b8:	f7fe ff4a 	bl	800e250 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	f003 0307 	and.w	r3, r3, #7
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00a      	beq.n	800f3dc <pvPortMalloc+0x174>
	__asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ca:	f383 8811 	msr	BASEPRI, r3
 800f3ce:	f3bf 8f6f 	isb	sy
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	60fb      	str	r3, [r7, #12]
}
 800f3d8:	bf00      	nop
 800f3da:	e7fe      	b.n	800f3da <pvPortMalloc+0x172>
	return pvReturn;
 800f3dc:	69fb      	ldr	r3, [r7, #28]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3728      	adds	r7, #40	; 0x28
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	20004554 	.word	0x20004554
 800f3ec:	20004568 	.word	0x20004568
 800f3f0:	20004558 	.word	0x20004558
 800f3f4:	2000454c 	.word	0x2000454c
 800f3f8:	2000455c 	.word	0x2000455c
 800f3fc:	20004560 	.word	0x20004560

0800f400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d04d      	beq.n	800f4ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f412:	2308      	movs	r3, #8
 800f414:	425b      	negs	r3, r3
 800f416:	697a      	ldr	r2, [r7, #20]
 800f418:	4413      	add	r3, r2
 800f41a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	685a      	ldr	r2, [r3, #4]
 800f424:	4b24      	ldr	r3, [pc, #144]	; (800f4b8 <vPortFree+0xb8>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4013      	ands	r3, r2
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d10a      	bne.n	800f444 <vPortFree+0x44>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	60fb      	str	r3, [r7, #12]
}
 800f440:	bf00      	nop
 800f442:	e7fe      	b.n	800f442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00a      	beq.n	800f462 <vPortFree+0x62>
	__asm volatile
 800f44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	60bb      	str	r3, [r7, #8]
}
 800f45e:	bf00      	nop
 800f460:	e7fe      	b.n	800f460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	685a      	ldr	r2, [r3, #4]
 800f466:	4b14      	ldr	r3, [pc, #80]	; (800f4b8 <vPortFree+0xb8>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4013      	ands	r3, r2
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d01e      	beq.n	800f4ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d11a      	bne.n	800f4ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	685a      	ldr	r2, [r3, #4]
 800f47c:	4b0e      	ldr	r3, [pc, #56]	; (800f4b8 <vPortFree+0xb8>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	43db      	mvns	r3, r3
 800f482:	401a      	ands	r2, r3
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f488:	f7fe fed4 	bl	800e234 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	685a      	ldr	r2, [r3, #4]
 800f490:	4b0a      	ldr	r3, [pc, #40]	; (800f4bc <vPortFree+0xbc>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4413      	add	r3, r2
 800f496:	4a09      	ldr	r2, [pc, #36]	; (800f4bc <vPortFree+0xbc>)
 800f498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f49a:	6938      	ldr	r0, [r7, #16]
 800f49c:	f000 f874 	bl	800f588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f4a0:	4b07      	ldr	r3, [pc, #28]	; (800f4c0 <vPortFree+0xc0>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	4a06      	ldr	r2, [pc, #24]	; (800f4c0 <vPortFree+0xc0>)
 800f4a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f4aa:	f7fe fed1 	bl	800e250 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f4ae:	bf00      	nop
 800f4b0:	3718      	adds	r7, #24
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	20004568 	.word	0x20004568
 800f4bc:	20004558 	.word	0x20004558
 800f4c0:	20004564 	.word	0x20004564

0800f4c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f4ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f4ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f4d0:	4b27      	ldr	r3, [pc, #156]	; (800f570 <prvHeapInit+0xac>)
 800f4d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f003 0307 	and.w	r3, r3, #7
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00c      	beq.n	800f4f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3307      	adds	r3, #7
 800f4e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f023 0307 	bic.w	r3, r3, #7
 800f4ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f4ec:	68ba      	ldr	r2, [r7, #8]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	4a1f      	ldr	r2, [pc, #124]	; (800f570 <prvHeapInit+0xac>)
 800f4f4:	4413      	add	r3, r2
 800f4f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f4fc:	4a1d      	ldr	r2, [pc, #116]	; (800f574 <prvHeapInit+0xb0>)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f502:	4b1c      	ldr	r3, [pc, #112]	; (800f574 <prvHeapInit+0xb0>)
 800f504:	2200      	movs	r2, #0
 800f506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	68ba      	ldr	r2, [r7, #8]
 800f50c:	4413      	add	r3, r2
 800f50e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f510:	2208      	movs	r2, #8
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	1a9b      	subs	r3, r3, r2
 800f516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f023 0307 	bic.w	r3, r3, #7
 800f51e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	4a15      	ldr	r2, [pc, #84]	; (800f578 <prvHeapInit+0xb4>)
 800f524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f526:	4b14      	ldr	r3, [pc, #80]	; (800f578 <prvHeapInit+0xb4>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2200      	movs	r2, #0
 800f52c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f52e:	4b12      	ldr	r3, [pc, #72]	; (800f578 <prvHeapInit+0xb4>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2200      	movs	r2, #0
 800f534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	1ad2      	subs	r2, r2, r3
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f544:	4b0c      	ldr	r3, [pc, #48]	; (800f578 <prvHeapInit+0xb4>)
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	4a0a      	ldr	r2, [pc, #40]	; (800f57c <prvHeapInit+0xb8>)
 800f552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	4a09      	ldr	r2, [pc, #36]	; (800f580 <prvHeapInit+0xbc>)
 800f55a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f55c:	4b09      	ldr	r3, [pc, #36]	; (800f584 <prvHeapInit+0xc0>)
 800f55e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f562:	601a      	str	r2, [r3, #0]
}
 800f564:	bf00      	nop
 800f566:	3714      	adds	r7, #20
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr
 800f570:	2000094c 	.word	0x2000094c
 800f574:	2000454c 	.word	0x2000454c
 800f578:	20004554 	.word	0x20004554
 800f57c:	2000455c 	.word	0x2000455c
 800f580:	20004558 	.word	0x20004558
 800f584:	20004568 	.word	0x20004568

0800f588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f588:	b480      	push	{r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f590:	4b28      	ldr	r3, [pc, #160]	; (800f634 <prvInsertBlockIntoFreeList+0xac>)
 800f592:	60fb      	str	r3, [r7, #12]
 800f594:	e002      	b.n	800f59c <prvInsertBlockIntoFreeList+0x14>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	60fb      	str	r3, [r7, #12]
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d8f7      	bhi.n	800f596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d108      	bne.n	800f5ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	685a      	ldr	r2, [r3, #4]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	441a      	add	r2, r3
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	68ba      	ldr	r2, [r7, #8]
 800f5d4:	441a      	add	r2, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d118      	bne.n	800f610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	4b15      	ldr	r3, [pc, #84]	; (800f638 <prvInsertBlockIntoFreeList+0xb0>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d00d      	beq.n	800f606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	685a      	ldr	r2, [r3, #4]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	441a      	add	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	601a      	str	r2, [r3, #0]
 800f604:	e008      	b.n	800f618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f606:	4b0c      	ldr	r3, [pc, #48]	; (800f638 <prvInsertBlockIntoFreeList+0xb0>)
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	601a      	str	r2, [r3, #0]
 800f60e:	e003      	b.n	800f618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f618:	68fa      	ldr	r2, [r7, #12]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d002      	beq.n	800f626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f626:	bf00      	nop
 800f628:	3714      	adds	r7, #20
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop
 800f634:	2000454c 	.word	0x2000454c
 800f638:	20004554 	.word	0x20004554

0800f63c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800f640:	2201      	movs	r2, #1
 800f642:	4912      	ldr	r1, [pc, #72]	; (800f68c <MX_USB_DEVICE_Init+0x50>)
 800f644:	4812      	ldr	r0, [pc, #72]	; (800f690 <MX_USB_DEVICE_Init+0x54>)
 800f646:	f7fc f945 	bl	800b8d4 <USBD_Init>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d001      	beq.n	800f654 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f650:	f7f2 f876 	bl	8001740 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800f654:	490f      	ldr	r1, [pc, #60]	; (800f694 <MX_USB_DEVICE_Init+0x58>)
 800f656:	480e      	ldr	r0, [pc, #56]	; (800f690 <MX_USB_DEVICE_Init+0x54>)
 800f658:	f7fc f96c 	bl	800b934 <USBD_RegisterClass>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d001      	beq.n	800f666 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f662:	f7f2 f86d 	bl	8001740 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800f666:	490c      	ldr	r1, [pc, #48]	; (800f698 <MX_USB_DEVICE_Init+0x5c>)
 800f668:	4809      	ldr	r0, [pc, #36]	; (800f690 <MX_USB_DEVICE_Init+0x54>)
 800f66a:	f7fc f8a3 	bl	800b7b4 <USBD_CDC_RegisterInterface>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d001      	beq.n	800f678 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f674:	f7f2 f864 	bl	8001740 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800f678:	4805      	ldr	r0, [pc, #20]	; (800f690 <MX_USB_DEVICE_Init+0x54>)
 800f67a:	f7fc f991 	bl	800b9a0 <USBD_Start>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d001      	beq.n	800f688 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f684:	f7f2 f85c 	bl	8001740 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f688:	bf00      	nop
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	200000c0 	.word	0x200000c0
 800f690:	2000456c 	.word	0x2000456c
 800f694:	20000028 	.word	0x20000028
 800f698:	200000ac 	.word	0x200000ac

0800f69c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	4905      	ldr	r1, [pc, #20]	; (800f6b8 <CDC_Init_HS+0x1c>)
 800f6a4:	4805      	ldr	r0, [pc, #20]	; (800f6bc <CDC_Init_HS+0x20>)
 800f6a6:	f7fc f89f 	bl	800b7e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800f6aa:	4905      	ldr	r1, [pc, #20]	; (800f6c0 <CDC_Init_HS+0x24>)
 800f6ac:	4803      	ldr	r0, [pc, #12]	; (800f6bc <CDC_Init_HS+0x20>)
 800f6ae:	f7fc f8bd 	bl	800b82c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f6b2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	20005048 	.word	0x20005048
 800f6bc:	2000456c 	.word	0x2000456c
 800f6c0:	20004848 	.word	0x20004848

0800f6c4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800f6c8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	6039      	str	r1, [r7, #0]
 800f6de:	71fb      	strb	r3, [r7, #7]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800f6e4:	79fb      	ldrb	r3, [r7, #7]
 800f6e6:	2b23      	cmp	r3, #35	; 0x23
 800f6e8:	d84a      	bhi.n	800f780 <CDC_Control_HS+0xac>
 800f6ea:	a201      	add	r2, pc, #4	; (adr r2, 800f6f0 <CDC_Control_HS+0x1c>)
 800f6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f0:	0800f781 	.word	0x0800f781
 800f6f4:	0800f781 	.word	0x0800f781
 800f6f8:	0800f781 	.word	0x0800f781
 800f6fc:	0800f781 	.word	0x0800f781
 800f700:	0800f781 	.word	0x0800f781
 800f704:	0800f781 	.word	0x0800f781
 800f708:	0800f781 	.word	0x0800f781
 800f70c:	0800f781 	.word	0x0800f781
 800f710:	0800f781 	.word	0x0800f781
 800f714:	0800f781 	.word	0x0800f781
 800f718:	0800f781 	.word	0x0800f781
 800f71c:	0800f781 	.word	0x0800f781
 800f720:	0800f781 	.word	0x0800f781
 800f724:	0800f781 	.word	0x0800f781
 800f728:	0800f781 	.word	0x0800f781
 800f72c:	0800f781 	.word	0x0800f781
 800f730:	0800f781 	.word	0x0800f781
 800f734:	0800f781 	.word	0x0800f781
 800f738:	0800f781 	.word	0x0800f781
 800f73c:	0800f781 	.word	0x0800f781
 800f740:	0800f781 	.word	0x0800f781
 800f744:	0800f781 	.word	0x0800f781
 800f748:	0800f781 	.word	0x0800f781
 800f74c:	0800f781 	.word	0x0800f781
 800f750:	0800f781 	.word	0x0800f781
 800f754:	0800f781 	.word	0x0800f781
 800f758:	0800f781 	.word	0x0800f781
 800f75c:	0800f781 	.word	0x0800f781
 800f760:	0800f781 	.word	0x0800f781
 800f764:	0800f781 	.word	0x0800f781
 800f768:	0800f781 	.word	0x0800f781
 800f76c:	0800f781 	.word	0x0800f781
 800f770:	0800f781 	.word	0x0800f781
 800f774:	0800f781 	.word	0x0800f781
 800f778:	0800f781 	.word	0x0800f781
 800f77c:	0800f781 	.word	0x0800f781
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f780:	bf00      	nop
  }

  return (USBD_OK);
 800f782:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800f784:	4618      	mov	r0, r3
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	4805      	ldr	r0, [pc, #20]	; (800f7b4 <CDC_Receive_HS+0x24>)
 800f79e:	f7fc f845 	bl	800b82c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800f7a2:	4804      	ldr	r0, [pc, #16]	; (800f7b4 <CDC_Receive_HS+0x24>)
 800f7a4:	f7fc f860 	bl	800b868 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f7a8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	2000456c 	.word	0x2000456c

0800f7b8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b087      	sub	sp, #28
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800f7ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	371c      	adds	r7, #28
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr
	...

0800f7dc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	6039      	str	r1, [r7, #0]
 800f7e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	2212      	movs	r2, #18
 800f7ec:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f7ee:	4b03      	ldr	r3, [pc, #12]	; (800f7fc <USBD_HS_DeviceDescriptor+0x20>)
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr
 800f7fc:	200000dc 	.word	0x200000dc

0800f800 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
 800f806:	4603      	mov	r3, r0
 800f808:	6039      	str	r1, [r7, #0]
 800f80a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2204      	movs	r2, #4
 800f810:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f812:	4b03      	ldr	r3, [pc, #12]	; (800f820 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f814:	4618      	mov	r0, r3
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr
 800f820:	200000f0 	.word	0x200000f0

0800f824 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	4603      	mov	r3, r0
 800f82c:	6039      	str	r1, [r7, #0]
 800f82e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d105      	bne.n	800f842 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f836:	683a      	ldr	r2, [r7, #0]
 800f838:	4907      	ldr	r1, [pc, #28]	; (800f858 <USBD_HS_ProductStrDescriptor+0x34>)
 800f83a:	4808      	ldr	r0, [pc, #32]	; (800f85c <USBD_HS_ProductStrDescriptor+0x38>)
 800f83c:	f7fd fa5c 	bl	800ccf8 <USBD_GetString>
 800f840:	e004      	b.n	800f84c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f842:	683a      	ldr	r2, [r7, #0]
 800f844:	4904      	ldr	r1, [pc, #16]	; (800f858 <USBD_HS_ProductStrDescriptor+0x34>)
 800f846:	4805      	ldr	r0, [pc, #20]	; (800f85c <USBD_HS_ProductStrDescriptor+0x38>)
 800f848:	f7fd fa56 	bl	800ccf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f84c:	4b02      	ldr	r3, [pc, #8]	; (800f858 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	20005848 	.word	0x20005848
 800f85c:	08010c14 	.word	0x08010c14

0800f860 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	4603      	mov	r3, r0
 800f868:	6039      	str	r1, [r7, #0]
 800f86a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f86c:	683a      	ldr	r2, [r7, #0]
 800f86e:	4904      	ldr	r1, [pc, #16]	; (800f880 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f870:	4804      	ldr	r0, [pc, #16]	; (800f884 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f872:	f7fd fa41 	bl	800ccf8 <USBD_GetString>
  return USBD_StrDesc;
 800f876:	4b02      	ldr	r3, [pc, #8]	; (800f880 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	20005848 	.word	0x20005848
 800f884:	08010c2c 	.word	0x08010c2c

0800f888 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	4603      	mov	r3, r0
 800f890:	6039      	str	r1, [r7, #0]
 800f892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	221a      	movs	r2, #26
 800f898:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f89a:	f000 f843 	bl	800f924 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f89e:	4b02      	ldr	r3, [pc, #8]	; (800f8a8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	200000f4 	.word	0x200000f4

0800f8ac <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	6039      	str	r1, [r7, #0]
 800f8b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f8b8:	79fb      	ldrb	r3, [r7, #7]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d105      	bne.n	800f8ca <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	4907      	ldr	r1, [pc, #28]	; (800f8e0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f8c2:	4808      	ldr	r0, [pc, #32]	; (800f8e4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f8c4:	f7fd fa18 	bl	800ccf8 <USBD_GetString>
 800f8c8:	e004      	b.n	800f8d4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f8ca:	683a      	ldr	r2, [r7, #0]
 800f8cc:	4904      	ldr	r1, [pc, #16]	; (800f8e0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f8ce:	4805      	ldr	r0, [pc, #20]	; (800f8e4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f8d0:	f7fd fa12 	bl	800ccf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8d4:	4b02      	ldr	r3, [pc, #8]	; (800f8e0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	20005848 	.word	0x20005848
 800f8e4:	08010c40 	.word	0x08010c40

0800f8e8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	6039      	str	r1, [r7, #0]
 800f8f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f8f4:	79fb      	ldrb	r3, [r7, #7]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d105      	bne.n	800f906 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f8fa:	683a      	ldr	r2, [r7, #0]
 800f8fc:	4907      	ldr	r1, [pc, #28]	; (800f91c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f8fe:	4808      	ldr	r0, [pc, #32]	; (800f920 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f900:	f7fd f9fa 	bl	800ccf8 <USBD_GetString>
 800f904:	e004      	b.n	800f910 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f906:	683a      	ldr	r2, [r7, #0]
 800f908:	4904      	ldr	r1, [pc, #16]	; (800f91c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f90a:	4805      	ldr	r0, [pc, #20]	; (800f920 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f90c:	f7fd f9f4 	bl	800ccf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f910:	4b02      	ldr	r3, [pc, #8]	; (800f91c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f912:	4618      	mov	r0, r3
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	20005848 	.word	0x20005848
 800f920:	08010c4c 	.word	0x08010c4c

0800f924 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f92a:	4b0f      	ldr	r3, [pc, #60]	; (800f968 <Get_SerialNum+0x44>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f930:	4b0e      	ldr	r3, [pc, #56]	; (800f96c <Get_SerialNum+0x48>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f936:	4b0e      	ldr	r3, [pc, #56]	; (800f970 <Get_SerialNum+0x4c>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4413      	add	r3, r2
 800f942:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d009      	beq.n	800f95e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f94a:	2208      	movs	r2, #8
 800f94c:	4909      	ldr	r1, [pc, #36]	; (800f974 <Get_SerialNum+0x50>)
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f000 f814 	bl	800f97c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f954:	2204      	movs	r2, #4
 800f956:	4908      	ldr	r1, [pc, #32]	; (800f978 <Get_SerialNum+0x54>)
 800f958:	68b8      	ldr	r0, [r7, #8]
 800f95a:	f000 f80f 	bl	800f97c <IntToUnicode>
  }
}
 800f95e:	bf00      	nop
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	1fff7a10 	.word	0x1fff7a10
 800f96c:	1fff7a14 	.word	0x1fff7a14
 800f970:	1fff7a18 	.word	0x1fff7a18
 800f974:	200000f6 	.word	0x200000f6
 800f978:	20000106 	.word	0x20000106

0800f97c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b087      	sub	sp, #28
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	4613      	mov	r3, r2
 800f988:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f98a:	2300      	movs	r3, #0
 800f98c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f98e:	2300      	movs	r3, #0
 800f990:	75fb      	strb	r3, [r7, #23]
 800f992:	e027      	b.n	800f9e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	0f1b      	lsrs	r3, r3, #28
 800f998:	2b09      	cmp	r3, #9
 800f99a:	d80b      	bhi.n	800f9b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	0f1b      	lsrs	r3, r3, #28
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	7dfb      	ldrb	r3, [r7, #23]
 800f9a4:	005b      	lsls	r3, r3, #1
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	440b      	add	r3, r1
 800f9ac:	3230      	adds	r2, #48	; 0x30
 800f9ae:	b2d2      	uxtb	r2, r2
 800f9b0:	701a      	strb	r2, [r3, #0]
 800f9b2:	e00a      	b.n	800f9ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	0f1b      	lsrs	r3, r3, #28
 800f9b8:	b2da      	uxtb	r2, r3
 800f9ba:	7dfb      	ldrb	r3, [r7, #23]
 800f9bc:	005b      	lsls	r3, r3, #1
 800f9be:	4619      	mov	r1, r3
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	440b      	add	r3, r1
 800f9c4:	3237      	adds	r2, #55	; 0x37
 800f9c6:	b2d2      	uxtb	r2, r2
 800f9c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	011b      	lsls	r3, r3, #4
 800f9ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f9d0:	7dfb      	ldrb	r3, [r7, #23]
 800f9d2:	005b      	lsls	r3, r3, #1
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	4413      	add	r3, r2
 800f9da:	2200      	movs	r2, #0
 800f9dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f9de:	7dfb      	ldrb	r3, [r7, #23]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	75fb      	strb	r3, [r7, #23]
 800f9e4:	7dfa      	ldrb	r2, [r7, #23]
 800f9e6:	79fb      	ldrb	r3, [r7, #7]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d3d3      	bcc.n	800f994 <IntToUnicode+0x18>
  }
}
 800f9ec:	bf00      	nop
 800f9ee:	bf00      	nop
 800f9f0:	371c      	adds	r7, #28
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr
	...

0800f9fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b08a      	sub	sp, #40	; 0x28
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa04:	f107 0314 	add.w	r3, r7, #20
 800fa08:	2200      	movs	r2, #0
 800fa0a:	601a      	str	r2, [r3, #0]
 800fa0c:	605a      	str	r2, [r3, #4]
 800fa0e:	609a      	str	r2, [r3, #8]
 800fa10:	60da      	str	r2, [r3, #12]
 800fa12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a1d      	ldr	r2, [pc, #116]	; (800fa90 <HAL_PCD_MspInit+0x94>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d134      	bne.n	800fa88 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fa1e:	2300      	movs	r3, #0
 800fa20:	613b      	str	r3, [r7, #16]
 800fa22:	4b1c      	ldr	r3, [pc, #112]	; (800fa94 <HAL_PCD_MspInit+0x98>)
 800fa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa26:	4a1b      	ldr	r2, [pc, #108]	; (800fa94 <HAL_PCD_MspInit+0x98>)
 800fa28:	f043 0302 	orr.w	r3, r3, #2
 800fa2c:	6313      	str	r3, [r2, #48]	; 0x30
 800fa2e:	4b19      	ldr	r3, [pc, #100]	; (800fa94 <HAL_PCD_MspInit+0x98>)
 800fa30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa32:	f003 0302 	and.w	r3, r3, #2
 800fa36:	613b      	str	r3, [r7, #16]
 800fa38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800fa3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800fa3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa40:	2302      	movs	r3, #2
 800fa42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa44:	2300      	movs	r3, #0
 800fa46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa48:	2303      	movs	r3, #3
 800fa4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800fa4c:	230c      	movs	r3, #12
 800fa4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fa50:	f107 0314 	add.w	r3, r7, #20
 800fa54:	4619      	mov	r1, r3
 800fa56:	4810      	ldr	r0, [pc, #64]	; (800fa98 <HAL_PCD_MspInit+0x9c>)
 800fa58:	f7f3 fec2 	bl	80037e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	60fb      	str	r3, [r7, #12]
 800fa60:	4b0c      	ldr	r3, [pc, #48]	; (800fa94 <HAL_PCD_MspInit+0x98>)
 800fa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa64:	4a0b      	ldr	r2, [pc, #44]	; (800fa94 <HAL_PCD_MspInit+0x98>)
 800fa66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa6a:	6313      	str	r3, [r2, #48]	; 0x30
 800fa6c:	4b09      	ldr	r3, [pc, #36]	; (800fa94 <HAL_PCD_MspInit+0x98>)
 800fa6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa74:	60fb      	str	r3, [r7, #12]
 800fa76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800fa78:	2200      	movs	r2, #0
 800fa7a:	2105      	movs	r1, #5
 800fa7c:	204d      	movs	r0, #77	; 0x4d
 800fa7e:	f7f3 fe63 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800fa82:	204d      	movs	r0, #77	; 0x4d
 800fa84:	f7f3 fe7c 	bl	8003780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800fa88:	bf00      	nop
 800fa8a:	3728      	adds	r7, #40	; 0x28
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	40040000 	.word	0x40040000
 800fa94:	40023800 	.word	0x40023800
 800fa98:	40020400 	.word	0x40020400

0800fa9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fab0:	4619      	mov	r1, r3
 800fab2:	4610      	mov	r0, r2
 800fab4:	f7fb ffc1 	bl	800ba3a <USBD_LL_SetupStage>
}
 800fab8:	bf00      	nop
 800faba:	3708      	adds	r7, #8
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	460b      	mov	r3, r1
 800faca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fad2:	78fa      	ldrb	r2, [r7, #3]
 800fad4:	6879      	ldr	r1, [r7, #4]
 800fad6:	4613      	mov	r3, r2
 800fad8:	00db      	lsls	r3, r3, #3
 800fada:	4413      	add	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	440b      	add	r3, r1
 800fae0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	78fb      	ldrb	r3, [r7, #3]
 800fae8:	4619      	mov	r1, r3
 800faea:	f7fb fffb 	bl	800bae4 <USBD_LL_DataOutStage>
}
 800faee:	bf00      	nop
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}

0800faf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faf6:	b580      	push	{r7, lr}
 800faf8:	b082      	sub	sp, #8
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	6078      	str	r0, [r7, #4]
 800fafe:	460b      	mov	r3, r1
 800fb00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fb08:	78fa      	ldrb	r2, [r7, #3]
 800fb0a:	6879      	ldr	r1, [r7, #4]
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	00db      	lsls	r3, r3, #3
 800fb10:	4413      	add	r3, r2
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	440b      	add	r3, r1
 800fb16:	334c      	adds	r3, #76	; 0x4c
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	78fb      	ldrb	r3, [r7, #3]
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	f7fc f894 	bl	800bc4a <USBD_LL_DataInStage>
}
 800fb22:	bf00      	nop
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}

0800fb2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb2a:	b580      	push	{r7, lr}
 800fb2c:	b082      	sub	sp, #8
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fc f9c8 	bl	800bece <USBD_LL_SOF>
}
 800fb3e:	bf00      	nop
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b084      	sub	sp, #16
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d102      	bne.n	800fb60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	73fb      	strb	r3, [r7, #15]
 800fb5e:	e008      	b.n	800fb72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	2b02      	cmp	r3, #2
 800fb66:	d102      	bne.n	800fb6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	73fb      	strb	r3, [r7, #15]
 800fb6c:	e001      	b.n	800fb72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fb6e:	f7f1 fde7 	bl	8001740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb78:	7bfa      	ldrb	r2, [r7, #15]
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fc f968 	bl	800be52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fc f910 	bl	800bdae <USBD_LL_Reset>
}
 800fb8e:	bf00      	nop
 800fb90:	3710      	adds	r7, #16
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
	...

0800fb98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fc f963 	bl	800be72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	6812      	ldr	r2, [r2, #0]
 800fbba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fbbe:	f043 0301 	orr.w	r3, r3, #1
 800fbc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a1b      	ldr	r3, [r3, #32]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d005      	beq.n	800fbd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fbcc:	4b04      	ldr	r3, [pc, #16]	; (800fbe0 <HAL_PCD_SuspendCallback+0x48>)
 800fbce:	691b      	ldr	r3, [r3, #16]
 800fbd0:	4a03      	ldr	r2, [pc, #12]	; (800fbe0 <HAL_PCD_SuspendCallback+0x48>)
 800fbd2:	f043 0306 	orr.w	r3, r3, #6
 800fbd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fbd8:	bf00      	nop
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	e000ed00 	.word	0xe000ed00

0800fbe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fc f953 	bl	800be9e <USBD_LL_Resume>
}
 800fbf8:	bf00      	nop
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc12:	78fa      	ldrb	r2, [r7, #3]
 800fc14:	4611      	mov	r1, r2
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fc f9ab 	bl	800bf72 <USBD_LL_IsoOUTIncomplete>
}
 800fc1c:	bf00      	nop
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc36:	78fa      	ldrb	r2, [r7, #3]
 800fc38:	4611      	mov	r1, r2
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fc f967 	bl	800bf0e <USBD_LL_IsoINIncomplete>
}
 800fc40:	bf00      	nop
 800fc42:	3708      	adds	r7, #8
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fc f9bd 	bl	800bfd6 <USBD_LL_DevConnected>
}
 800fc5c:	bf00      	nop
 800fc5e:	3708      	adds	r7, #8
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fc f9ba 	bl	800bfec <USBD_LL_DevDisconnected>
}
 800fc78:	bf00      	nop
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d140      	bne.n	800fd12 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800fc90:	4a22      	ldr	r2, [pc, #136]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4a20      	ldr	r2, [pc, #128]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fc9c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800fca0:	4b1e      	ldr	r3, [pc, #120]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fca2:	4a1f      	ldr	r2, [pc, #124]	; (800fd20 <USBD_LL_Init+0xa0>)
 800fca4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800fca6:	4b1d      	ldr	r3, [pc, #116]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fca8:	2206      	movs	r2, #6
 800fcaa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800fcac:	4b1b      	ldr	r3, [pc, #108]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fcae:	2202      	movs	r2, #2
 800fcb0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800fcb2:	4b1a      	ldr	r3, [pc, #104]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800fcb8:	4b18      	ldr	r3, [pc, #96]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fcba:	2202      	movs	r2, #2
 800fcbc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800fcbe:	4b17      	ldr	r3, [pc, #92]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800fcc4:	4b15      	ldr	r3, [pc, #84]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800fcca:	4b14      	ldr	r3, [pc, #80]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800fcd0:	4b12      	ldr	r3, [pc, #72]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800fcd6:	4b11      	ldr	r3, [pc, #68]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fcd8:	2200      	movs	r2, #0
 800fcda:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800fcdc:	4b0f      	ldr	r3, [pc, #60]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fcde:	2200      	movs	r2, #0
 800fce0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800fce2:	480e      	ldr	r0, [pc, #56]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fce4:	f7f5 fa39 	bl	800515a <HAL_PCD_Init>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d001      	beq.n	800fcf2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fcee:	f7f1 fd27 	bl	8001740 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800fcf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fcf6:	4809      	ldr	r0, [pc, #36]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fcf8:	f7f6 fc8f 	bl	800661a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800fcfc:	2280      	movs	r2, #128	; 0x80
 800fcfe:	2100      	movs	r1, #0
 800fd00:	4806      	ldr	r0, [pc, #24]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fd02:	f7f6 fc43 	bl	800658c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800fd06:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800fd0a:	2101      	movs	r1, #1
 800fd0c:	4803      	ldr	r0, [pc, #12]	; (800fd1c <USBD_LL_Init+0x9c>)
 800fd0e:	f7f6 fc3d 	bl	800658c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fd12:	2300      	movs	r3, #0
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3708      	adds	r7, #8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	20005a48 	.word	0x20005a48
 800fd20:	40040000 	.word	0x40040000

0800fd24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd30:	2300      	movs	r3, #0
 800fd32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7f5 fb2a 	bl	8005394 <HAL_PCD_Start>
 800fd40:	4603      	mov	r3, r0
 800fd42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd44:	7bfb      	ldrb	r3, [r7, #15]
 800fd46:	4618      	mov	r0, r3
 800fd48:	f000 f942 	bl	800ffd0 <USBD_Get_USB_Status>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd50:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b084      	sub	sp, #16
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
 800fd62:	4608      	mov	r0, r1
 800fd64:	4611      	mov	r1, r2
 800fd66:	461a      	mov	r2, r3
 800fd68:	4603      	mov	r3, r0
 800fd6a:	70fb      	strb	r3, [r7, #3]
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	70bb      	strb	r3, [r7, #2]
 800fd70:	4613      	mov	r3, r2
 800fd72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd74:	2300      	movs	r3, #0
 800fd76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd82:	78bb      	ldrb	r3, [r7, #2]
 800fd84:	883a      	ldrh	r2, [r7, #0]
 800fd86:	78f9      	ldrb	r1, [r7, #3]
 800fd88:	f7f5 fffb 	bl	8005d82 <HAL_PCD_EP_Open>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 f91c 	bl	800ffd0 <USBD_Get_USB_Status>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fda6:	b580      	push	{r7, lr}
 800fda8:	b084      	sub	sp, #16
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	460b      	mov	r3, r1
 800fdb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fdc0:	78fa      	ldrb	r2, [r7, #3]
 800fdc2:	4611      	mov	r1, r2
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7f6 f844 	bl	8005e52 <HAL_PCD_EP_Close>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdce:	7bfb      	ldrb	r3, [r7, #15]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f000 f8fd 	bl	800ffd0 <USBD_Get_USB_Status>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdda:	7bbb      	ldrb	r3, [r7, #14]
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	460b      	mov	r3, r1
 800fdee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fdfe:	78fa      	ldrb	r2, [r7, #3]
 800fe00:	4611      	mov	r1, r2
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7f6 f91c 	bl	8006040 <HAL_PCD_EP_SetStall>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe0c:	7bfb      	ldrb	r3, [r7, #15]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 f8de 	bl	800ffd0 <USBD_Get_USB_Status>
 800fe14:	4603      	mov	r3, r0
 800fe16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe18:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b084      	sub	sp, #16
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe32:	2300      	movs	r3, #0
 800fe34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe3c:	78fa      	ldrb	r2, [r7, #3]
 800fe3e:	4611      	mov	r1, r2
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7f6 f961 	bl	8006108 <HAL_PCD_EP_ClrStall>
 800fe46:	4603      	mov	r3, r0
 800fe48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe4a:	7bfb      	ldrb	r3, [r7, #15]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f000 f8bf 	bl	800ffd0 <USBD_Get_USB_Status>
 800fe52:	4603      	mov	r3, r0
 800fe54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe56:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3710      	adds	r7, #16
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b085      	sub	sp, #20
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	460b      	mov	r3, r1
 800fe6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fe74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	da0b      	bge.n	800fe94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fe7c:	78fb      	ldrb	r3, [r7, #3]
 800fe7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe82:	68f9      	ldr	r1, [r7, #12]
 800fe84:	4613      	mov	r3, r2
 800fe86:	00db      	lsls	r3, r3, #3
 800fe88:	4413      	add	r3, r2
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	440b      	add	r3, r1
 800fe8e:	333e      	adds	r3, #62	; 0x3e
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	e00b      	b.n	800feac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fe94:	78fb      	ldrb	r3, [r7, #3]
 800fe96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe9a:	68f9      	ldr	r1, [r7, #12]
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	00db      	lsls	r3, r3, #3
 800fea0:	4413      	add	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	440b      	add	r3, r1
 800fea6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800feaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800feac:	4618      	mov	r0, r3
 800feae:	3714      	adds	r7, #20
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b084      	sub	sp, #16
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	460b      	mov	r3, r1
 800fec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fec4:	2300      	movs	r3, #0
 800fec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fec8:	2300      	movs	r3, #0
 800feca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fed2:	78fa      	ldrb	r2, [r7, #3]
 800fed4:	4611      	mov	r1, r2
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7f5 ff2e 	bl	8005d38 <HAL_PCD_SetAddress>
 800fedc:	4603      	mov	r3, r0
 800fede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fee0:	7bfb      	ldrb	r3, [r7, #15]
 800fee2:	4618      	mov	r0, r3
 800fee4:	f000 f874 	bl	800ffd0 <USBD_Get_USB_Status>
 800fee8:	4603      	mov	r3, r0
 800feea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800feec:	7bbb      	ldrb	r3, [r7, #14]
}
 800feee:	4618      	mov	r0, r3
 800fef0:	3710      	adds	r7, #16
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}

0800fef6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fef6:	b580      	push	{r7, lr}
 800fef8:	b086      	sub	sp, #24
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	60f8      	str	r0, [r7, #12]
 800fefe:	607a      	str	r2, [r7, #4]
 800ff00:	603b      	str	r3, [r7, #0]
 800ff02:	460b      	mov	r3, r1
 800ff04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff06:	2300      	movs	r3, #0
 800ff08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff14:	7af9      	ldrb	r1, [r7, #11]
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	f7f6 f847 	bl	8005fac <HAL_PCD_EP_Transmit>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff22:	7dfb      	ldrb	r3, [r7, #23]
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 f853 	bl	800ffd0 <USBD_Get_USB_Status>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3718      	adds	r7, #24
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	607a      	str	r2, [r7, #4]
 800ff42:	603b      	str	r3, [r7, #0]
 800ff44:	460b      	mov	r3, r1
 800ff46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff56:	7af9      	ldrb	r1, [r7, #11]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	f7f5 ffc3 	bl	8005ee6 <HAL_PCD_EP_Receive>
 800ff60:	4603      	mov	r3, r0
 800ff62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff64:	7dfb      	ldrb	r3, [r7, #23]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f000 f832 	bl	800ffd0 <USBD_Get_USB_Status>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff70:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3718      	adds	r7, #24
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}

0800ff7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff7a:	b580      	push	{r7, lr}
 800ff7c:	b082      	sub	sp, #8
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	6078      	str	r0, [r7, #4]
 800ff82:	460b      	mov	r3, r1
 800ff84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff8c:	78fa      	ldrb	r2, [r7, #3]
 800ff8e:	4611      	mov	r1, r2
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7f5 fff3 	bl	8005f7c <HAL_PCD_EP_GetRxCount>
 800ff96:	4603      	mov	r3, r0
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ffa8:	4b03      	ldr	r3, [pc, #12]	; (800ffb8 <USBD_static_malloc+0x18>)
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	370c      	adds	r7, #12
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	20005f54 	.word	0x20005f54

0800ffbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]

}
 800ffc4:	bf00      	nop
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b085      	sub	sp, #20
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ffde:	79fb      	ldrb	r3, [r7, #7]
 800ffe0:	2b03      	cmp	r3, #3
 800ffe2:	d817      	bhi.n	8010014 <USBD_Get_USB_Status+0x44>
 800ffe4:	a201      	add	r2, pc, #4	; (adr r2, 800ffec <USBD_Get_USB_Status+0x1c>)
 800ffe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffea:	bf00      	nop
 800ffec:	0800fffd 	.word	0x0800fffd
 800fff0:	08010003 	.word	0x08010003
 800fff4:	08010009 	.word	0x08010009
 800fff8:	0801000f 	.word	0x0801000f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	73fb      	strb	r3, [r7, #15]
    break;
 8010000:	e00b      	b.n	801001a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010002:	2303      	movs	r3, #3
 8010004:	73fb      	strb	r3, [r7, #15]
    break;
 8010006:	e008      	b.n	801001a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010008:	2301      	movs	r3, #1
 801000a:	73fb      	strb	r3, [r7, #15]
    break;
 801000c:	e005      	b.n	801001a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801000e:	2303      	movs	r3, #3
 8010010:	73fb      	strb	r3, [r7, #15]
    break;
 8010012:	e002      	b.n	801001a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010014:	2303      	movs	r3, #3
 8010016:	73fb      	strb	r3, [r7, #15]
    break;
 8010018:	bf00      	nop
  }
  return usb_status;
 801001a:	7bfb      	ldrb	r3, [r7, #15]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3714      	adds	r7, #20
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr

08010028 <__errno>:
 8010028:	4b01      	ldr	r3, [pc, #4]	; (8010030 <__errno+0x8>)
 801002a:	6818      	ldr	r0, [r3, #0]
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop
 8010030:	20000110 	.word	0x20000110

08010034 <__libc_init_array>:
 8010034:	b570      	push	{r4, r5, r6, lr}
 8010036:	4d0d      	ldr	r5, [pc, #52]	; (801006c <__libc_init_array+0x38>)
 8010038:	4c0d      	ldr	r4, [pc, #52]	; (8010070 <__libc_init_array+0x3c>)
 801003a:	1b64      	subs	r4, r4, r5
 801003c:	10a4      	asrs	r4, r4, #2
 801003e:	2600      	movs	r6, #0
 8010040:	42a6      	cmp	r6, r4
 8010042:	d109      	bne.n	8010058 <__libc_init_array+0x24>
 8010044:	4d0b      	ldr	r5, [pc, #44]	; (8010074 <__libc_init_array+0x40>)
 8010046:	4c0c      	ldr	r4, [pc, #48]	; (8010078 <__libc_init_array+0x44>)
 8010048:	f000 fcf8 	bl	8010a3c <_init>
 801004c:	1b64      	subs	r4, r4, r5
 801004e:	10a4      	asrs	r4, r4, #2
 8010050:	2600      	movs	r6, #0
 8010052:	42a6      	cmp	r6, r4
 8010054:	d105      	bne.n	8010062 <__libc_init_array+0x2e>
 8010056:	bd70      	pop	{r4, r5, r6, pc}
 8010058:	f855 3b04 	ldr.w	r3, [r5], #4
 801005c:	4798      	blx	r3
 801005e:	3601      	adds	r6, #1
 8010060:	e7ee      	b.n	8010040 <__libc_init_array+0xc>
 8010062:	f855 3b04 	ldr.w	r3, [r5], #4
 8010066:	4798      	blx	r3
 8010068:	3601      	adds	r6, #1
 801006a:	e7f2      	b.n	8010052 <__libc_init_array+0x1e>
 801006c:	08010d10 	.word	0x08010d10
 8010070:	08010d10 	.word	0x08010d10
 8010074:	08010d10 	.word	0x08010d10
 8010078:	08010d14 	.word	0x08010d14

0801007c <__retarget_lock_acquire_recursive>:
 801007c:	4770      	bx	lr

0801007e <__retarget_lock_release_recursive>:
 801007e:	4770      	bx	lr

08010080 <memcpy>:
 8010080:	440a      	add	r2, r1
 8010082:	4291      	cmp	r1, r2
 8010084:	f100 33ff 	add.w	r3, r0, #4294967295
 8010088:	d100      	bne.n	801008c <memcpy+0xc>
 801008a:	4770      	bx	lr
 801008c:	b510      	push	{r4, lr}
 801008e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010096:	4291      	cmp	r1, r2
 8010098:	d1f9      	bne.n	801008e <memcpy+0xe>
 801009a:	bd10      	pop	{r4, pc}

0801009c <memset>:
 801009c:	4402      	add	r2, r0
 801009e:	4603      	mov	r3, r0
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d100      	bne.n	80100a6 <memset+0xa>
 80100a4:	4770      	bx	lr
 80100a6:	f803 1b01 	strb.w	r1, [r3], #1
 80100aa:	e7f9      	b.n	80100a0 <memset+0x4>

080100ac <sbrk_aligned>:
 80100ac:	b570      	push	{r4, r5, r6, lr}
 80100ae:	4e0e      	ldr	r6, [pc, #56]	; (80100e8 <sbrk_aligned+0x3c>)
 80100b0:	460c      	mov	r4, r1
 80100b2:	6831      	ldr	r1, [r6, #0]
 80100b4:	4605      	mov	r5, r0
 80100b6:	b911      	cbnz	r1, 80100be <sbrk_aligned+0x12>
 80100b8:	f000 f8f6 	bl	80102a8 <_sbrk_r>
 80100bc:	6030      	str	r0, [r6, #0]
 80100be:	4621      	mov	r1, r4
 80100c0:	4628      	mov	r0, r5
 80100c2:	f000 f8f1 	bl	80102a8 <_sbrk_r>
 80100c6:	1c43      	adds	r3, r0, #1
 80100c8:	d00a      	beq.n	80100e0 <sbrk_aligned+0x34>
 80100ca:	1cc4      	adds	r4, r0, #3
 80100cc:	f024 0403 	bic.w	r4, r4, #3
 80100d0:	42a0      	cmp	r0, r4
 80100d2:	d007      	beq.n	80100e4 <sbrk_aligned+0x38>
 80100d4:	1a21      	subs	r1, r4, r0
 80100d6:	4628      	mov	r0, r5
 80100d8:	f000 f8e6 	bl	80102a8 <_sbrk_r>
 80100dc:	3001      	adds	r0, #1
 80100de:	d101      	bne.n	80100e4 <sbrk_aligned+0x38>
 80100e0:	f04f 34ff 	mov.w	r4, #4294967295
 80100e4:	4620      	mov	r0, r4
 80100e6:	bd70      	pop	{r4, r5, r6, pc}
 80100e8:	2000617c 	.word	0x2000617c

080100ec <_malloc_r>:
 80100ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100f0:	1ccd      	adds	r5, r1, #3
 80100f2:	f025 0503 	bic.w	r5, r5, #3
 80100f6:	3508      	adds	r5, #8
 80100f8:	2d0c      	cmp	r5, #12
 80100fa:	bf38      	it	cc
 80100fc:	250c      	movcc	r5, #12
 80100fe:	2d00      	cmp	r5, #0
 8010100:	4607      	mov	r7, r0
 8010102:	db01      	blt.n	8010108 <_malloc_r+0x1c>
 8010104:	42a9      	cmp	r1, r5
 8010106:	d905      	bls.n	8010114 <_malloc_r+0x28>
 8010108:	230c      	movs	r3, #12
 801010a:	603b      	str	r3, [r7, #0]
 801010c:	2600      	movs	r6, #0
 801010e:	4630      	mov	r0, r6
 8010110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010114:	4e2e      	ldr	r6, [pc, #184]	; (80101d0 <_malloc_r+0xe4>)
 8010116:	f000 f8f7 	bl	8010308 <__malloc_lock>
 801011a:	6833      	ldr	r3, [r6, #0]
 801011c:	461c      	mov	r4, r3
 801011e:	bb34      	cbnz	r4, 801016e <_malloc_r+0x82>
 8010120:	4629      	mov	r1, r5
 8010122:	4638      	mov	r0, r7
 8010124:	f7ff ffc2 	bl	80100ac <sbrk_aligned>
 8010128:	1c43      	adds	r3, r0, #1
 801012a:	4604      	mov	r4, r0
 801012c:	d14d      	bne.n	80101ca <_malloc_r+0xde>
 801012e:	6834      	ldr	r4, [r6, #0]
 8010130:	4626      	mov	r6, r4
 8010132:	2e00      	cmp	r6, #0
 8010134:	d140      	bne.n	80101b8 <_malloc_r+0xcc>
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	4631      	mov	r1, r6
 801013a:	4638      	mov	r0, r7
 801013c:	eb04 0803 	add.w	r8, r4, r3
 8010140:	f000 f8b2 	bl	80102a8 <_sbrk_r>
 8010144:	4580      	cmp	r8, r0
 8010146:	d13a      	bne.n	80101be <_malloc_r+0xd2>
 8010148:	6821      	ldr	r1, [r4, #0]
 801014a:	3503      	adds	r5, #3
 801014c:	1a6d      	subs	r5, r5, r1
 801014e:	f025 0503 	bic.w	r5, r5, #3
 8010152:	3508      	adds	r5, #8
 8010154:	2d0c      	cmp	r5, #12
 8010156:	bf38      	it	cc
 8010158:	250c      	movcc	r5, #12
 801015a:	4629      	mov	r1, r5
 801015c:	4638      	mov	r0, r7
 801015e:	f7ff ffa5 	bl	80100ac <sbrk_aligned>
 8010162:	3001      	adds	r0, #1
 8010164:	d02b      	beq.n	80101be <_malloc_r+0xd2>
 8010166:	6823      	ldr	r3, [r4, #0]
 8010168:	442b      	add	r3, r5
 801016a:	6023      	str	r3, [r4, #0]
 801016c:	e00e      	b.n	801018c <_malloc_r+0xa0>
 801016e:	6822      	ldr	r2, [r4, #0]
 8010170:	1b52      	subs	r2, r2, r5
 8010172:	d41e      	bmi.n	80101b2 <_malloc_r+0xc6>
 8010174:	2a0b      	cmp	r2, #11
 8010176:	d916      	bls.n	80101a6 <_malloc_r+0xba>
 8010178:	1961      	adds	r1, r4, r5
 801017a:	42a3      	cmp	r3, r4
 801017c:	6025      	str	r5, [r4, #0]
 801017e:	bf18      	it	ne
 8010180:	6059      	strne	r1, [r3, #4]
 8010182:	6863      	ldr	r3, [r4, #4]
 8010184:	bf08      	it	eq
 8010186:	6031      	streq	r1, [r6, #0]
 8010188:	5162      	str	r2, [r4, r5]
 801018a:	604b      	str	r3, [r1, #4]
 801018c:	4638      	mov	r0, r7
 801018e:	f104 060b 	add.w	r6, r4, #11
 8010192:	f000 f8bf 	bl	8010314 <__malloc_unlock>
 8010196:	f026 0607 	bic.w	r6, r6, #7
 801019a:	1d23      	adds	r3, r4, #4
 801019c:	1af2      	subs	r2, r6, r3
 801019e:	d0b6      	beq.n	801010e <_malloc_r+0x22>
 80101a0:	1b9b      	subs	r3, r3, r6
 80101a2:	50a3      	str	r3, [r4, r2]
 80101a4:	e7b3      	b.n	801010e <_malloc_r+0x22>
 80101a6:	6862      	ldr	r2, [r4, #4]
 80101a8:	42a3      	cmp	r3, r4
 80101aa:	bf0c      	ite	eq
 80101ac:	6032      	streq	r2, [r6, #0]
 80101ae:	605a      	strne	r2, [r3, #4]
 80101b0:	e7ec      	b.n	801018c <_malloc_r+0xa0>
 80101b2:	4623      	mov	r3, r4
 80101b4:	6864      	ldr	r4, [r4, #4]
 80101b6:	e7b2      	b.n	801011e <_malloc_r+0x32>
 80101b8:	4634      	mov	r4, r6
 80101ba:	6876      	ldr	r6, [r6, #4]
 80101bc:	e7b9      	b.n	8010132 <_malloc_r+0x46>
 80101be:	230c      	movs	r3, #12
 80101c0:	603b      	str	r3, [r7, #0]
 80101c2:	4638      	mov	r0, r7
 80101c4:	f000 f8a6 	bl	8010314 <__malloc_unlock>
 80101c8:	e7a1      	b.n	801010e <_malloc_r+0x22>
 80101ca:	6025      	str	r5, [r4, #0]
 80101cc:	e7de      	b.n	801018c <_malloc_r+0xa0>
 80101ce:	bf00      	nop
 80101d0:	20006178 	.word	0x20006178

080101d4 <cleanup_glue>:
 80101d4:	b538      	push	{r3, r4, r5, lr}
 80101d6:	460c      	mov	r4, r1
 80101d8:	6809      	ldr	r1, [r1, #0]
 80101da:	4605      	mov	r5, r0
 80101dc:	b109      	cbz	r1, 80101e2 <cleanup_glue+0xe>
 80101de:	f7ff fff9 	bl	80101d4 <cleanup_glue>
 80101e2:	4621      	mov	r1, r4
 80101e4:	4628      	mov	r0, r5
 80101e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101ea:	f000 b899 	b.w	8010320 <_free_r>
	...

080101f0 <_reclaim_reent>:
 80101f0:	4b2c      	ldr	r3, [pc, #176]	; (80102a4 <_reclaim_reent+0xb4>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4283      	cmp	r3, r0
 80101f6:	b570      	push	{r4, r5, r6, lr}
 80101f8:	4604      	mov	r4, r0
 80101fa:	d051      	beq.n	80102a0 <_reclaim_reent+0xb0>
 80101fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80101fe:	b143      	cbz	r3, 8010212 <_reclaim_reent+0x22>
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d14a      	bne.n	801029c <_reclaim_reent+0xac>
 8010206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010208:	6819      	ldr	r1, [r3, #0]
 801020a:	b111      	cbz	r1, 8010212 <_reclaim_reent+0x22>
 801020c:	4620      	mov	r0, r4
 801020e:	f000 f887 	bl	8010320 <_free_r>
 8010212:	6961      	ldr	r1, [r4, #20]
 8010214:	b111      	cbz	r1, 801021c <_reclaim_reent+0x2c>
 8010216:	4620      	mov	r0, r4
 8010218:	f000 f882 	bl	8010320 <_free_r>
 801021c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801021e:	b111      	cbz	r1, 8010226 <_reclaim_reent+0x36>
 8010220:	4620      	mov	r0, r4
 8010222:	f000 f87d 	bl	8010320 <_free_r>
 8010226:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010228:	b111      	cbz	r1, 8010230 <_reclaim_reent+0x40>
 801022a:	4620      	mov	r0, r4
 801022c:	f000 f878 	bl	8010320 <_free_r>
 8010230:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010232:	b111      	cbz	r1, 801023a <_reclaim_reent+0x4a>
 8010234:	4620      	mov	r0, r4
 8010236:	f000 f873 	bl	8010320 <_free_r>
 801023a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801023c:	b111      	cbz	r1, 8010244 <_reclaim_reent+0x54>
 801023e:	4620      	mov	r0, r4
 8010240:	f000 f86e 	bl	8010320 <_free_r>
 8010244:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010246:	b111      	cbz	r1, 801024e <_reclaim_reent+0x5e>
 8010248:	4620      	mov	r0, r4
 801024a:	f000 f869 	bl	8010320 <_free_r>
 801024e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010250:	b111      	cbz	r1, 8010258 <_reclaim_reent+0x68>
 8010252:	4620      	mov	r0, r4
 8010254:	f000 f864 	bl	8010320 <_free_r>
 8010258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801025a:	b111      	cbz	r1, 8010262 <_reclaim_reent+0x72>
 801025c:	4620      	mov	r0, r4
 801025e:	f000 f85f 	bl	8010320 <_free_r>
 8010262:	69a3      	ldr	r3, [r4, #24]
 8010264:	b1e3      	cbz	r3, 80102a0 <_reclaim_reent+0xb0>
 8010266:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010268:	4620      	mov	r0, r4
 801026a:	4798      	blx	r3
 801026c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801026e:	b1b9      	cbz	r1, 80102a0 <_reclaim_reent+0xb0>
 8010270:	4620      	mov	r0, r4
 8010272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010276:	f7ff bfad 	b.w	80101d4 <cleanup_glue>
 801027a:	5949      	ldr	r1, [r1, r5]
 801027c:	b941      	cbnz	r1, 8010290 <_reclaim_reent+0xa0>
 801027e:	3504      	adds	r5, #4
 8010280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010282:	2d80      	cmp	r5, #128	; 0x80
 8010284:	68d9      	ldr	r1, [r3, #12]
 8010286:	d1f8      	bne.n	801027a <_reclaim_reent+0x8a>
 8010288:	4620      	mov	r0, r4
 801028a:	f000 f849 	bl	8010320 <_free_r>
 801028e:	e7ba      	b.n	8010206 <_reclaim_reent+0x16>
 8010290:	680e      	ldr	r6, [r1, #0]
 8010292:	4620      	mov	r0, r4
 8010294:	f000 f844 	bl	8010320 <_free_r>
 8010298:	4631      	mov	r1, r6
 801029a:	e7ef      	b.n	801027c <_reclaim_reent+0x8c>
 801029c:	2500      	movs	r5, #0
 801029e:	e7ef      	b.n	8010280 <_reclaim_reent+0x90>
 80102a0:	bd70      	pop	{r4, r5, r6, pc}
 80102a2:	bf00      	nop
 80102a4:	20000110 	.word	0x20000110

080102a8 <_sbrk_r>:
 80102a8:	b538      	push	{r3, r4, r5, lr}
 80102aa:	4d06      	ldr	r5, [pc, #24]	; (80102c4 <_sbrk_r+0x1c>)
 80102ac:	2300      	movs	r3, #0
 80102ae:	4604      	mov	r4, r0
 80102b0:	4608      	mov	r0, r1
 80102b2:	602b      	str	r3, [r5, #0]
 80102b4:	f7f1 fd88 	bl	8001dc8 <_sbrk>
 80102b8:	1c43      	adds	r3, r0, #1
 80102ba:	d102      	bne.n	80102c2 <_sbrk_r+0x1a>
 80102bc:	682b      	ldr	r3, [r5, #0]
 80102be:	b103      	cbz	r3, 80102c2 <_sbrk_r+0x1a>
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	bd38      	pop	{r3, r4, r5, pc}
 80102c4:	20006180 	.word	0x20006180

080102c8 <siprintf>:
 80102c8:	b40e      	push	{r1, r2, r3}
 80102ca:	b500      	push	{lr}
 80102cc:	b09c      	sub	sp, #112	; 0x70
 80102ce:	ab1d      	add	r3, sp, #116	; 0x74
 80102d0:	9002      	str	r0, [sp, #8]
 80102d2:	9006      	str	r0, [sp, #24]
 80102d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80102d8:	4809      	ldr	r0, [pc, #36]	; (8010300 <siprintf+0x38>)
 80102da:	9107      	str	r1, [sp, #28]
 80102dc:	9104      	str	r1, [sp, #16]
 80102de:	4909      	ldr	r1, [pc, #36]	; (8010304 <siprintf+0x3c>)
 80102e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80102e4:	9105      	str	r1, [sp, #20]
 80102e6:	6800      	ldr	r0, [r0, #0]
 80102e8:	9301      	str	r3, [sp, #4]
 80102ea:	a902      	add	r1, sp, #8
 80102ec:	f000 f8c0 	bl	8010470 <_svfiprintf_r>
 80102f0:	9b02      	ldr	r3, [sp, #8]
 80102f2:	2200      	movs	r2, #0
 80102f4:	701a      	strb	r2, [r3, #0]
 80102f6:	b01c      	add	sp, #112	; 0x70
 80102f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80102fc:	b003      	add	sp, #12
 80102fe:	4770      	bx	lr
 8010300:	20000110 	.word	0x20000110
 8010304:	ffff0208 	.word	0xffff0208

08010308 <__malloc_lock>:
 8010308:	4801      	ldr	r0, [pc, #4]	; (8010310 <__malloc_lock+0x8>)
 801030a:	f7ff beb7 	b.w	801007c <__retarget_lock_acquire_recursive>
 801030e:	bf00      	nop
 8010310:	20006174 	.word	0x20006174

08010314 <__malloc_unlock>:
 8010314:	4801      	ldr	r0, [pc, #4]	; (801031c <__malloc_unlock+0x8>)
 8010316:	f7ff beb2 	b.w	801007e <__retarget_lock_release_recursive>
 801031a:	bf00      	nop
 801031c:	20006174 	.word	0x20006174

08010320 <_free_r>:
 8010320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010322:	2900      	cmp	r1, #0
 8010324:	d044      	beq.n	80103b0 <_free_r+0x90>
 8010326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801032a:	9001      	str	r0, [sp, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	f1a1 0404 	sub.w	r4, r1, #4
 8010332:	bfb8      	it	lt
 8010334:	18e4      	addlt	r4, r4, r3
 8010336:	f7ff ffe7 	bl	8010308 <__malloc_lock>
 801033a:	4a1e      	ldr	r2, [pc, #120]	; (80103b4 <_free_r+0x94>)
 801033c:	9801      	ldr	r0, [sp, #4]
 801033e:	6813      	ldr	r3, [r2, #0]
 8010340:	b933      	cbnz	r3, 8010350 <_free_r+0x30>
 8010342:	6063      	str	r3, [r4, #4]
 8010344:	6014      	str	r4, [r2, #0]
 8010346:	b003      	add	sp, #12
 8010348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801034c:	f7ff bfe2 	b.w	8010314 <__malloc_unlock>
 8010350:	42a3      	cmp	r3, r4
 8010352:	d908      	bls.n	8010366 <_free_r+0x46>
 8010354:	6825      	ldr	r5, [r4, #0]
 8010356:	1961      	adds	r1, r4, r5
 8010358:	428b      	cmp	r3, r1
 801035a:	bf01      	itttt	eq
 801035c:	6819      	ldreq	r1, [r3, #0]
 801035e:	685b      	ldreq	r3, [r3, #4]
 8010360:	1949      	addeq	r1, r1, r5
 8010362:	6021      	streq	r1, [r4, #0]
 8010364:	e7ed      	b.n	8010342 <_free_r+0x22>
 8010366:	461a      	mov	r2, r3
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	b10b      	cbz	r3, 8010370 <_free_r+0x50>
 801036c:	42a3      	cmp	r3, r4
 801036e:	d9fa      	bls.n	8010366 <_free_r+0x46>
 8010370:	6811      	ldr	r1, [r2, #0]
 8010372:	1855      	adds	r5, r2, r1
 8010374:	42a5      	cmp	r5, r4
 8010376:	d10b      	bne.n	8010390 <_free_r+0x70>
 8010378:	6824      	ldr	r4, [r4, #0]
 801037a:	4421      	add	r1, r4
 801037c:	1854      	adds	r4, r2, r1
 801037e:	42a3      	cmp	r3, r4
 8010380:	6011      	str	r1, [r2, #0]
 8010382:	d1e0      	bne.n	8010346 <_free_r+0x26>
 8010384:	681c      	ldr	r4, [r3, #0]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	6053      	str	r3, [r2, #4]
 801038a:	4421      	add	r1, r4
 801038c:	6011      	str	r1, [r2, #0]
 801038e:	e7da      	b.n	8010346 <_free_r+0x26>
 8010390:	d902      	bls.n	8010398 <_free_r+0x78>
 8010392:	230c      	movs	r3, #12
 8010394:	6003      	str	r3, [r0, #0]
 8010396:	e7d6      	b.n	8010346 <_free_r+0x26>
 8010398:	6825      	ldr	r5, [r4, #0]
 801039a:	1961      	adds	r1, r4, r5
 801039c:	428b      	cmp	r3, r1
 801039e:	bf04      	itt	eq
 80103a0:	6819      	ldreq	r1, [r3, #0]
 80103a2:	685b      	ldreq	r3, [r3, #4]
 80103a4:	6063      	str	r3, [r4, #4]
 80103a6:	bf04      	itt	eq
 80103a8:	1949      	addeq	r1, r1, r5
 80103aa:	6021      	streq	r1, [r4, #0]
 80103ac:	6054      	str	r4, [r2, #4]
 80103ae:	e7ca      	b.n	8010346 <_free_r+0x26>
 80103b0:	b003      	add	sp, #12
 80103b2:	bd30      	pop	{r4, r5, pc}
 80103b4:	20006178 	.word	0x20006178

080103b8 <__ssputs_r>:
 80103b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103bc:	688e      	ldr	r6, [r1, #8]
 80103be:	429e      	cmp	r6, r3
 80103c0:	4682      	mov	sl, r0
 80103c2:	460c      	mov	r4, r1
 80103c4:	4690      	mov	r8, r2
 80103c6:	461f      	mov	r7, r3
 80103c8:	d838      	bhi.n	801043c <__ssputs_r+0x84>
 80103ca:	898a      	ldrh	r2, [r1, #12]
 80103cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80103d0:	d032      	beq.n	8010438 <__ssputs_r+0x80>
 80103d2:	6825      	ldr	r5, [r4, #0]
 80103d4:	6909      	ldr	r1, [r1, #16]
 80103d6:	eba5 0901 	sub.w	r9, r5, r1
 80103da:	6965      	ldr	r5, [r4, #20]
 80103dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103e4:	3301      	adds	r3, #1
 80103e6:	444b      	add	r3, r9
 80103e8:	106d      	asrs	r5, r5, #1
 80103ea:	429d      	cmp	r5, r3
 80103ec:	bf38      	it	cc
 80103ee:	461d      	movcc	r5, r3
 80103f0:	0553      	lsls	r3, r2, #21
 80103f2:	d531      	bpl.n	8010458 <__ssputs_r+0xa0>
 80103f4:	4629      	mov	r1, r5
 80103f6:	f7ff fe79 	bl	80100ec <_malloc_r>
 80103fa:	4606      	mov	r6, r0
 80103fc:	b950      	cbnz	r0, 8010414 <__ssputs_r+0x5c>
 80103fe:	230c      	movs	r3, #12
 8010400:	f8ca 3000 	str.w	r3, [sl]
 8010404:	89a3      	ldrh	r3, [r4, #12]
 8010406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801040a:	81a3      	strh	r3, [r4, #12]
 801040c:	f04f 30ff 	mov.w	r0, #4294967295
 8010410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010414:	6921      	ldr	r1, [r4, #16]
 8010416:	464a      	mov	r2, r9
 8010418:	f7ff fe32 	bl	8010080 <memcpy>
 801041c:	89a3      	ldrh	r3, [r4, #12]
 801041e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010426:	81a3      	strh	r3, [r4, #12]
 8010428:	6126      	str	r6, [r4, #16]
 801042a:	6165      	str	r5, [r4, #20]
 801042c:	444e      	add	r6, r9
 801042e:	eba5 0509 	sub.w	r5, r5, r9
 8010432:	6026      	str	r6, [r4, #0]
 8010434:	60a5      	str	r5, [r4, #8]
 8010436:	463e      	mov	r6, r7
 8010438:	42be      	cmp	r6, r7
 801043a:	d900      	bls.n	801043e <__ssputs_r+0x86>
 801043c:	463e      	mov	r6, r7
 801043e:	6820      	ldr	r0, [r4, #0]
 8010440:	4632      	mov	r2, r6
 8010442:	4641      	mov	r1, r8
 8010444:	f000 faa8 	bl	8010998 <memmove>
 8010448:	68a3      	ldr	r3, [r4, #8]
 801044a:	1b9b      	subs	r3, r3, r6
 801044c:	60a3      	str	r3, [r4, #8]
 801044e:	6823      	ldr	r3, [r4, #0]
 8010450:	4433      	add	r3, r6
 8010452:	6023      	str	r3, [r4, #0]
 8010454:	2000      	movs	r0, #0
 8010456:	e7db      	b.n	8010410 <__ssputs_r+0x58>
 8010458:	462a      	mov	r2, r5
 801045a:	f000 fab7 	bl	80109cc <_realloc_r>
 801045e:	4606      	mov	r6, r0
 8010460:	2800      	cmp	r0, #0
 8010462:	d1e1      	bne.n	8010428 <__ssputs_r+0x70>
 8010464:	6921      	ldr	r1, [r4, #16]
 8010466:	4650      	mov	r0, sl
 8010468:	f7ff ff5a 	bl	8010320 <_free_r>
 801046c:	e7c7      	b.n	80103fe <__ssputs_r+0x46>
	...

08010470 <_svfiprintf_r>:
 8010470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010474:	4698      	mov	r8, r3
 8010476:	898b      	ldrh	r3, [r1, #12]
 8010478:	061b      	lsls	r3, r3, #24
 801047a:	b09d      	sub	sp, #116	; 0x74
 801047c:	4607      	mov	r7, r0
 801047e:	460d      	mov	r5, r1
 8010480:	4614      	mov	r4, r2
 8010482:	d50e      	bpl.n	80104a2 <_svfiprintf_r+0x32>
 8010484:	690b      	ldr	r3, [r1, #16]
 8010486:	b963      	cbnz	r3, 80104a2 <_svfiprintf_r+0x32>
 8010488:	2140      	movs	r1, #64	; 0x40
 801048a:	f7ff fe2f 	bl	80100ec <_malloc_r>
 801048e:	6028      	str	r0, [r5, #0]
 8010490:	6128      	str	r0, [r5, #16]
 8010492:	b920      	cbnz	r0, 801049e <_svfiprintf_r+0x2e>
 8010494:	230c      	movs	r3, #12
 8010496:	603b      	str	r3, [r7, #0]
 8010498:	f04f 30ff 	mov.w	r0, #4294967295
 801049c:	e0d1      	b.n	8010642 <_svfiprintf_r+0x1d2>
 801049e:	2340      	movs	r3, #64	; 0x40
 80104a0:	616b      	str	r3, [r5, #20]
 80104a2:	2300      	movs	r3, #0
 80104a4:	9309      	str	r3, [sp, #36]	; 0x24
 80104a6:	2320      	movs	r3, #32
 80104a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80104b0:	2330      	movs	r3, #48	; 0x30
 80104b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801065c <_svfiprintf_r+0x1ec>
 80104b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104ba:	f04f 0901 	mov.w	r9, #1
 80104be:	4623      	mov	r3, r4
 80104c0:	469a      	mov	sl, r3
 80104c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104c6:	b10a      	cbz	r2, 80104cc <_svfiprintf_r+0x5c>
 80104c8:	2a25      	cmp	r2, #37	; 0x25
 80104ca:	d1f9      	bne.n	80104c0 <_svfiprintf_r+0x50>
 80104cc:	ebba 0b04 	subs.w	fp, sl, r4
 80104d0:	d00b      	beq.n	80104ea <_svfiprintf_r+0x7a>
 80104d2:	465b      	mov	r3, fp
 80104d4:	4622      	mov	r2, r4
 80104d6:	4629      	mov	r1, r5
 80104d8:	4638      	mov	r0, r7
 80104da:	f7ff ff6d 	bl	80103b8 <__ssputs_r>
 80104de:	3001      	adds	r0, #1
 80104e0:	f000 80aa 	beq.w	8010638 <_svfiprintf_r+0x1c8>
 80104e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104e6:	445a      	add	r2, fp
 80104e8:	9209      	str	r2, [sp, #36]	; 0x24
 80104ea:	f89a 3000 	ldrb.w	r3, [sl]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	f000 80a2 	beq.w	8010638 <_svfiprintf_r+0x1c8>
 80104f4:	2300      	movs	r3, #0
 80104f6:	f04f 32ff 	mov.w	r2, #4294967295
 80104fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104fe:	f10a 0a01 	add.w	sl, sl, #1
 8010502:	9304      	str	r3, [sp, #16]
 8010504:	9307      	str	r3, [sp, #28]
 8010506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801050a:	931a      	str	r3, [sp, #104]	; 0x68
 801050c:	4654      	mov	r4, sl
 801050e:	2205      	movs	r2, #5
 8010510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010514:	4851      	ldr	r0, [pc, #324]	; (801065c <_svfiprintf_r+0x1ec>)
 8010516:	f7ef fe73 	bl	8000200 <memchr>
 801051a:	9a04      	ldr	r2, [sp, #16]
 801051c:	b9d8      	cbnz	r0, 8010556 <_svfiprintf_r+0xe6>
 801051e:	06d0      	lsls	r0, r2, #27
 8010520:	bf44      	itt	mi
 8010522:	2320      	movmi	r3, #32
 8010524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010528:	0711      	lsls	r1, r2, #28
 801052a:	bf44      	itt	mi
 801052c:	232b      	movmi	r3, #43	; 0x2b
 801052e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010532:	f89a 3000 	ldrb.w	r3, [sl]
 8010536:	2b2a      	cmp	r3, #42	; 0x2a
 8010538:	d015      	beq.n	8010566 <_svfiprintf_r+0xf6>
 801053a:	9a07      	ldr	r2, [sp, #28]
 801053c:	4654      	mov	r4, sl
 801053e:	2000      	movs	r0, #0
 8010540:	f04f 0c0a 	mov.w	ip, #10
 8010544:	4621      	mov	r1, r4
 8010546:	f811 3b01 	ldrb.w	r3, [r1], #1
 801054a:	3b30      	subs	r3, #48	; 0x30
 801054c:	2b09      	cmp	r3, #9
 801054e:	d94e      	bls.n	80105ee <_svfiprintf_r+0x17e>
 8010550:	b1b0      	cbz	r0, 8010580 <_svfiprintf_r+0x110>
 8010552:	9207      	str	r2, [sp, #28]
 8010554:	e014      	b.n	8010580 <_svfiprintf_r+0x110>
 8010556:	eba0 0308 	sub.w	r3, r0, r8
 801055a:	fa09 f303 	lsl.w	r3, r9, r3
 801055e:	4313      	orrs	r3, r2
 8010560:	9304      	str	r3, [sp, #16]
 8010562:	46a2      	mov	sl, r4
 8010564:	e7d2      	b.n	801050c <_svfiprintf_r+0x9c>
 8010566:	9b03      	ldr	r3, [sp, #12]
 8010568:	1d19      	adds	r1, r3, #4
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	9103      	str	r1, [sp, #12]
 801056e:	2b00      	cmp	r3, #0
 8010570:	bfbb      	ittet	lt
 8010572:	425b      	neglt	r3, r3
 8010574:	f042 0202 	orrlt.w	r2, r2, #2
 8010578:	9307      	strge	r3, [sp, #28]
 801057a:	9307      	strlt	r3, [sp, #28]
 801057c:	bfb8      	it	lt
 801057e:	9204      	strlt	r2, [sp, #16]
 8010580:	7823      	ldrb	r3, [r4, #0]
 8010582:	2b2e      	cmp	r3, #46	; 0x2e
 8010584:	d10c      	bne.n	80105a0 <_svfiprintf_r+0x130>
 8010586:	7863      	ldrb	r3, [r4, #1]
 8010588:	2b2a      	cmp	r3, #42	; 0x2a
 801058a:	d135      	bne.n	80105f8 <_svfiprintf_r+0x188>
 801058c:	9b03      	ldr	r3, [sp, #12]
 801058e:	1d1a      	adds	r2, r3, #4
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	9203      	str	r2, [sp, #12]
 8010594:	2b00      	cmp	r3, #0
 8010596:	bfb8      	it	lt
 8010598:	f04f 33ff 	movlt.w	r3, #4294967295
 801059c:	3402      	adds	r4, #2
 801059e:	9305      	str	r3, [sp, #20]
 80105a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801066c <_svfiprintf_r+0x1fc>
 80105a4:	7821      	ldrb	r1, [r4, #0]
 80105a6:	2203      	movs	r2, #3
 80105a8:	4650      	mov	r0, sl
 80105aa:	f7ef fe29 	bl	8000200 <memchr>
 80105ae:	b140      	cbz	r0, 80105c2 <_svfiprintf_r+0x152>
 80105b0:	2340      	movs	r3, #64	; 0x40
 80105b2:	eba0 000a 	sub.w	r0, r0, sl
 80105b6:	fa03 f000 	lsl.w	r0, r3, r0
 80105ba:	9b04      	ldr	r3, [sp, #16]
 80105bc:	4303      	orrs	r3, r0
 80105be:	3401      	adds	r4, #1
 80105c0:	9304      	str	r3, [sp, #16]
 80105c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105c6:	4826      	ldr	r0, [pc, #152]	; (8010660 <_svfiprintf_r+0x1f0>)
 80105c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105cc:	2206      	movs	r2, #6
 80105ce:	f7ef fe17 	bl	8000200 <memchr>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d038      	beq.n	8010648 <_svfiprintf_r+0x1d8>
 80105d6:	4b23      	ldr	r3, [pc, #140]	; (8010664 <_svfiprintf_r+0x1f4>)
 80105d8:	bb1b      	cbnz	r3, 8010622 <_svfiprintf_r+0x1b2>
 80105da:	9b03      	ldr	r3, [sp, #12]
 80105dc:	3307      	adds	r3, #7
 80105de:	f023 0307 	bic.w	r3, r3, #7
 80105e2:	3308      	adds	r3, #8
 80105e4:	9303      	str	r3, [sp, #12]
 80105e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105e8:	4433      	add	r3, r6
 80105ea:	9309      	str	r3, [sp, #36]	; 0x24
 80105ec:	e767      	b.n	80104be <_svfiprintf_r+0x4e>
 80105ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80105f2:	460c      	mov	r4, r1
 80105f4:	2001      	movs	r0, #1
 80105f6:	e7a5      	b.n	8010544 <_svfiprintf_r+0xd4>
 80105f8:	2300      	movs	r3, #0
 80105fa:	3401      	adds	r4, #1
 80105fc:	9305      	str	r3, [sp, #20]
 80105fe:	4619      	mov	r1, r3
 8010600:	f04f 0c0a 	mov.w	ip, #10
 8010604:	4620      	mov	r0, r4
 8010606:	f810 2b01 	ldrb.w	r2, [r0], #1
 801060a:	3a30      	subs	r2, #48	; 0x30
 801060c:	2a09      	cmp	r2, #9
 801060e:	d903      	bls.n	8010618 <_svfiprintf_r+0x1a8>
 8010610:	2b00      	cmp	r3, #0
 8010612:	d0c5      	beq.n	80105a0 <_svfiprintf_r+0x130>
 8010614:	9105      	str	r1, [sp, #20]
 8010616:	e7c3      	b.n	80105a0 <_svfiprintf_r+0x130>
 8010618:	fb0c 2101 	mla	r1, ip, r1, r2
 801061c:	4604      	mov	r4, r0
 801061e:	2301      	movs	r3, #1
 8010620:	e7f0      	b.n	8010604 <_svfiprintf_r+0x194>
 8010622:	ab03      	add	r3, sp, #12
 8010624:	9300      	str	r3, [sp, #0]
 8010626:	462a      	mov	r2, r5
 8010628:	4b0f      	ldr	r3, [pc, #60]	; (8010668 <_svfiprintf_r+0x1f8>)
 801062a:	a904      	add	r1, sp, #16
 801062c:	4638      	mov	r0, r7
 801062e:	f3af 8000 	nop.w
 8010632:	1c42      	adds	r2, r0, #1
 8010634:	4606      	mov	r6, r0
 8010636:	d1d6      	bne.n	80105e6 <_svfiprintf_r+0x176>
 8010638:	89ab      	ldrh	r3, [r5, #12]
 801063a:	065b      	lsls	r3, r3, #25
 801063c:	f53f af2c 	bmi.w	8010498 <_svfiprintf_r+0x28>
 8010640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010642:	b01d      	add	sp, #116	; 0x74
 8010644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010648:	ab03      	add	r3, sp, #12
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	462a      	mov	r2, r5
 801064e:	4b06      	ldr	r3, [pc, #24]	; (8010668 <_svfiprintf_r+0x1f8>)
 8010650:	a904      	add	r1, sp, #16
 8010652:	4638      	mov	r0, r7
 8010654:	f000 f87a 	bl	801074c <_printf_i>
 8010658:	e7eb      	b.n	8010632 <_svfiprintf_r+0x1c2>
 801065a:	bf00      	nop
 801065c:	08010cd4 	.word	0x08010cd4
 8010660:	08010cde 	.word	0x08010cde
 8010664:	00000000 	.word	0x00000000
 8010668:	080103b9 	.word	0x080103b9
 801066c:	08010cda 	.word	0x08010cda

08010670 <_printf_common>:
 8010670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010674:	4616      	mov	r6, r2
 8010676:	4699      	mov	r9, r3
 8010678:	688a      	ldr	r2, [r1, #8]
 801067a:	690b      	ldr	r3, [r1, #16]
 801067c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010680:	4293      	cmp	r3, r2
 8010682:	bfb8      	it	lt
 8010684:	4613      	movlt	r3, r2
 8010686:	6033      	str	r3, [r6, #0]
 8010688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801068c:	4607      	mov	r7, r0
 801068e:	460c      	mov	r4, r1
 8010690:	b10a      	cbz	r2, 8010696 <_printf_common+0x26>
 8010692:	3301      	adds	r3, #1
 8010694:	6033      	str	r3, [r6, #0]
 8010696:	6823      	ldr	r3, [r4, #0]
 8010698:	0699      	lsls	r1, r3, #26
 801069a:	bf42      	ittt	mi
 801069c:	6833      	ldrmi	r3, [r6, #0]
 801069e:	3302      	addmi	r3, #2
 80106a0:	6033      	strmi	r3, [r6, #0]
 80106a2:	6825      	ldr	r5, [r4, #0]
 80106a4:	f015 0506 	ands.w	r5, r5, #6
 80106a8:	d106      	bne.n	80106b8 <_printf_common+0x48>
 80106aa:	f104 0a19 	add.w	sl, r4, #25
 80106ae:	68e3      	ldr	r3, [r4, #12]
 80106b0:	6832      	ldr	r2, [r6, #0]
 80106b2:	1a9b      	subs	r3, r3, r2
 80106b4:	42ab      	cmp	r3, r5
 80106b6:	dc26      	bgt.n	8010706 <_printf_common+0x96>
 80106b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80106bc:	1e13      	subs	r3, r2, #0
 80106be:	6822      	ldr	r2, [r4, #0]
 80106c0:	bf18      	it	ne
 80106c2:	2301      	movne	r3, #1
 80106c4:	0692      	lsls	r2, r2, #26
 80106c6:	d42b      	bmi.n	8010720 <_printf_common+0xb0>
 80106c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106cc:	4649      	mov	r1, r9
 80106ce:	4638      	mov	r0, r7
 80106d0:	47c0      	blx	r8
 80106d2:	3001      	adds	r0, #1
 80106d4:	d01e      	beq.n	8010714 <_printf_common+0xa4>
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	68e5      	ldr	r5, [r4, #12]
 80106da:	6832      	ldr	r2, [r6, #0]
 80106dc:	f003 0306 	and.w	r3, r3, #6
 80106e0:	2b04      	cmp	r3, #4
 80106e2:	bf08      	it	eq
 80106e4:	1aad      	subeq	r5, r5, r2
 80106e6:	68a3      	ldr	r3, [r4, #8]
 80106e8:	6922      	ldr	r2, [r4, #16]
 80106ea:	bf0c      	ite	eq
 80106ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106f0:	2500      	movne	r5, #0
 80106f2:	4293      	cmp	r3, r2
 80106f4:	bfc4      	itt	gt
 80106f6:	1a9b      	subgt	r3, r3, r2
 80106f8:	18ed      	addgt	r5, r5, r3
 80106fa:	2600      	movs	r6, #0
 80106fc:	341a      	adds	r4, #26
 80106fe:	42b5      	cmp	r5, r6
 8010700:	d11a      	bne.n	8010738 <_printf_common+0xc8>
 8010702:	2000      	movs	r0, #0
 8010704:	e008      	b.n	8010718 <_printf_common+0xa8>
 8010706:	2301      	movs	r3, #1
 8010708:	4652      	mov	r2, sl
 801070a:	4649      	mov	r1, r9
 801070c:	4638      	mov	r0, r7
 801070e:	47c0      	blx	r8
 8010710:	3001      	adds	r0, #1
 8010712:	d103      	bne.n	801071c <_printf_common+0xac>
 8010714:	f04f 30ff 	mov.w	r0, #4294967295
 8010718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801071c:	3501      	adds	r5, #1
 801071e:	e7c6      	b.n	80106ae <_printf_common+0x3e>
 8010720:	18e1      	adds	r1, r4, r3
 8010722:	1c5a      	adds	r2, r3, #1
 8010724:	2030      	movs	r0, #48	; 0x30
 8010726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801072a:	4422      	add	r2, r4
 801072c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010734:	3302      	adds	r3, #2
 8010736:	e7c7      	b.n	80106c8 <_printf_common+0x58>
 8010738:	2301      	movs	r3, #1
 801073a:	4622      	mov	r2, r4
 801073c:	4649      	mov	r1, r9
 801073e:	4638      	mov	r0, r7
 8010740:	47c0      	blx	r8
 8010742:	3001      	adds	r0, #1
 8010744:	d0e6      	beq.n	8010714 <_printf_common+0xa4>
 8010746:	3601      	adds	r6, #1
 8010748:	e7d9      	b.n	80106fe <_printf_common+0x8e>
	...

0801074c <_printf_i>:
 801074c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010750:	7e0f      	ldrb	r7, [r1, #24]
 8010752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010754:	2f78      	cmp	r7, #120	; 0x78
 8010756:	4691      	mov	r9, r2
 8010758:	4680      	mov	r8, r0
 801075a:	460c      	mov	r4, r1
 801075c:	469a      	mov	sl, r3
 801075e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010762:	d807      	bhi.n	8010774 <_printf_i+0x28>
 8010764:	2f62      	cmp	r7, #98	; 0x62
 8010766:	d80a      	bhi.n	801077e <_printf_i+0x32>
 8010768:	2f00      	cmp	r7, #0
 801076a:	f000 80d8 	beq.w	801091e <_printf_i+0x1d2>
 801076e:	2f58      	cmp	r7, #88	; 0x58
 8010770:	f000 80a3 	beq.w	80108ba <_printf_i+0x16e>
 8010774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801077c:	e03a      	b.n	80107f4 <_printf_i+0xa8>
 801077e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010782:	2b15      	cmp	r3, #21
 8010784:	d8f6      	bhi.n	8010774 <_printf_i+0x28>
 8010786:	a101      	add	r1, pc, #4	; (adr r1, 801078c <_printf_i+0x40>)
 8010788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801078c:	080107e5 	.word	0x080107e5
 8010790:	080107f9 	.word	0x080107f9
 8010794:	08010775 	.word	0x08010775
 8010798:	08010775 	.word	0x08010775
 801079c:	08010775 	.word	0x08010775
 80107a0:	08010775 	.word	0x08010775
 80107a4:	080107f9 	.word	0x080107f9
 80107a8:	08010775 	.word	0x08010775
 80107ac:	08010775 	.word	0x08010775
 80107b0:	08010775 	.word	0x08010775
 80107b4:	08010775 	.word	0x08010775
 80107b8:	08010905 	.word	0x08010905
 80107bc:	08010829 	.word	0x08010829
 80107c0:	080108e7 	.word	0x080108e7
 80107c4:	08010775 	.word	0x08010775
 80107c8:	08010775 	.word	0x08010775
 80107cc:	08010927 	.word	0x08010927
 80107d0:	08010775 	.word	0x08010775
 80107d4:	08010829 	.word	0x08010829
 80107d8:	08010775 	.word	0x08010775
 80107dc:	08010775 	.word	0x08010775
 80107e0:	080108ef 	.word	0x080108ef
 80107e4:	682b      	ldr	r3, [r5, #0]
 80107e6:	1d1a      	adds	r2, r3, #4
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	602a      	str	r2, [r5, #0]
 80107ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107f4:	2301      	movs	r3, #1
 80107f6:	e0a3      	b.n	8010940 <_printf_i+0x1f4>
 80107f8:	6820      	ldr	r0, [r4, #0]
 80107fa:	6829      	ldr	r1, [r5, #0]
 80107fc:	0606      	lsls	r6, r0, #24
 80107fe:	f101 0304 	add.w	r3, r1, #4
 8010802:	d50a      	bpl.n	801081a <_printf_i+0xce>
 8010804:	680e      	ldr	r6, [r1, #0]
 8010806:	602b      	str	r3, [r5, #0]
 8010808:	2e00      	cmp	r6, #0
 801080a:	da03      	bge.n	8010814 <_printf_i+0xc8>
 801080c:	232d      	movs	r3, #45	; 0x2d
 801080e:	4276      	negs	r6, r6
 8010810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010814:	485e      	ldr	r0, [pc, #376]	; (8010990 <_printf_i+0x244>)
 8010816:	230a      	movs	r3, #10
 8010818:	e019      	b.n	801084e <_printf_i+0x102>
 801081a:	680e      	ldr	r6, [r1, #0]
 801081c:	602b      	str	r3, [r5, #0]
 801081e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010822:	bf18      	it	ne
 8010824:	b236      	sxthne	r6, r6
 8010826:	e7ef      	b.n	8010808 <_printf_i+0xbc>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	6820      	ldr	r0, [r4, #0]
 801082c:	1d19      	adds	r1, r3, #4
 801082e:	6029      	str	r1, [r5, #0]
 8010830:	0601      	lsls	r1, r0, #24
 8010832:	d501      	bpl.n	8010838 <_printf_i+0xec>
 8010834:	681e      	ldr	r6, [r3, #0]
 8010836:	e002      	b.n	801083e <_printf_i+0xf2>
 8010838:	0646      	lsls	r6, r0, #25
 801083a:	d5fb      	bpl.n	8010834 <_printf_i+0xe8>
 801083c:	881e      	ldrh	r6, [r3, #0]
 801083e:	4854      	ldr	r0, [pc, #336]	; (8010990 <_printf_i+0x244>)
 8010840:	2f6f      	cmp	r7, #111	; 0x6f
 8010842:	bf0c      	ite	eq
 8010844:	2308      	moveq	r3, #8
 8010846:	230a      	movne	r3, #10
 8010848:	2100      	movs	r1, #0
 801084a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801084e:	6865      	ldr	r5, [r4, #4]
 8010850:	60a5      	str	r5, [r4, #8]
 8010852:	2d00      	cmp	r5, #0
 8010854:	bfa2      	ittt	ge
 8010856:	6821      	ldrge	r1, [r4, #0]
 8010858:	f021 0104 	bicge.w	r1, r1, #4
 801085c:	6021      	strge	r1, [r4, #0]
 801085e:	b90e      	cbnz	r6, 8010864 <_printf_i+0x118>
 8010860:	2d00      	cmp	r5, #0
 8010862:	d04d      	beq.n	8010900 <_printf_i+0x1b4>
 8010864:	4615      	mov	r5, r2
 8010866:	fbb6 f1f3 	udiv	r1, r6, r3
 801086a:	fb03 6711 	mls	r7, r3, r1, r6
 801086e:	5dc7      	ldrb	r7, [r0, r7]
 8010870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010874:	4637      	mov	r7, r6
 8010876:	42bb      	cmp	r3, r7
 8010878:	460e      	mov	r6, r1
 801087a:	d9f4      	bls.n	8010866 <_printf_i+0x11a>
 801087c:	2b08      	cmp	r3, #8
 801087e:	d10b      	bne.n	8010898 <_printf_i+0x14c>
 8010880:	6823      	ldr	r3, [r4, #0]
 8010882:	07de      	lsls	r6, r3, #31
 8010884:	d508      	bpl.n	8010898 <_printf_i+0x14c>
 8010886:	6923      	ldr	r3, [r4, #16]
 8010888:	6861      	ldr	r1, [r4, #4]
 801088a:	4299      	cmp	r1, r3
 801088c:	bfde      	ittt	le
 801088e:	2330      	movle	r3, #48	; 0x30
 8010890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010894:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010898:	1b52      	subs	r2, r2, r5
 801089a:	6122      	str	r2, [r4, #16]
 801089c:	f8cd a000 	str.w	sl, [sp]
 80108a0:	464b      	mov	r3, r9
 80108a2:	aa03      	add	r2, sp, #12
 80108a4:	4621      	mov	r1, r4
 80108a6:	4640      	mov	r0, r8
 80108a8:	f7ff fee2 	bl	8010670 <_printf_common>
 80108ac:	3001      	adds	r0, #1
 80108ae:	d14c      	bne.n	801094a <_printf_i+0x1fe>
 80108b0:	f04f 30ff 	mov.w	r0, #4294967295
 80108b4:	b004      	add	sp, #16
 80108b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ba:	4835      	ldr	r0, [pc, #212]	; (8010990 <_printf_i+0x244>)
 80108bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80108c0:	6829      	ldr	r1, [r5, #0]
 80108c2:	6823      	ldr	r3, [r4, #0]
 80108c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80108c8:	6029      	str	r1, [r5, #0]
 80108ca:	061d      	lsls	r5, r3, #24
 80108cc:	d514      	bpl.n	80108f8 <_printf_i+0x1ac>
 80108ce:	07df      	lsls	r7, r3, #31
 80108d0:	bf44      	itt	mi
 80108d2:	f043 0320 	orrmi.w	r3, r3, #32
 80108d6:	6023      	strmi	r3, [r4, #0]
 80108d8:	b91e      	cbnz	r6, 80108e2 <_printf_i+0x196>
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	f023 0320 	bic.w	r3, r3, #32
 80108e0:	6023      	str	r3, [r4, #0]
 80108e2:	2310      	movs	r3, #16
 80108e4:	e7b0      	b.n	8010848 <_printf_i+0xfc>
 80108e6:	6823      	ldr	r3, [r4, #0]
 80108e8:	f043 0320 	orr.w	r3, r3, #32
 80108ec:	6023      	str	r3, [r4, #0]
 80108ee:	2378      	movs	r3, #120	; 0x78
 80108f0:	4828      	ldr	r0, [pc, #160]	; (8010994 <_printf_i+0x248>)
 80108f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108f6:	e7e3      	b.n	80108c0 <_printf_i+0x174>
 80108f8:	0659      	lsls	r1, r3, #25
 80108fa:	bf48      	it	mi
 80108fc:	b2b6      	uxthmi	r6, r6
 80108fe:	e7e6      	b.n	80108ce <_printf_i+0x182>
 8010900:	4615      	mov	r5, r2
 8010902:	e7bb      	b.n	801087c <_printf_i+0x130>
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	6826      	ldr	r6, [r4, #0]
 8010908:	6961      	ldr	r1, [r4, #20]
 801090a:	1d18      	adds	r0, r3, #4
 801090c:	6028      	str	r0, [r5, #0]
 801090e:	0635      	lsls	r5, r6, #24
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	d501      	bpl.n	8010918 <_printf_i+0x1cc>
 8010914:	6019      	str	r1, [r3, #0]
 8010916:	e002      	b.n	801091e <_printf_i+0x1d2>
 8010918:	0670      	lsls	r0, r6, #25
 801091a:	d5fb      	bpl.n	8010914 <_printf_i+0x1c8>
 801091c:	8019      	strh	r1, [r3, #0]
 801091e:	2300      	movs	r3, #0
 8010920:	6123      	str	r3, [r4, #16]
 8010922:	4615      	mov	r5, r2
 8010924:	e7ba      	b.n	801089c <_printf_i+0x150>
 8010926:	682b      	ldr	r3, [r5, #0]
 8010928:	1d1a      	adds	r2, r3, #4
 801092a:	602a      	str	r2, [r5, #0]
 801092c:	681d      	ldr	r5, [r3, #0]
 801092e:	6862      	ldr	r2, [r4, #4]
 8010930:	2100      	movs	r1, #0
 8010932:	4628      	mov	r0, r5
 8010934:	f7ef fc64 	bl	8000200 <memchr>
 8010938:	b108      	cbz	r0, 801093e <_printf_i+0x1f2>
 801093a:	1b40      	subs	r0, r0, r5
 801093c:	6060      	str	r0, [r4, #4]
 801093e:	6863      	ldr	r3, [r4, #4]
 8010940:	6123      	str	r3, [r4, #16]
 8010942:	2300      	movs	r3, #0
 8010944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010948:	e7a8      	b.n	801089c <_printf_i+0x150>
 801094a:	6923      	ldr	r3, [r4, #16]
 801094c:	462a      	mov	r2, r5
 801094e:	4649      	mov	r1, r9
 8010950:	4640      	mov	r0, r8
 8010952:	47d0      	blx	sl
 8010954:	3001      	adds	r0, #1
 8010956:	d0ab      	beq.n	80108b0 <_printf_i+0x164>
 8010958:	6823      	ldr	r3, [r4, #0]
 801095a:	079b      	lsls	r3, r3, #30
 801095c:	d413      	bmi.n	8010986 <_printf_i+0x23a>
 801095e:	68e0      	ldr	r0, [r4, #12]
 8010960:	9b03      	ldr	r3, [sp, #12]
 8010962:	4298      	cmp	r0, r3
 8010964:	bfb8      	it	lt
 8010966:	4618      	movlt	r0, r3
 8010968:	e7a4      	b.n	80108b4 <_printf_i+0x168>
 801096a:	2301      	movs	r3, #1
 801096c:	4632      	mov	r2, r6
 801096e:	4649      	mov	r1, r9
 8010970:	4640      	mov	r0, r8
 8010972:	47d0      	blx	sl
 8010974:	3001      	adds	r0, #1
 8010976:	d09b      	beq.n	80108b0 <_printf_i+0x164>
 8010978:	3501      	adds	r5, #1
 801097a:	68e3      	ldr	r3, [r4, #12]
 801097c:	9903      	ldr	r1, [sp, #12]
 801097e:	1a5b      	subs	r3, r3, r1
 8010980:	42ab      	cmp	r3, r5
 8010982:	dcf2      	bgt.n	801096a <_printf_i+0x21e>
 8010984:	e7eb      	b.n	801095e <_printf_i+0x212>
 8010986:	2500      	movs	r5, #0
 8010988:	f104 0619 	add.w	r6, r4, #25
 801098c:	e7f5      	b.n	801097a <_printf_i+0x22e>
 801098e:	bf00      	nop
 8010990:	08010ce5 	.word	0x08010ce5
 8010994:	08010cf6 	.word	0x08010cf6

08010998 <memmove>:
 8010998:	4288      	cmp	r0, r1
 801099a:	b510      	push	{r4, lr}
 801099c:	eb01 0402 	add.w	r4, r1, r2
 80109a0:	d902      	bls.n	80109a8 <memmove+0x10>
 80109a2:	4284      	cmp	r4, r0
 80109a4:	4623      	mov	r3, r4
 80109a6:	d807      	bhi.n	80109b8 <memmove+0x20>
 80109a8:	1e43      	subs	r3, r0, #1
 80109aa:	42a1      	cmp	r1, r4
 80109ac:	d008      	beq.n	80109c0 <memmove+0x28>
 80109ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109b6:	e7f8      	b.n	80109aa <memmove+0x12>
 80109b8:	4402      	add	r2, r0
 80109ba:	4601      	mov	r1, r0
 80109bc:	428a      	cmp	r2, r1
 80109be:	d100      	bne.n	80109c2 <memmove+0x2a>
 80109c0:	bd10      	pop	{r4, pc}
 80109c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109ca:	e7f7      	b.n	80109bc <memmove+0x24>

080109cc <_realloc_r>:
 80109cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109d0:	4680      	mov	r8, r0
 80109d2:	4614      	mov	r4, r2
 80109d4:	460e      	mov	r6, r1
 80109d6:	b921      	cbnz	r1, 80109e2 <_realloc_r+0x16>
 80109d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109dc:	4611      	mov	r1, r2
 80109de:	f7ff bb85 	b.w	80100ec <_malloc_r>
 80109e2:	b92a      	cbnz	r2, 80109f0 <_realloc_r+0x24>
 80109e4:	f7ff fc9c 	bl	8010320 <_free_r>
 80109e8:	4625      	mov	r5, r4
 80109ea:	4628      	mov	r0, r5
 80109ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f0:	f000 f81b 	bl	8010a2a <_malloc_usable_size_r>
 80109f4:	4284      	cmp	r4, r0
 80109f6:	4607      	mov	r7, r0
 80109f8:	d802      	bhi.n	8010a00 <_realloc_r+0x34>
 80109fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80109fe:	d812      	bhi.n	8010a26 <_realloc_r+0x5a>
 8010a00:	4621      	mov	r1, r4
 8010a02:	4640      	mov	r0, r8
 8010a04:	f7ff fb72 	bl	80100ec <_malloc_r>
 8010a08:	4605      	mov	r5, r0
 8010a0a:	2800      	cmp	r0, #0
 8010a0c:	d0ed      	beq.n	80109ea <_realloc_r+0x1e>
 8010a0e:	42bc      	cmp	r4, r7
 8010a10:	4622      	mov	r2, r4
 8010a12:	4631      	mov	r1, r6
 8010a14:	bf28      	it	cs
 8010a16:	463a      	movcs	r2, r7
 8010a18:	f7ff fb32 	bl	8010080 <memcpy>
 8010a1c:	4631      	mov	r1, r6
 8010a1e:	4640      	mov	r0, r8
 8010a20:	f7ff fc7e 	bl	8010320 <_free_r>
 8010a24:	e7e1      	b.n	80109ea <_realloc_r+0x1e>
 8010a26:	4635      	mov	r5, r6
 8010a28:	e7df      	b.n	80109ea <_realloc_r+0x1e>

08010a2a <_malloc_usable_size_r>:
 8010a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a2e:	1f18      	subs	r0, r3, #4
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	bfbc      	itt	lt
 8010a34:	580b      	ldrlt	r3, [r1, r0]
 8010a36:	18c0      	addlt	r0, r0, r3
 8010a38:	4770      	bx	lr
	...

08010a3c <_init>:
 8010a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a3e:	bf00      	nop
 8010a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a42:	bc08      	pop	{r3}
 8010a44:	469e      	mov	lr, r3
 8010a46:	4770      	bx	lr

08010a48 <_fini>:
 8010a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4a:	bf00      	nop
 8010a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a4e:	bc08      	pop	{r3}
 8010a50:	469e      	mov	lr, r3
 8010a52:	4770      	bx	lr
