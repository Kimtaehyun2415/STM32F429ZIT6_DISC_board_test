
stm32f429zit6_i2cspi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800fd34  0800fd34  0001fd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffe8  0800ffe8  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffe8  0800ffe8  0001ffe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fff0  0800fff0  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fff0  0800fff0  0001fff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fff4  0800fff4  0001fff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800fff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020174  2**0
                  CONTENTS
 10 .bss          00005f68  20000174  20000174  00020174  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200060dc  200060dc  00020174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e536  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006965  00000000  00000000  0004e6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002278  00000000  00000000  00055040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fc8  00000000  00000000  000572b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d70e  00000000  00000000  00059280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dcaf  00000000  00000000  0008698e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb2fd  00000000  00000000  000b463d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001af93a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009424  00000000  00000000  001af98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000174 	.word	0x20000174
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fd1c 	.word	0x0800fd1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000178 	.word	0x20000178
 80001ec:	0800fd1c 	.word	0x0800fd1c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f001 fd29 	bl	800205c <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f000 fecc 	bl	80013ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000614:	2301      	movs	r3, #1
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f001 fe3d 	bl	80022a4 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f000 febc 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000190 	.word	0x20000190
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006a2:	2302      	movs	r3, #2
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f002 fe67 	bl	8003388 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <ADC_Test>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Test(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	; 0x68
 80006d4:	af00      	add	r7, sp, #0
	  HAL_ADC_Start(&hadc1);
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <ADC_Test+0x64>)
 80006d8:	f001 fd04 	bl	80020e4 <HAL_ADC_Start>
	  uint16_t ADC_data = HAL_ADC_GetValue(&hadc1);
 80006dc:	4815      	ldr	r0, [pc, #84]	; (8000734 <ADC_Test+0x64>)
 80006de:	f001 fdd3 	bl	8002288 <HAL_ADC_GetValue>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	  if(ADC_data != 0)
 80006e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d019      	beq.n	8000724 <ADC_Test+0x54>
	  {
		  uint8_t buf[100] = {0, };
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2260      	movs	r2, #96	; 0x60
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00e fe3e 	bl	800f37c <memset>
		  sprintf((char *)&buf, "\r\nADC Data : %d\r\n", ADC_data);
 8000700:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000704:	463b      	mov	r3, r7
 8000706:	490c      	ldr	r1, [pc, #48]	; (8000738 <ADC_Test+0x68>)
 8000708:	4618      	mov	r0, r3
 800070a:	f00e ff4d 	bl	800f5a8 <siprintf>
		  HAL_UART_Transmit(&huart1, buf, strlen((char *)buf), 0xFF);
 800070e:	463b      	mov	r3, r7
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd6d 	bl	80001f0 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	4639      	mov	r1, r7
 800071c:	23ff      	movs	r3, #255	; 0xff
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <ADC_Test+0x6c>)
 8000720:	f007 fdf5 	bl	800830e <HAL_UART_Transmit>
	  }
	  ADC_data=0;
 8000724:	2300      	movs	r3, #0
 8000726:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

}
 800072a:	bf00      	nop
 800072c:	3768      	adds	r7, #104	; 0x68
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000190 	.word	0x20000190
 8000738:	0800fd34 	.word	0x0800fd34
 800073c:	20000724 	.word	0x20000724

08000740 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <MX_CAN1_Init+0xac>)
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <MX_CAN1_Init+0xb0>)
 8000748:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <MX_CAN1_Init+0xac>)
 800074c:	2215      	movs	r2, #21
 800074e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_CAN1_Init+0xac>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <MX_CAN1_Init+0xac>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_CAN1_Init+0xac>)
 800075e:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000762:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_CAN1_Init+0xac>)
 8000766:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800076a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_CAN1_Init+0xac>)
 800076e:	2200      	movs	r2, #0
 8000770:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_CAN1_Init+0xac>)
 8000774:	2200      	movs	r2, #0
 8000776:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_CAN1_Init+0xac>)
 800077a:	2200      	movs	r2, #0
 800077c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_CAN1_Init+0xac>)
 8000780:	2200      	movs	r2, #0
 8000782:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_CAN1_Init+0xac>)
 8000786:	2200      	movs	r2, #0
 8000788:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_CAN1_Init+0xac>)
 800078c:	2200      	movs	r2, #0
 800078e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <MX_CAN1_Init+0xac>)
 8000792:	f001 ffb5 	bl	8002700 <HAL_CAN_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 fe06 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;              // 0x00000000 = 모든 ID
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	621a      	str	r2, [r3, #32]
 // sFilterConfig.SlaveStartFilterBank = 14;
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80007d6:	4907      	ldr	r1, [pc, #28]	; (80007f4 <MX_CAN1_Init+0xb4>)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_CAN1_Init+0xac>)
 80007da:	f002 f88d 	bl	80028f8 <HAL_CAN_ConfigFilter>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_CAN1_Init+0xa8>
  {
    Error_Handler();
 80007e4:	f000 fde2 	bl	80013ac <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000021c 	.word	0x2000021c
 80007f0:	40006400 	.word	0x40006400
 80007f4:	200001f4 	.word	0x200001f4

080007f8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_CAN2_Init+0x64>)
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_CAN2_Init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_CAN2_Init+0x64>)
 8000804:	2215      	movs	r2, #21
 8000806:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_CAN2_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_CAN2_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_CAN2_Init+0x64>)
 8000816:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800081a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_CAN2_Init+0x64>)
 800081e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000822:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_CAN2_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_CAN2_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_CAN2_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_CAN2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_CAN2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_CAN2_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_CAN2_Init+0x64>)
 800084a:	f001 ff59 	bl	8002700 <HAL_CAN_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 fdaa 	bl	80013ac <Error_Handler>
//  {
//    Error_Handler();
//  }
  /* USER CODE END CAN2_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000244 	.word	0x20000244
 8000860:	40006800 	.word	0x40006800

08000864 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a4e      	ldr	r2, [pc, #312]	; (80009bc <HAL_CAN_MspInit+0x158>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d13d      	bne.n	8000902 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000886:	4b4e      	ldr	r3, [pc, #312]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a4c      	ldr	r2, [pc, #304]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 800088e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000890:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d10d      	bne.n	80008b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a48      	ldr	r2, [pc, #288]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	4a41      	ldr	r2, [pc, #260]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	6313      	str	r3, [r2, #48]	; 0x30
 80008c4:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008d0:	2303      	movs	r3, #3
 80008d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008e0:	2309      	movs	r3, #9
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4837      	ldr	r0, [pc, #220]	; (80009c8 <HAL_CAN_MspInit+0x164>)
 80008ec:	f002 fd4c 	bl	8003388 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2105      	movs	r1, #5
 80008f4:	2014      	movs	r0, #20
 80008f6:	f002 fcfb 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008fa:	2014      	movs	r0, #20
 80008fc:	f002 fd14 	bl	8003328 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000900:	e058      	b.n	80009b4 <HAL_CAN_MspInit+0x150>
  else if(canHandle->Instance==CAN2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a31      	ldr	r2, [pc, #196]	; (80009cc <HAL_CAN_MspInit+0x168>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d153      	bne.n	80009b4 <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a24      	ldr	r2, [pc, #144]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 8000930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <HAL_CAN_MspInit+0x15c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10d      	bne.n	8000956 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_CAN_MspInit+0x160>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000972:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000984:	2309      	movs	r3, #9
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4810      	ldr	r0, [pc, #64]	; (80009d0 <HAL_CAN_MspInit+0x16c>)
 8000990:	f002 fcfa 	bl	8003388 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2105      	movs	r1, #5
 8000998:	2040      	movs	r0, #64	; 0x40
 800099a:	f002 fca9 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800099e:	2040      	movs	r0, #64	; 0x40
 80009a0:	f002 fcc2 	bl	8003328 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2105      	movs	r1, #5
 80009a8:	2041      	movs	r0, #65	; 0x41
 80009aa:	f002 fca1 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80009ae:	2041      	movs	r0, #65	; 0x41
 80009b0:	f002 fcba 	bl	8003328 <HAL_NVIC_EnableIRQ>
}
 80009b4:	bf00      	nop
 80009b6:	3730      	adds	r7, #48	; 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40006400 	.word	0x40006400
 80009c0:	2000026c 	.word	0x2000026c
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40006800 	.word	0x40006800
 80009d0:	40020400 	.word	0x40020400

080009d4 <can_test>:

/* USER CODE BEGIN 1 */
//HAL_CAN_ERROR_RX_FOV

void can_test(void)
{
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	b0a1      	sub	sp, #132	; 0x84
 80009d8:	af06      	add	r7, sp, #24
//	if(HAL_CAN_Start(&hcan1) != HAL_OK)
//	{
//		      Error_Handler();
//	}

    txHeader.StdId = 0x102;                 // Standard Identifier, 0 ~ 0x7FF
 80009da:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <can_test+0xdc>)
 80009dc:	f44f 7281 	mov.w	r2, #258	; 0x102
 80009e0:	601a      	str	r2, [r3, #0]
    txHeader.ExtId = 0x01;                  // Extended Identifier, 0 ~ 0x1FFFFFFF
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <can_test+0xdc>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
    txHeader.RTR = CAN_RTR_DATA;            // trans message frame type, DATA or REMOTE
 80009e8:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <can_test+0xdc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
    txHeader.IDE = CAN_ID_STD;              // trans message identifi type, STD or EXT
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <can_test+0xdc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
    txHeader.DLC = 8;                       // trans Frame length, 0 ~ 8 byte
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <can_test+0xdc>)
 80009f6:	2208      	movs	r2, #8
 80009f8:	611a      	str	r2, [r3, #16]
    txHeader.TransmitGlobalTime = ENABLE;  // trans frame time stamp counter value capture.
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <can_test+0xdc>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	751a      	strb	r2, [r3, #20]

	txMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8000a00:	482c      	ldr	r0, [pc, #176]	; (8000ab4 <can_test+0xe0>)
 8000a02:	f002 f934 	bl	8002c6e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a2b      	ldr	r2, [pc, #172]	; (8000ab8 <can_test+0xe4>)
 8000a0a:	6013      	str	r3, [r2, #0]
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <can_test+0xe4>)
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <can_test+0xe8>)
 8000a10:	4927      	ldr	r1, [pc, #156]	; (8000ab0 <can_test+0xdc>)
 8000a12:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <can_test+0xe0>)
 8000a14:	f002 f850 	bl	8002ab8 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&hcan1, txMailbox)){}
 8000a18:	bf00      	nop
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <can_test+0xe4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <can_test+0xe0>)
 8000a22:	f002 f959 	bl	8002cd8 <HAL_CAN_IsTxMessagePending>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1f6      	bne.n	8000a1a <can_test+0x46>
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 8000a2c:	bf00      	nop
 8000a2e:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <can_test+0xe0>)
 8000a30:	f002 f91d 	bl	8002c6e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d1f9      	bne.n	8000a2e <can_test+0x5a>

		uint8_t can_data[100]={0, };
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	2260      	movs	r2, #96	; 0x60
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00e fc98 	bl	800f37c <memset>
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <can_test+0xe8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a50:	469c      	mov	ip, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <can_test+0xe8>)
 8000a54:	785b      	ldrb	r3, [r3, #1]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a56:	469e      	mov	lr, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <can_test+0xe8>)
 8000a5a:	789b      	ldrb	r3, [r3, #2]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a5c:	461a      	mov	r2, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <can_test+0xe8>)
 8000a60:	78db      	ldrb	r3, [r3, #3]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a62:	4619      	mov	r1, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <can_test+0xe8>)
 8000a66:	791b      	ldrb	r3, [r3, #4]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a68:	461c      	mov	r4, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <can_test+0xe8>)
 8000a6c:	795b      	ldrb	r3, [r3, #5]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a6e:	461d      	mov	r5, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <can_test+0xe8>)
 8000a72:	799b      	ldrb	r3, [r3, #6]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a74:	461e      	mov	r6, r3
	    		txData[0],txData[1],txData[2],txData[3],txData[4],txData[5],txData[6],txData[7]);
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <can_test+0xe8>)
 8000a78:	79db      	ldrb	r3, [r3, #7]
	    sprintf(&can_data,"\r\n CAN TX data : %d%d%d%d%d%d%d%d \r\n",
 8000a7a:	1d38      	adds	r0, r7, #4
 8000a7c:	9305      	str	r3, [sp, #20]
 8000a7e:	9604      	str	r6, [sp, #16]
 8000a80:	9503      	str	r5, [sp, #12]
 8000a82:	9402      	str	r4, [sp, #8]
 8000a84:	9101      	str	r1, [sp, #4]
 8000a86:	9200      	str	r2, [sp, #0]
 8000a88:	4673      	mov	r3, lr
 8000a8a:	4662      	mov	r2, ip
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <can_test+0xec>)
 8000a8e:	f00e fd8b 	bl	800f5a8 <siprintf>
	    HAL_UART_Transmit(&huart1, can_data, strlen(can_data), 0xFF);
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fbab 	bl	80001f0 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	1d39      	adds	r1, r7, #4
 8000aa0:	23ff      	movs	r3, #255	; 0xff
 8000aa2:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <can_test+0xf0>)
 8000aa4:	f007 fc33 	bl	800830e <HAL_UART_Transmit>

//	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);



}
 8000aa8:	bf00      	nop
 8000aaa:	376c      	adds	r7, #108	; 0x6c
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab0:	200001d8 	.word	0x200001d8
 8000ab4:	2000021c 	.word	0x2000021c
 8000ab8:	200001f0 	.word	0x200001f0
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	0800fd48 	.word	0x0800fd48
 8000ac4:	20000724 	.word	0x20000724

08000ac8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <vApplicationGetIdleTaskMemory+0x30>)
 8000ade:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000288 	.word	0x20000288
 8000af8:	2000033c 	.word	0x2000033c

08000afc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000afc:	b5b0      	push	{r4, r5, r7, lr}
 8000afe:	b0a6      	sub	sp, #152	; 0x98
 8000b00:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of hBinarySem01 */
  osSemaphoreDef(hBinarySem01);
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  hBinarySem01Handle = osSemaphoreCreate(osSemaphore(hBinarySem01), 1);
 8000b0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00b fbd0 	bl	800c2ba <osSemaphoreCreate>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_FREERTOS_Init+0xe8>)
 8000b1e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000b20:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <MX_FREERTOS_Init+0xec>)
 8000b22:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b26:	461d      	mov	r5, r3
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00b fb5d 	bl	800c1fa <osThreadCreate>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a2a      	ldr	r2, [pc, #168]	; (8000bec <MX_FREERTOS_Init+0xf0>)
 8000b44:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <MX_FREERTOS_Init+0xf4>)
 8000b48:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b4c:	461d      	mov	r5, r3
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00b fb4a 	bl	800c1fa <osThreadCreate>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <MX_FREERTOS_Init+0xf8>)
 8000b6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityBelowNormal, 0, 128);
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_FREERTOS_Init+0xfc>)
 8000b6e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b72:	461d      	mov	r5, r3
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000b80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00b fb37 	bl	800c1fa <osThreadCreate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <MX_FREERTOS_Init+0x100>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* definition and creation of hSemTask */
  osThreadDef(hSemTask, SemaphoreTask, osPriorityNormal, 0, 128);
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_FREERTOS_Init+0x104>)
 8000b94:	f107 0420 	add.w	r4, r7, #32
 8000b98:	461d      	mov	r5, r3
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hSemTaskHandle = osThreadCreate(osThread(hSemTask), NULL);
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f00b fb24 	bl	800c1fa <osThreadCreate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <MX_FREERTOS_Init+0x108>)
 8000bb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of SemaphoTask2 */
  osThreadDef(SemaphoTask2, SemaTask, osPriorityNormal, 0, 128);
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_FREERTOS_Init+0x10c>)
 8000bba:	1d3c      	adds	r4, r7, #4
 8000bbc:	461d      	mov	r5, r3
 8000bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SemaphoTask2Handle = osThreadCreate(osThread(SemaphoTask2), NULL);
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00b fb13 	bl	800c1fa <osThreadCreate>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <MX_FREERTOS_Init+0x110>)
 8000bd8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bda:	bf00      	nop
 8000bdc:	3798      	adds	r7, #152	; 0x98
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000284 	.word	0x20000284
 8000be8:	0800fddc 	.word	0x0800fddc
 8000bec:	20000270 	.word	0x20000270
 8000bf0:	0800fdf8 	.word	0x0800fdf8
 8000bf4:	20000274 	.word	0x20000274
 8000bf8:	0800fe14 	.word	0x0800fe14
 8000bfc:	20000278 	.word	0x20000278
 8000c00:	0800fe30 	.word	0x0800fe30
 8000c04:	2000027c 	.word	0x2000027c
 8000c08:	0800fe4c 	.word	0x0800fe4c
 8000c0c:	20000280 	.word	0x20000280

08000c10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c18:	f00d fe80 	bl	800e91c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    ADC_Test();
 8000c1c:	f7ff fd58 	bl	80006d0 <ADC_Test>
    can_test();
 8000c20:	f7ff fed8 	bl	80009d4 <can_test>
    osDelay(1000);
 8000c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c28:	f00b fb33 	bl	800c292 <osDelay>
  {
 8000c2c:	e7f6      	b.n	8000c1c <StartDefaultTask+0xc>

08000c2e <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	l3gd20_Start();
 8000c36:	f000 f9f3 	bl	8001020 <l3gd20_Start>
    //HAL_TIM_Base_Start_IT(&htim1);
    osDelay(1500);
 8000c3a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c3e:	f00b fb28 	bl	800c292 <osDelay>
	l3gd20_Start();
 8000c42:	e7f8      	b.n	8000c36 <StartTask02+0x8>

08000c44 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	pwm_duty_control();
 8000c4c:	f001 f8a8 	bl	8001da0 <pwm_duty_control>
    osDelay(200);
 8000c50:	20c8      	movs	r0, #200	; 0xc8
 8000c52:	f00b fb1e 	bl	800c292 <osDelay>
	pwm_duty_control();
 8000c56:	e7f9      	b.n	8000c4c <StartTask03+0x8>

08000c58 <SemaphoreTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SemaphoreTask */
void SemaphoreTask(void const * argument)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SemaphoreTask */
  /* Infinite loop */
  for(;;)
  {
	stmpe811_Test();
 8000c60:	f000 fe00 	bl	8001864 <stmpe811_Test>
    osDelay(2500);
 8000c64:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000c68:	f00b fb13 	bl	800c292 <osDelay>
	stmpe811_Test();
 8000c6c:	e7f8      	b.n	8000c60 <SemaphoreTask+0x8>
	...

08000c70 <SemaTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SemaTask */
void SemaTask(void const * argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SemaTask */
  /* Infinite loop */
  for(;;)
  {
	if(hBinarySem01Handle != NULL)
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <SemaTask+0x60>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d023      	beq.n	8000cc8 <SemaTask+0x58>
	{
		if(osSemaphoreWait(hBinarySem01Handle, 0) == osOK)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <SemaTask+0x60>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00b fb4a 	bl	800c320 <osSemaphoreWait>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d11a      	bne.n	8000cc8 <SemaTask+0x58>
				  {
					  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c98:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <SemaTask+0x64>)
 8000c9a:	f002 fd21 	bl	80036e0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <SemaTask+0x64>)
 8000ca6:	f002 fd1b 	bl	80036e0 <HAL_GPIO_WritePin>
					  osDelay(100);
 8000caa:	2064      	movs	r0, #100	; 0x64
 8000cac:	f00b faf1 	bl	800c292 <osDelay>
					  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <SemaTask+0x64>)
 8000cb8:	f002 fd12 	bl	80036e0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <SemaTask+0x64>)
 8000cc4:	f002 fd0c 	bl	80036e0 <HAL_GPIO_WritePin>
				  }
	}
    osDelay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f00b fae2 	bl	800c292 <osDelay>
	if(hBinarySem01Handle != NULL)
 8000cce:	e7d3      	b.n	8000c78 <SemaTask+0x8>
 8000cd0:	20000284 	.word	0x20000284
 8000cd4:	40021800 	.word	0x40021800

08000cd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a61      	ldr	r2, [pc, #388]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0320 	and.w	r3, r3, #32
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	4b5b      	ldr	r3, [pc, #364]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a5a      	ldr	r2, [pc, #360]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b58      	ldr	r3, [pc, #352]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	4b54      	ldr	r3, [pc, #336]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a53      	ldr	r2, [pc, #332]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a4c      	ldr	r2, [pc, #304]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b4a      	ldr	r3, [pc, #296]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a45      	ldr	r2, [pc, #276]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a3e      	ldr	r2, [pc, #248]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b3c      	ldr	r3, [pc, #240]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a37      	ldr	r2, [pc, #220]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_PIN_Pin|LCD_CSX_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2106      	movs	r1, #6
 8000dd2:	482b      	ldr	r0, [pc, #172]	; (8000e80 <MX_GPIO_Init+0x1a8>)
 8000dd4:	f002 fc84 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RDX_Pin|LCD_WRX_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000dde:	4829      	ldr	r0, [pc, #164]	; (8000e84 <MX_GPIO_Init+0x1ac>)
 8000de0:	f002 fc7e 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000dea:	4827      	ldr	r0, [pc, #156]	; (8000e88 <MX_GPIO_Init+0x1b0>)
 8000dec:	f002 fc78 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_PIN_Pin|LCD_CSX_Pin;
 8000df0:	2306      	movs	r3, #6
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	481e      	ldr	r0, [pc, #120]	; (8000e80 <MX_GPIO_Init+0x1a8>)
 8000e08:	f002 fabe 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8000e0c:	f248 0301 	movw	r3, #32769	; 0x8001
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <MX_GPIO_Init+0x1b4>)
 8000e24:	f002 fab0 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|LCD_WRX_Pin;
 8000e28:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4810      	ldr	r0, [pc, #64]	; (8000e84 <MX_GPIO_Init+0x1ac>)
 8000e42:	f002 faa1 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480a      	ldr	r0, [pc, #40]	; (8000e88 <MX_GPIO_Init+0x1b0>)
 8000e60:	f002 fa92 	bl	8003388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2105      	movs	r1, #5
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f002 fa41 	bl	80032f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f002 fa5a 	bl	8003328 <HAL_NVIC_EnableIRQ>

}
 8000e74:	bf00      	nop
 8000e76:	3738      	adds	r7, #56	; 0x38
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40021800 	.word	0x40021800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <MX_I2C3_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <MX_I2C3_Init+0x7c>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ece:	f002 fc39 	bl	8003744 <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 fa68 	bl	80013ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ee0:	f003 fbef 	bl	80046c2 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000eea:	f000 fa5f 	bl	80013ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_I2C3_Init+0x74>)
 8000ef2:	f003 fc22 	bl	800473a <HAL_I2CEx_ConfigDigitalFilter>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 fa56 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000053c 	.word	0x2000053c
 8000f08:	40005c00 	.word	0x40005c00
 8000f0c:	000186a0 	.word	0x000186a0

08000f10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a29      	ldr	r2, [pc, #164]	; (8000fd4 <HAL_I2C_MspInit+0xc4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d14b      	bne.n	8000fca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = SDA_Pin;
 8000f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4815      	ldr	r0, [pc, #84]	; (8000fdc <HAL_I2C_MspInit+0xcc>)
 8000f88:	f002 f9fe 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCL_Pin;
 8000f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f92:	2312      	movs	r3, #18
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <HAL_I2C_MspInit+0xd0>)
 8000faa:	f002 f9ed 	bl	8003388 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_I2C_MspInit+0xc8>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40005c00 	.word	0x40005c00
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <l3gd20Init>:
uint8_t id_get_tx[2] = {0, };



void l3gd20Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	uint8_t cmd_init_write[2] = {0x20, 0x0F};
 8000fea:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 8000fee:	80bb      	strh	r3, [r7, #4]
	// write CTRL_REG1 to NORMAL MODE
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <l3gd20Init+0x34>)
 8000ff6:	f002 fb73 	bl	80036e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, cmd_init_write, 2, 0xFF);
 8000ffa:	1d39      	adds	r1, r7, #4
 8000ffc:	23ff      	movs	r3, #255	; 0xff
 8000ffe:	2202      	movs	r2, #2
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <l3gd20Init+0x38>)
 8001002:	f005 fbaa 	bl	800675a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2102      	movs	r1, #2
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <l3gd20Init+0x34>)
 800100c:	f002 fb68 	bl	80036e0 <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40020800 	.word	0x40020800
 800101c:	20000594 	.word	0x20000594

08001020 <l3gd20_Start>:

void l3gd20_Start(void) // Gyro Start
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	b0ad      	sub	sp, #180	; 0xb4
 8001024:	af04      	add	r7, sp, #16
	uint8_t ms_init_write[2] = {0x28, 0x40};
 8001026:	f244 0328 	movw	r3, #16424	; 0x4028
 800102a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	uint8_t test_read_init[2] = {0xA8, }, read_buff[2]={0, },
 800102e:	23a8      	movs	r3, #168	; 0xa8
 8001030:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8001034:	2300      	movs	r3, #0
 8001036:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

			X_L_Read_INIT[2] = {0xE8, }, X_L_Read_BUF[2]={0, },
 800103a:	23e8      	movs	r3, #232	; 0xe8
 800103c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			X_H_Read_INIT[2] = {0xA9, }, X_H_Read_BUF[2]={0, },
 8001046:	23a9      	movs	r3, #169	; 0xa9
 8001048:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800104c:	2300      	movs	r3, #0
 800104e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			Y_L_Read_INIT[2] = {0xAA, }, Y_L_Read_BUF[2]={0, },
 8001052:	23aa      	movs	r3, #170	; 0xaa
 8001054:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8001058:	2300      	movs	r3, #0
 800105a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			Y_H_Read_INIT[2] = {0xAB, }, Y_H_Read_BUF[2]={0, },
 800105e:	23ab      	movs	r3, #171	; 0xab
 8001060:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8001064:	2300      	movs	r3, #0
 8001066:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			Z_L_Read_INIT[2] = {0xAC, }, Z_L_Read_BUF[2]={0, },
 800106a:	23ac      	movs	r3, #172	; 0xac
 800106c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8001070:	2300      	movs	r3, #0
 8001072:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			Z_H_Read_INIT[2] = {0xAD, }, Z_H_Read_BUF[2]={0, };
 8001076:	23ad      	movs	r3, #173	; 0xad
 8001078:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800107c:	2300      	movs	r3, #0
 800107e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64


	// write CTRL_REG1 to NORMAL MODE

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	4845      	ldr	r0, [pc, #276]	; (800119c <l3gd20_Start+0x17c>)
 8001088:	f002 fb2a 	bl	80036e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, ms_init_write, 2, 0xFF);
 800108c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001090:	23ff      	movs	r3, #255	; 0xff
 8001092:	2202      	movs	r2, #2
 8001094:	4842      	ldr	r0, [pc, #264]	; (80011a0 <l3gd20_Start+0x180>)
 8001096:	f005 fb60 	bl	800675a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2102      	movs	r1, #2
 800109e:	483f      	ldr	r0, [pc, #252]	; (800119c <l3gd20_Start+0x17c>)
 80010a0:	f002 fb1e 	bl	80036e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2102      	movs	r1, #2
 80010a8:	483c      	ldr	r0, [pc, #240]	; (800119c <l3gd20_Start+0x17c>)
 80010aa:	f002 fb19 	bl	80036e0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi5, test_read_init, read_buff, 2, 0xFF);
 80010ae:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80010b2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2302      	movs	r3, #2
 80010bc:	4838      	ldr	r0, [pc, #224]	; (80011a0 <l3gd20_Start+0x180>)
 80010be:	f005 fd99 	bl	8006bf4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2102      	movs	r1, #2
 80010c6:	4835      	ldr	r0, [pc, #212]	; (800119c <l3gd20_Start+0x17c>)
 80010c8:	f002 fb0a 	bl	80036e0 <HAL_GPIO_WritePin>

    // ms bit '1' Auto read test
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2102      	movs	r1, #2
 80010d0:	4832      	ldr	r0, [pc, #200]	; (800119c <l3gd20_Start+0x17c>)
 80010d2:	f002 fb05 	bl	80036e0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi5, X_L_Read_INIT, X_L_Read_BUF, 2, 0xFF);
 80010d6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80010da:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2302      	movs	r3, #2
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <l3gd20_Start+0x180>)
 80010e6:	f005 fd85 	bl	8006bf4 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&hspi5,  X_H_Read_BUF, 2, 0xFF);
 80010ea:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80010ee:	23ff      	movs	r3, #255	; 0xff
 80010f0:	2202      	movs	r2, #2
 80010f2:	482b      	ldr	r0, [pc, #172]	; (80011a0 <l3gd20_Start+0x180>)
 80010f4:	f005 fc6d 	bl	80069d2 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi5,  Y_L_Read_BUF, 2, 0xFF);
 80010f8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80010fc:	23ff      	movs	r3, #255	; 0xff
 80010fe:	2202      	movs	r2, #2
 8001100:	4827      	ldr	r0, [pc, #156]	; (80011a0 <l3gd20_Start+0x180>)
 8001102:	f005 fc66 	bl	80069d2 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi5,  Y_H_Read_BUF, 2, 0xFF);
 8001106:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800110a:	23ff      	movs	r3, #255	; 0xff
 800110c:	2202      	movs	r2, #2
 800110e:	4824      	ldr	r0, [pc, #144]	; (80011a0 <l3gd20_Start+0x180>)
 8001110:	f005 fc5f 	bl	80069d2 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi5,  Z_L_Read_BUF, 2, 0xFF);
 8001114:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	2202      	movs	r2, #2
 800111c:	4820      	ldr	r0, [pc, #128]	; (80011a0 <l3gd20_Start+0x180>)
 800111e:	f005 fc58 	bl	80069d2 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi5,  Z_H_Read_BUF, 2, 0xFF);
 8001122:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001126:	23ff      	movs	r3, #255	; 0xff
 8001128:	2202      	movs	r2, #2
 800112a:	481d      	ldr	r0, [pc, #116]	; (80011a0 <l3gd20_Start+0x180>)
 800112c:	f005 fc51 	bl	80069d2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2102      	movs	r1, #2
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <l3gd20_Start+0x17c>)
 8001136:	f002 fad3 	bl	80036e0 <HAL_GPIO_WritePin>

	uint8_t gyroData_test[100]={0, };
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2260      	movs	r2, #96	; 0x60
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00e f919 	bl	800f37c <memset>
	sprintf((char *)gyroData_test, "\n Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
			X_L_Read_BUF[1], X_H_Read_BUF[1], Y_L_Read_BUF[1], Y_H_Read_BUF[1], Z_L_Read_BUF[1], Z_H_Read_BUF[1]);
 800114a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
	sprintf((char *)gyroData_test, "\n Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
 800114e:	461d      	mov	r5, r3
			X_L_Read_BUF[1], X_H_Read_BUF[1], Y_L_Read_BUF[1], Y_H_Read_BUF[1], Z_L_Read_BUF[1], Z_H_Read_BUF[1]);
 8001150:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
	sprintf((char *)gyroData_test, "\n Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
 8001154:	461e      	mov	r6, r3
			X_L_Read_BUF[1], X_H_Read_BUF[1], Y_L_Read_BUF[1], Y_H_Read_BUF[1], Z_L_Read_BUF[1], Z_H_Read_BUF[1]);
 8001156:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800115a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800115e:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001162:	f897 0065 	ldrb.w	r0, [r7, #101]	; 0x65
	sprintf((char *)gyroData_test, "\n Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
 8001166:	4604      	mov	r4, r0
 8001168:	4638      	mov	r0, r7
 800116a:	9403      	str	r4, [sp, #12]
 800116c:	9102      	str	r1, [sp, #8]
 800116e:	9201      	str	r2, [sp, #4]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4633      	mov	r3, r6
 8001174:	462a      	mov	r2, r5
 8001176:	490b      	ldr	r1, [pc, #44]	; (80011a4 <l3gd20_Start+0x184>)
 8001178:	f00e fa16 	bl	800f5a8 <siprintf>
	HAL_UART_Transmit(&huart1, gyroData_test, strlen(gyroData_test), 0xFF);
 800117c:	463b      	mov	r3, r7
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f836 	bl	80001f0 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	4639      	mov	r1, r7
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <l3gd20_Start+0x188>)
 800118e:	f007 f8be 	bl	800830e <HAL_UART_Transmit>

//	sprintf((char *)gyroData_tx, "Gyro Value : \r\n X : %d %d\r\n Y : %d %d\r\n Z : %d %d\r\n",
//			xl_rx[1], xh_rx[1], yl_rx[1], yh_rx[1], zl_rx[1], zh_rx[1]);
//	HAL_UART_Transmit(&huart1, gyroData_tx, strlen(gyroData_tx), 0xFF);

}
 8001192:	bf00      	nop
 8001194:	37a4      	adds	r7, #164	; 0xa4
 8001196:	46bd      	mov	sp, r7
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	bf00      	nop
 800119c:	40020800 	.word	0x40020800
 80011a0:	20000594 	.word	0x20000594
 80011a4:	0800fe68 	.word	0x0800fe68
 80011a8:	20000724 	.word	0x20000724

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f000 feee 	bl	8001f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f81e 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f7ff fd8e 	bl	8000cd8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011bc:	f000 fe4c 	bl	8001e58 <MX_USART1_UART_Init>
  MX_SPI5_Init();
 80011c0:	f000 f8fa 	bl	80013b8 <MX_SPI5_Init>
  MX_I2C3_Init();
 80011c4:	f7ff fe64 	bl	8000e90 <MX_I2C3_Init>
  MX_TIM1_Init();
 80011c8:	f000 fc1a 	bl	8001a00 <MX_TIM1_Init>
  MX_TIM10_Init();
 80011cc:	f000 fcd2 	bl	8001b74 <MX_TIM10_Init>
  MX_TIM7_Init();
 80011d0:	f000 fc9a 	bl	8001b08 <MX_TIM7_Init>
  MX_ADC1_Init();
 80011d4:	f7ff f9e6 	bl	80005a4 <MX_ADC1_Init>
  MX_CAN1_Init();
 80011d8:	f7ff fab2 	bl	8000740 <MX_CAN1_Init>
  MX_CAN2_Init();
 80011dc:	f7ff fb0c 	bl	80007f8 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  l3gd20Init();
 80011e0:	f7ff ff00 	bl	8000fe4 <l3gd20Init>
  stmpe811_init();
 80011e4:	f000 fa7e 	bl	80016e4 <stmpe811_init>
  //HAL_TIM_Base_Start_IT(&htim1); // TIM -> disable (Cause RTOS)

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80011e8:	f7ff fc88 	bl	8000afc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011ec:	f00a fffe 	bl	800c1ec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <main+0x44>
	...

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00e f8ba 	bl	800f37c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <SystemClock_Config+0xcc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <SystemClock_Config+0xcc>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <SystemClock_Config+0xd0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <SystemClock_Config+0xd0>)
 800123e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001268:	23a8      	movs	r3, #168	; 0xa8
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001270:	2307      	movs	r3, #7
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fd1b 	bl	8005cb4 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001284:	f000 f892 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2105      	movs	r1, #5
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 ff7c 	bl	80061a4 <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b2:	f000 f87b 	bl	80013ac <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3750      	adds	r7, #80	; 0x50
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d104      	bne.n	80012e2 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		osSemaphoreRelease(hBinarySem01Handle);
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <HAL_GPIO_EXTI_Callback+0x24>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f00b f86d 	bl	800c3bc <osSemaphoreRelease>
	}
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000284 	.word	0x20000284

080012f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 flag = 1;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000590 	.word	0x20000590

08001310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12f      	bne.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x72>
  {
		uint8_t flag;

		flag++;
 8001322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001326:	3301      	adds	r3, #1
 8001328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t ff[30]={0};
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	831a      	strh	r2, [r3, #24]
		sprintf((char *)ff,"\n Interrupt count : %d \r\n",flag);
 8001344:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4913      	ldr	r1, [pc, #76]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800134e:	4618      	mov	r0, r3
 8001350:	f00e f92a 	bl	800f5a8 <siprintf>
		HAL_UART_Transmit(&huart1, ff, strlen(ff), 0xFF);
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ff49 	bl	80001f0 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	f107 0108 	add.w	r1, r7, #8
 8001366:	23ff      	movs	r3, #255	; 0xff
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800136a:	f006 ffd0 	bl	800830e <HAL_UART_Transmit>

		if(flag==0xFF)
 800136e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001372:	2bff      	cmp	r3, #255	; 0xff
 8001374:	d105      	bne.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x72>
		{
	      flag=0;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      HAL_TIM_Base_Stop_IT(&htim1);
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800137e:	f006 f8e9 	bl	8007554 <HAL_TIM_Base_Stop_IT>
		}
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d101      	bne.n	8001390 <HAL_TIM_PeriodElapsedCallback+0x80>
    HAL_IncTick();
 800138c:	f000 fe22 	bl	8001fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40010000 	.word	0x40010000
 800139c:	0800fea0 	.word	0x0800fea0
 80013a0:	20000724 	.word	0x20000724
 80013a4:	20000648 	.word	0x20000648
 80013a8:	40001000 	.word	0x40001000

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_SPI5_Init+0x64>)
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <MX_SPI5_Init+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_SPI5_Init+0x64>)
 80013c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_SPI5_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_SPI5_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_SPI5_Init+0x64>)
 80013d8:	2202      	movs	r2, #2
 80013da:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_SPI5_Init+0x64>)
 80013de:	2201      	movs	r2, #1
 80013e0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_SPI5_Init+0x64>)
 80013e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_SPI5_Init+0x64>)
 80013ec:	2218      	movs	r2, #24
 80013ee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_SPI5_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_SPI5_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <MX_SPI5_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_SPI5_Init+0x64>)
 8001404:	220a      	movs	r2, #10
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_SPI5_Init+0x64>)
 800140a:	f005 f91d 	bl	8006648 <HAL_SPI_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001414:	f7ff ffca 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000594 	.word	0x20000594
 8001420:	40015000 	.word	0x40015000

08001424 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_SPI_MspInit+0x94>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d134      	bne.n	80014b0 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <HAL_SPI_MspInit+0x98>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <HAL_SPI_MspInit+0x98>)
 8001450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_SPI_MspInit+0x98>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_SPI_MspInit+0x98>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_SPI_MspInit+0x98>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_SPI_MspInit+0x98>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800147e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001490:	2305      	movs	r3, #5
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <HAL_SPI_MspInit+0x9c>)
 800149c:	f001 ff74 	bl	8003388 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 7, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2107      	movs	r1, #7
 80014a4:	2055      	movs	r0, #85	; 0x55
 80014a6:	f001 ff23 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80014aa:	2055      	movs	r0, #85	; 0x55
 80014ac:	f001 ff3c 	bl	8003328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40015000 	.word	0x40015000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40021400 	.word	0x40021400

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_MspInit+0x54>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a11      	ldr	r2, [pc, #68]	; (8001518 <HAL_MspInit+0x54>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_MspInit+0x54>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_MspInit+0x54>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_MspInit+0x54>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_MspInit+0x54>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	210f      	movs	r1, #15
 8001506:	f06f 0001 	mvn.w	r0, #1
 800150a:	f001 fef1 	bl	80032f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_InitTick+0xe4>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_InitTick+0xe4>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_InitTick+0xe4>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001548:	f107 0210 	add.w	r2, r7, #16
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f005 f846 	bl	80065e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001562:	f005 f817 	bl	8006594 <HAL_RCC_GetPCLK1Freq>
 8001566:	6378      	str	r0, [r7, #52]	; 0x34
 8001568:	e004      	b.n	8001574 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800156a:	f005 f813 	bl	8006594 <HAL_RCC_GetPCLK1Freq>
 800156e:	4603      	mov	r3, r0
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <HAL_InitTick+0xe8>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	0c9b      	lsrs	r3, r3, #18
 800157e:	3b01      	subs	r3, #1
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_InitTick+0xec>)
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <HAL_InitTick+0xf0>)
 8001586:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_InitTick+0xec>)
 800158a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_InitTick+0xec>)
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_InitTick+0xec>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_InitTick+0xec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_InitTick+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015a8:	4817      	ldr	r0, [pc, #92]	; (8001608 <HAL_InitTick+0xec>)
 80015aa:	f005 ff13 	bl	80073d4 <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d11b      	bne.n	80015f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015bc:	4812      	ldr	r0, [pc, #72]	; (8001608 <HAL_InitTick+0xec>)
 80015be:	f005 ff59 	bl	8007474 <HAL_TIM_Base_Start_IT>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d111      	bne.n	80015f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015d0:	2036      	movs	r0, #54	; 0x36
 80015d2:	f001 fea9 	bl	8003328 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d808      	bhi.n	80015ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	2036      	movs	r0, #54	; 0x36
 80015e2:	f001 fe85 	bl	80032f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_InitTick+0xf4>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	e002      	b.n	80015f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	431bde83 	.word	0x431bde83
 8001608:	200005ec 	.word	0x200005ec
 800160c:	40001000 	.word	0x40001000
 8001610:	20000014 	.word	0x20000014

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001644:	2001      	movs	r0, #1
 8001646:	f002 f865 	bl	8003714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <CAN1_RX0_IRQHandler+0x10>)
 8001656:	f001 fb63 	bl	8002d20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000021c 	.word	0x2000021c

08001664 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800166a:	f006 f8b9 	bl	80077e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001670:	f006 f8b6 	bl	80077e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000648 	.word	0x20000648
 800167c:	200006d8 	.word	0x200006d8

08001680 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <TIM6_DAC_IRQHandler+0x10>)
 8001686:	f006 f8ab 	bl	80077e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200005ec 	.word	0x200005ec

08001694 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <CAN2_RX0_IRQHandler+0x10>)
 800169a:	f001 fb41 	bl	8002d20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000244 	.word	0x20000244

080016a8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <CAN2_RX1_IRQHandler+0x10>)
 80016ae:	f001 fb37 	bl	8002d20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000244 	.word	0x20000244

080016bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <OTG_HS_IRQHandler+0x10>)
 80016c2:	f003 f9c9 	bl	8004a58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200059a0 	.word	0x200059a0

080016d0 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <SPI5_IRQHandler+0x10>)
 80016d6:	f005 fc2f 	bl	8006f38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000594 	.word	0x20000594

080016e4 <stmpe811_init>:
uint16_t STMPE811_addr=0x82;
uint8_t T_buffer[8];
uint8_t R_buffer[8];

void stmpe811_init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
    T_buffer[7] = 0x00;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <stmpe811_init+0x7c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	71da      	strb	r2, [r3, #7]
    R_buffer[7] = 0x00;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <stmpe811_init+0x80>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	71da      	strb	r2, [r3, #7]


    stmpe811_write(0x02,0x03); // Reset bit 1
 80016f4:	2103      	movs	r1, #3
 80016f6:	2002      	movs	r0, #2
 80016f8:	f000 f8e4 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x00,0x03); // Reset bit 0
 80016fc:	2103      	movs	r1, #3
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f8e0 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x08,0x04);  // GPIO, TSC, ADC clock on
 8001704:	2104      	movs	r1, #4
 8001706:	2008      	movs	r0, #8
 8001708:	f000 f8dc 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x49,0x20); // sampling time: 80, 12-bit ADC
 800170c:	2120      	movs	r1, #32
 800170e:	2049      	movs	r0, #73	; 0x49
 8001710:	f000 f8d8 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x01,0x21);  // ADC frequency: 3.25MHz
 8001714:	2121      	movs	r1, #33	; 0x21
 8001716:	2001      	movs	r0, #1
 8001718:	f000 f8d4 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x9A,0x41); // Average 4 samples, detect delay 500 us, settling time 500 us
 800171c:	2141      	movs	r1, #65	; 0x41
 800171e:	209a      	movs	r0, #154	; 0x9a
 8001720:	f000 f8d0 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x01,0x4A); // FIFO threshold: 0x01
 8001724:	214a      	movs	r1, #74	; 0x4a
 8001726:	2001      	movs	r0, #1
 8001728:	f000 f8cc 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x01,0x4B); // Reset FIFO bit 1
 800172c:	214b      	movs	r1, #75	; 0x4b
 800172e:	2001      	movs	r0, #1
 8001730:	f000 f8c8 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x00,0x4B); // Reset FIFO bit 0
 8001734:	214b      	movs	r1, #75	; 0x4b
 8001736:	2000      	movs	r0, #0
 8001738:	f000 f8c4 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x01,0x56); // Touchscreen controller fraction: 1, whole part: 7
 800173c:	2156      	movs	r1, #86	; 0x56
 800173e:	2001      	movs	r0, #1
 8001740:	f000 f8c0 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x01,0x58);  // Maximum current of TSC: 80mA
 8001744:	2158      	movs	r1, #88	; 0x58
 8001746:	2001      	movs	r0, #1
 8001748:	f000 f8bc 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0xFF,0x0B); // Clear all interrupt status
 800174c:	210b      	movs	r1, #11
 800174e:	20ff      	movs	r0, #255	; 0xff
 8001750:	f000 f8b8 	bl	80018c4 <stmpe811_write>
    stmpe811_write(0x01,0x40); // Enable TSC
 8001754:	2140      	movs	r1, #64	; 0x40
 8001756:	2001      	movs	r0, #1
 8001758:	f000 f8b4 	bl	80018c4 <stmpe811_write>

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000634 	.word	0x20000634
 8001764:	2000063c 	.word	0x2000063c

08001768 <stmpe811_read>:

uint8_t stmpe811_read(uint8_t* x, uint8_t* y)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af04      	add	r7, sp, #16
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
       HAL_I2C_Mem_Read(&hi2c3, STMPE811_addr, 0x40, 1, R_buffer, 1, 1000);
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <stmpe811_read+0xe4>)
 8001774:	8819      	ldrh	r1, [r3, #0]
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	2301      	movs	r3, #1
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <stmpe811_read+0xe8>)
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	4832      	ldr	r0, [pc, #200]	; (8001854 <stmpe811_read+0xec>)
 800178a:	f002 fa19 	bl	8003bc0 <HAL_I2C_Mem_Read>
       HAL_Delay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f000 fc40 	bl	8002014 <HAL_Delay>

       if (R_buffer[0] & 0x80)
 8001794:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <stmpe811_read+0xe8>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b25b      	sxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	da51      	bge.n	8001842 <stmpe811_read+0xda>
       {
		  // FIFO number
		  HAL_I2C_Mem_Read(&hi2c3, STMPE811_addr, 0x4C, 1, R_buffer + 1, 1, 1000);
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <stmpe811_read+0xe4>)
 80017a0:	8819      	ldrh	r1, [r3, #0]
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <stmpe811_read+0xf0>)
 80017a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017a8:	9202      	str	r2, [sp, #8]
 80017aa:	2201      	movs	r2, #1
 80017ac:	9201      	str	r2, [sp, #4]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	224c      	movs	r2, #76	; 0x4c
 80017b4:	4827      	ldr	r0, [pc, #156]	; (8001854 <stmpe811_read+0xec>)
 80017b6:	f002 fa03 	bl	8003bc0 <HAL_I2C_Mem_Read>

		  HAL_I2C_Mem_Read(&hi2c3, STMPE811_addr, 0xD7, 1, R_buffer + 2, 4, 1000);
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <stmpe811_read+0xe4>)
 80017bc:	8819      	ldrh	r1, [r3, #0]
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <stmpe811_read+0xf4>)
 80017c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c4:	9202      	str	r2, [sp, #8]
 80017c6:	2204      	movs	r2, #4
 80017c8:	9201      	str	r2, [sp, #4]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	22d7      	movs	r2, #215	; 0xd7
 80017d0:	4820      	ldr	r0, [pc, #128]	; (8001854 <stmpe811_read+0xec>)
 80017d2:	f002 f9f5 	bl	8003bc0 <HAL_I2C_Mem_Read>
       else
       {
        return 0;
       }

       *x = (R_buffer[2] << 4) | (R_buffer[3] >> 4);
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <stmpe811_read+0xe8>)
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	b25a      	sxtb	r2, r3
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <stmpe811_read+0xe8>)
 80017e0:	78db      	ldrb	r3, [r3, #3]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	701a      	strb	r2, [r3, #0]
       *y = ((R_buffer[3] & 0x0F) <<8) | R_buffer[4];
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <stmpe811_read+0xe8>)
 80017f4:	791a      	ldrb	r2, [r3, #4]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	701a      	strb	r2, [r3, #0]

       T_buffer[0] = 0x01;  // Reset FIFO bit 1
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <stmpe811_read+0xf8>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
       HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x4B, 1, T_buffer, 1, 1000);
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <stmpe811_read+0xe4>)
 8001802:	8819      	ldrh	r1, [r3, #0]
 8001804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <stmpe811_read+0xf8>)
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	224b      	movs	r2, #75	; 0x4b
 8001816:	480f      	ldr	r0, [pc, #60]	; (8001854 <stmpe811_read+0xec>)
 8001818:	f002 f8d8 	bl	80039cc <HAL_I2C_Mem_Write>

       T_buffer[0] = 0x00;  // Reset FIFO bit 0
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <stmpe811_read+0xf8>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
       HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, 0x4B, 1, T_buffer, 1, 1000);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <stmpe811_read+0xe4>)
 8001824:	8819      	ldrh	r1, [r3, #0]
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	2301      	movs	r3, #1
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <stmpe811_read+0xf8>)
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2301      	movs	r3, #1
 8001836:	224b      	movs	r2, #75	; 0x4b
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <stmpe811_read+0xec>)
 800183a:	f002 f8c7 	bl	80039cc <HAL_I2C_Mem_Write>

       return 1;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <stmpe811_read+0xdc>
        return 0;
 8001842:	2300      	movs	r3, #0

}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000008 	.word	0x20000008
 8001850:	2000063c 	.word	0x2000063c
 8001854:	2000053c 	.word	0x2000053c
 8001858:	2000063d 	.word	0x2000063d
 800185c:	2000063e 	.word	0x2000063e
 8001860:	20000634 	.word	0x20000634

08001864 <stmpe811_Test>:

void stmpe811_Test(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b09a      	sub	sp, #104	; 0x68
 8001868:	af00      	add	r7, sp, #0

	uint16_t x0 = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t y0 = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	stmpe811_read(&x0, &y0);
 8001876:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800187a:	f107 0366 	add.w	r3, r7, #102	; 0x66
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff71 	bl	8001768 <stmpe811_read>


	uint8_t i2cdata[100]={0, };
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2260      	movs	r2, #96	; 0x60
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f00d fd73 	bl	800f37c <memset>
	sprintf((char *)&i2cdata, "\n location : %d %d\r\n", x0, y0);
 8001896:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800189a:	461a      	mov	r2, r3
 800189c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80018a0:	4638      	mov	r0, r7
 80018a2:	4906      	ldr	r1, [pc, #24]	; (80018bc <stmpe811_Test+0x58>)
 80018a4:	f00d fe80 	bl	800f5a8 <siprintf>
	HAL_UART_Transmit(&huart1, i2cdata, 50, 0xFF);
 80018a8:	4639      	mov	r1, r7
 80018aa:	23ff      	movs	r3, #255	; 0xff
 80018ac:	2232      	movs	r2, #50	; 0x32
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <stmpe811_Test+0x5c>)
 80018b0:	f006 fd2d 	bl	800830e <HAL_UART_Transmit>

}
 80018b4:	bf00      	nop
 80018b6:	3768      	adds	r7, #104	; 0x68
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0800febc 	.word	0x0800febc
 80018c0:	20000724 	.word	0x20000724

080018c4 <stmpe811_write>:

void stmpe811_write(uint8_t bit_cmd,uint8_t Wdata)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af04      	add	r7, sp, #16
 80018ca:	4603      	mov	r3, r0
 80018cc:	460a      	mov	r2, r1
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71bb      	strb	r3, [r7, #6]
	if(bit_cmd == 0x02)  // reset bit 1
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d115      	bne.n	8001906 <stmpe811_write+0x42>
	{
		T_buffer[0] = bit_cmd;
 80018da:	4a22      	ldr	r2, [pc, #136]	; (8001964 <stmpe811_write+0xa0>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, Wdata, 1, T_buffer, 1, 1000);
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <stmpe811_write+0xa4>)
 80018e2:	8819      	ldrh	r1, [r3, #0]
 80018e4:	79bb      	ldrb	r3, [r7, #6]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <stmpe811_write+0xa0>)
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	481c      	ldr	r0, [pc, #112]	; (800196c <stmpe811_write+0xa8>)
 80018fa:	f002 f867 	bl	80039cc <HAL_I2C_Mem_Write>
	    HAL_Delay(10);
 80018fe:	200a      	movs	r0, #10
 8001900:	f000 fb88 	bl	8002014 <HAL_Delay>
	{
		T_buffer[0] = bit_cmd;
		HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, Wdata, 1, T_buffer, 1, 1000);
	}

}
 8001904:	e02a      	b.n	800195c <stmpe811_write+0x98>
	else if(bit_cmd == 0x00) // reset bit 0
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d115      	bne.n	8001938 <stmpe811_write+0x74>
		T_buffer[0] = bit_cmd;
 800190c:	4a15      	ldr	r2, [pc, #84]	; (8001964 <stmpe811_write+0xa0>)
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, Wdata, 1, T_buffer, 1, 1000);
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <stmpe811_write+0xa4>)
 8001914:	8819      	ldrh	r1, [r3, #0]
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	b29a      	uxth	r2, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2301      	movs	r3, #1
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <stmpe811_write+0xa0>)
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2301      	movs	r3, #1
 800192a:	4810      	ldr	r0, [pc, #64]	; (800196c <stmpe811_write+0xa8>)
 800192c:	f002 f84e 	bl	80039cc <HAL_I2C_Mem_Write>
	    HAL_Delay(2);
 8001930:	2002      	movs	r0, #2
 8001932:	f000 fb6f 	bl	8002014 <HAL_Delay>
}
 8001936:	e011      	b.n	800195c <stmpe811_write+0x98>
		T_buffer[0] = bit_cmd;
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <stmpe811_write+0xa0>)
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(&hi2c3, STMPE811_addr, Wdata, 1, T_buffer, 1, 1000);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <stmpe811_write+0xa4>)
 8001940:	8819      	ldrh	r1, [r3, #0]
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	b29a      	uxth	r2, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	2301      	movs	r3, #1
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <stmpe811_write+0xa0>)
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2301      	movs	r3, #1
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <stmpe811_write+0xa8>)
 8001958:	f002 f838 	bl	80039cc <HAL_I2C_Mem_Write>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000634 	.word	0x20000634
 8001968:	20000008 	.word	0x20000008
 800196c:	2000053c 	.word	0x2000053c

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f00d fcb2 	bl	800f308 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20030000 	.word	0x20030000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20000644 	.word	0x20000644
 80019d8:	200060e0 	.word	0x200060e0

080019dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b092      	sub	sp, #72	; 0x48
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2220      	movs	r2, #32
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00d fca6 	bl	800f37c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a30:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001a32:	4a34      	ldr	r2, [pc, #208]	; (8001b04 <MX_TIM1_Init+0x104>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 41.99-1;
 8001a36:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001a38:	2228      	movs	r2, #40	; 0x28
 8001a3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001a44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a56:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a5c:	4828      	ldr	r0, [pc, #160]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001a5e:	f005 fda8 	bl	80075b2 <HAL_TIM_PWM_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a68:	f7ff fca0 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4821      	ldr	r0, [pc, #132]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001a7c:	f006 fb18 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a86:	f7ff fc91 	bl	80013ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8a:	2360      	movs	r3, #96	; 0x60
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 41999;
 8001a8e:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aac:	2200      	movs	r2, #0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4813      	ldr	r0, [pc, #76]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001ab2:	f005 ff9d 	bl	80079f0 <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001abc:	f7ff fc76 	bl	80013ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4807      	ldr	r0, [pc, #28]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001ae4:	f006 fb60 	bl	80081a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001aee:	f7ff fc5d 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <MX_TIM1_Init+0x100>)
 8001af4:	f000 f8f2 	bl	8001cdc <HAL_TIM_MspPostInit>

}
 8001af8:	bf00      	nop
 8001afa:	3748      	adds	r7, #72	; 0x48
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000648 	.word	0x20000648
 8001b04:	40010000 	.word	0x40010000

08001b08 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0e:	463b      	mov	r3, r7
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <MX_TIM7_Init+0x68>)
 8001b1a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b38:	f005 fc4c 	bl	80073d4 <HAL_TIM_Base_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001b42:	f7ff fc33 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_TIM7_Init+0x64>)
 8001b54:	f006 faac 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001b5e:	f7ff fc25 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000690 	.word	0x20000690
 8001b70:	40001400 	.word	0x40001400

08001b74 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <MX_TIM10_Init+0x98>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 41.99-1;
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001b94:	2228      	movs	r2, #40	; 0x28
 8001b96:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001ba0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001bb2:	4815      	ldr	r0, [pc, #84]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001bb4:	f005 fc0e 	bl	80073d4 <HAL_TIM_Base_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001bbe:	f7ff fbf5 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001bc2:	4811      	ldr	r0, [pc, #68]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001bc4:	f005 fcf5 	bl	80075b2 <HAL_TIM_PWM_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001bce:	f7ff fbed 	bl	80013ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd2:	2360      	movs	r3, #96	; 0x60
 8001bd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	4619      	mov	r1, r3
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001bea:	f005 ff01 	bl	80079f0 <HAL_TIM_PWM_ConfigChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001bf4:	f7ff fbda 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <MX_TIM10_Init+0x94>)
 8001bfa:	f000 f86f 	bl	8001cdc <HAL_TIM_MspPostInit>

}
 8001bfe:	bf00      	nop
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200006d8 	.word	0x200006d8
 8001c0c:	40014400 	.word	0x40014400

08001c10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <HAL_TIM_PWM_MspInit+0x48>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d115      	bne.n	8001c4e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_TIM_PWM_MspInit+0x4c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <HAL_TIM_PWM_MspInit+0x4c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_TIM_PWM_MspInit+0x4c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2106      	movs	r1, #6
 8001c42:	2019      	movs	r0, #25
 8001c44:	f001 fb54 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c48:	2019      	movs	r0, #25
 8001c4a:	f001 fb6d 	bl	8003328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <HAL_TIM_Base_MspInit+0x70>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_TIM_Base_MspInit+0x74>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <HAL_TIM_Base_MspInit+0x74>)
 8001c7c:	f043 0320 	orr.w	r3, r3, #32
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_TIM_Base_MspInit+0x74>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001c8e:	e01a      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <HAL_TIM_Base_MspInit+0x78>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d115      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_TIM_Base_MspInit+0x74>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_TIM_Base_MspInit+0x74>)
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_TIM_Base_MspInit+0x74>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2106      	movs	r1, #6
 8001cba:	2019      	movs	r0, #25
 8001cbc:	f001 fb18 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cc0:	2019      	movs	r0, #25
 8001cc2:	f001 fb31 	bl	8003328 <HAL_NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40001400 	.word	0x40001400
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40014400 	.word	0x40014400

08001cdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_TIM_MspPostInit+0xb0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d11f      	bne.n	8001d3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d08:	f043 0310 	orr.w	r3, r3, #16
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_PIN_Pin;
 8001d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM1_PIN_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4817      	ldr	r0, [pc, #92]	; (8001d94 <HAL_TIM_MspPostInit+0xb8>)
 8001d38:	f001 fb26 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001d3c:	e022      	b.n	8001d84 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM10)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_TIM_MspPostInit+0xbc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d11d      	bne.n	8001d84 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_TIM_MspPostInit+0xb4>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM10_PIN_Pin;
 8001d64:	2340      	movs	r3, #64	; 0x40
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d74:	2303      	movs	r3, #3
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM10_PIN_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4807      	ldr	r0, [pc, #28]	; (8001d9c <HAL_TIM_MspPostInit+0xc0>)
 8001d80:	f001 fb02 	bl	8003388 <HAL_GPIO_Init>
}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40014400 	.word	0x40014400
 8001d9c:	40021400 	.word	0x40021400

08001da0 <pwm_duty_control>:

uint16_t arr=0;
uint16_t pul_count=41999;

void pwm_duty_control(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b09a      	sub	sp, #104	; 0x68
 8001da4:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001da6:	2100      	movs	r1, #0
 8001da8:	4824      	ldr	r0, [pc, #144]	; (8001e3c <pwm_duty_control+0x9c>)
 8001daa:	f005 fc51 	bl	8007650 <HAL_TIM_PWM_Start>
   // TIM1->CCR1 = (uint16_t)(41999-(uint16_t)(419.99*50));
   // duty 50% change
   //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);

   arr++;
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <pwm_duty_control+0xa0>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <pwm_duty_control+0xa0>)
 8001db8:	801a      	strh	r2, [r3, #0]
   if(arr >= 100)arr=0;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <pwm_duty_control+0xa0>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	2b63      	cmp	r3, #99	; 0x63
 8001dc0:	d902      	bls.n	8001dc8 <pwm_duty_control+0x28>
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <pwm_duty_control+0xa0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	801a      	strh	r2, [r3, #0]
   TIM1->CCR1 = (pul_count-((pul_count/100)*arr));
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <pwm_duty_control+0xa4>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <pwm_duty_control+0xa4>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <pwm_duty_control+0xa8>)
 8001dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <pwm_duty_control+0xa0>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	1aca      	subs	r2, r1, r3
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <pwm_duty_control+0xac>)
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
   HAL_Delay(10);
 8001dec:	200a      	movs	r0, #10
 8001dee:	f000 f911 	bl	8002014 <HAL_Delay>

   uint8_t get_in[100]={0, };
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2260      	movs	r2, #96	; 0x60
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00d fabd 	bl	800f37c <memset>
   unsigned char percen = '%';
 8001e02:	2325      	movs	r3, #37	; 0x25
 8001e04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   sprintf(&get_in, "Duty rate : %d %c \r\n",(100-arr), percen);
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <pwm_duty_control+0xa0>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001e10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e14:	4638      	mov	r0, r7
 8001e16:	490e      	ldr	r1, [pc, #56]	; (8001e50 <pwm_duty_control+0xb0>)
 8001e18:	f00d fbc6 	bl	800f5a8 <siprintf>
   HAL_UART_Transmit(&huart1, get_in, strlen(get_in), 0xff);
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe f9e6 	bl	80001f0 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4639      	mov	r1, r7
 8001e2a:	23ff      	movs	r3, #255	; 0xff
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <pwm_duty_control+0xb4>)
 8001e2e:	f006 fa6e 	bl	800830e <HAL_UART_Transmit>

}
 8001e32:	bf00      	nop
 8001e34:	3768      	adds	r7, #104	; 0x68
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000648 	.word	0x20000648
 8001e40:	20000720 	.word	0x20000720
 8001e44:	20000010 	.word	0x20000010
 8001e48:	51eb851f 	.word	0x51eb851f
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	0800fed4 	.word	0x0800fed4
 8001e54:	20000724 	.word	0x20000724

08001e58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <MX_USART1_UART_Init+0x50>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e90:	f006 f9f0 	bl	8008274 <HAL_UART_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e9a:	f7ff fa87 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000724 	.word	0x20000724
 8001ea8:	40011000 	.word	0x40011000

08001eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_UART_MspInit+0x84>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12c      	bne.n	8001f28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_UART_MspInit+0x88>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_UART_MspInit+0x88>)
 8001ed8:	f043 0310 	orr.w	r3, r3, #16
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_UART_MspInit+0x88>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_UART_MspInit+0x88>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_UART_MspInit+0x88>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_UART_MspInit+0x88>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f18:	2307      	movs	r3, #7
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <HAL_UART_MspInit+0x8c>)
 8001f24:	f001 fa30 	bl	8003388 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40011000 	.word	0x40011000
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020000 	.word	0x40020000

08001f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f40:	480d      	ldr	r0, [pc, #52]	; (8001f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f42:	490e      	ldr	r1, [pc, #56]	; (8001f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f58:	4c0b      	ldr	r4, [pc, #44]	; (8001f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f66:	f7ff fd39 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f00d f9d3 	bl	800f314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6e:	f7ff f91d 	bl	80011ac <main>
  bx  lr    
 8001f72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f7c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001f80:	0800fff8 	.word	0x0800fff8
  ldr r2, =_sbss
 8001f84:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001f88:	200060dc 	.word	0x200060dc

08001f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC_IRQHandler>
	...

08001f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <HAL_Init+0x40>)
 8001f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_Init+0x40>)
 8001fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_Init+0x40>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f001 f98e 	bl	80032da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	200f      	movs	r0, #15
 8001fc0:	f7ff faac 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff fa7e 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023c00 	.word	0x40023c00

08001fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x20>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000018 	.word	0x20000018
 8001ff8:	20000768 	.word	0x20000768

08001ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_GetTick+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000768 	.word	0x20000768

08002014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff ffee 	bl	8001ffc <HAL_GetTick>
 8002020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d005      	beq.n	800203a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_Delay+0x44>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800203a:	bf00      	nop
 800203c:	f7ff ffde 	bl	8001ffc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8f7      	bhi.n	800203c <HAL_Delay+0x28>
  {
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000018 	.word	0x20000018

0800205c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e033      	b.n	80020da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fae4 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020a2:	f023 0302 	bic.w	r3, r3, #2
 80020a6:	f043 0202 	orr.w	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fa2a 	bl	8002508 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ca:	e001      	b.n	80020d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_Start+0x1a>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e0b2      	b.n	8002264 <HAL_ADC_Start+0x180>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d018      	beq.n	8002146 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002124:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_ADC_Start+0x18c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_ADC_Start+0x190>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0c9a      	lsrs	r2, r3, #18
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002138:	e002      	b.n	8002140 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3b01      	subs	r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f9      	bne.n	800213a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d17a      	bne.n	800224a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800217e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002192:	d106      	bne.n	80021a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f023 0206 	bic.w	r2, r3, #6
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	645a      	str	r2, [r3, #68]	; 0x44
 80021a0:	e002      	b.n	80021a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b0:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_ADC_Start+0x194>)
 80021b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d12a      	bne.n	8002220 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2b      	ldr	r2, [pc, #172]	; (800227c <HAL_ADC_Start+0x198>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d015      	beq.n	8002200 <HAL_ADC_Start+0x11c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a29      	ldr	r2, [pc, #164]	; (8002280 <HAL_ADC_Start+0x19c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d105      	bne.n	80021ea <HAL_ADC_Start+0x106>
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_ADC_Start+0x194>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a25      	ldr	r2, [pc, #148]	; (8002284 <HAL_ADC_Start+0x1a0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d136      	bne.n	8002262 <HAL_ADC_Start+0x17e>
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_ADC_Start+0x194>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d130      	bne.n	8002262 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d129      	bne.n	8002262 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	e020      	b.n	8002262 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_ADC_Start+0x198>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d11b      	bne.n	8002262 <HAL_ADC_Start+0x17e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d114      	bne.n	8002262 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	e00b      	b.n	8002262 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f043 0210 	orr.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	2000000c 	.word	0x2000000c
 8002274:	431bde83 	.word	0x431bde83
 8002278:	40012300 	.word	0x40012300
 800227c:	40012000 	.word	0x40012000
 8002280:	40012100 	.word	0x40012100
 8002284:	40012200 	.word	0x40012200

08002288 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1c>
 80022bc:	2302      	movs	r3, #2
 80022be:	e113      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x244>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d925      	bls.n	800231c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68d9      	ldr	r1, [r3, #12]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	2207      	movs	r2, #7
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43da      	mvns	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	400a      	ands	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68d9      	ldr	r1, [r3, #12]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4618      	mov	r0, r3
 8002308:	4603      	mov	r3, r0
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4403      	add	r3, r0
 800230e:	3b1e      	subs	r3, #30
 8002310:	409a      	lsls	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	e022      	b.n	8002362 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6919      	ldr	r1, [r3, #16]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	2207      	movs	r2, #7
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	400a      	ands	r2, r1
 800233e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6919      	ldr	r1, [r3, #16]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	4618      	mov	r0, r3
 8002352:	4603      	mov	r3, r0
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4403      	add	r3, r0
 8002358:	409a      	lsls	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b06      	cmp	r3, #6
 8002368:	d824      	bhi.n	80023b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b05      	subs	r3, #5
 800237c:	221f      	movs	r2, #31
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	400a      	ands	r2, r1
 800238a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	4618      	mov	r0, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	3b05      	subs	r3, #5
 80023a6:	fa00 f203 	lsl.w	r2, r0, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34
 80023b2:	e04c      	b.n	800244e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	d824      	bhi.n	8002406 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	3b23      	subs	r3, #35	; 0x23
 80023ce:	221f      	movs	r2, #31
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43da      	mvns	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	400a      	ands	r2, r1
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	3b23      	subs	r3, #35	; 0x23
 80023f8:	fa00 f203 	lsl.w	r2, r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
 8002404:	e023      	b.n	800244e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b41      	subs	r3, #65	; 0x41
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b41      	subs	r3, #65	; 0x41
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_ADC_ConfigChannel+0x250>)
 8002450:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <HAL_ADC_ConfigChannel+0x254>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10f      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1d8>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b12      	cmp	r3, #18
 8002462:	d10b      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <HAL_ADC_ConfigChannel+0x254>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d12b      	bne.n	80024de <HAL_ADC_ConfigChannel+0x23a>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <HAL_ADC_ConfigChannel+0x258>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d003      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x1f4>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b11      	cmp	r3, #17
 8002496:	d122      	bne.n	80024de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_ADC_ConfigChannel+0x258>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d111      	bne.n	80024de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_ADC_ConfigChannel+0x25c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_ADC_ConfigChannel+0x260>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	0c9a      	lsrs	r2, r3, #18
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40012300 	.word	0x40012300
 80024f8:	40012000 	.word	0x40012000
 80024fc:	10000012 	.word	0x10000012
 8002500:	2000000c 	.word	0x2000000c
 8002504:	431bde83 	.word	0x431bde83

08002508 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002510:	4b79      	ldr	r3, [pc, #484]	; (80026f8 <ADC_Init+0x1f0>)
 8002512:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	431a      	orrs	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800253c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	021a      	lsls	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	4a58      	ldr	r2, [pc, #352]	; (80026fc <ADC_Init+0x1f4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d022      	beq.n	80025e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6899      	ldr	r1, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6899      	ldr	r1, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	e00f      	b.n	8002606 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002604:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0202 	bic.w	r2, r2, #2
 8002614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6899      	ldr	r1, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e1b      	ldrb	r3, [r3, #24]
 8002620:	005a      	lsls	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01b      	beq.n	800266c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002642:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002652:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	035a      	lsls	r2, r3, #13
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	e007      	b.n	800267c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800267a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800268a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	3b01      	subs	r3, #1
 8002698:	051a      	lsls	r2, r3, #20
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6899      	ldr	r1, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026be:	025a      	lsls	r2, r3, #9
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	029a      	lsls	r2, r3, #10
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40012300 	.word	0x40012300
 80026fc:	0f000001 	.word	0x0f000001

08002700 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0ed      	b.n	80028ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe f8a0 	bl	8000864 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002734:	f7ff fc62 	bl	8001ffc <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800273a:	e012      	b.n	8002762 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800273c:	f7ff fc5e 	bl	8001ffc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b0a      	cmp	r3, #10
 8002748:	d90b      	bls.n	8002762 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2205      	movs	r2, #5
 800275a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0c5      	b.n	80028ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0e5      	beq.n	800273c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0202 	bic.w	r2, r2, #2
 800277e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002780:	f7ff fc3c 	bl	8001ffc <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002786:	e012      	b.n	80027ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002788:	f7ff fc38 	bl	8001ffc <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b0a      	cmp	r3, #10
 8002794:	d90b      	bls.n	80027ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2205      	movs	r2, #5
 80027a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e09f      	b.n	80028ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e5      	bne.n	8002788 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7e1b      	ldrb	r3, [r3, #24]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d108      	bne.n	80027d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e007      	b.n	80027e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7e5b      	ldrb	r3, [r3, #25]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d108      	bne.n	8002800 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e007      	b.n	8002810 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7e9b      	ldrb	r3, [r3, #26]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d108      	bne.n	800282a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0220 	orr.w	r2, r2, #32
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e007      	b.n	800283a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0220 	bic.w	r2, r2, #32
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7edb      	ldrb	r3, [r3, #27]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d108      	bne.n	8002854 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0210 	bic.w	r2, r2, #16
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e007      	b.n	8002864 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0210 	orr.w	r2, r2, #16
 8002862:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7f1b      	ldrb	r3, [r3, #28]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d108      	bne.n	800287e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0208 	orr.w	r2, r2, #8
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e007      	b.n	800288e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0208 	bic.w	r2, r2, #8
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7f5b      	ldrb	r3, [r3, #29]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d108      	bne.n	80028a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0204 	orr.w	r2, r2, #4
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e007      	b.n	80028b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	ea42 0103 	orr.w	r1, r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800290e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d003      	beq.n	800291e <HAL_CAN_ConfigFilter+0x26>
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b02      	cmp	r3, #2
 800291a:	f040 80be 	bne.w	8002a9a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002920:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002938:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	431a      	orrs	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2201      	movs	r2, #1
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	43db      	mvns	r3, r3
 8002970:	401a      	ands	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d123      	bne.n	80029c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3248      	adds	r2, #72	; 0x48
 80029a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029be:	6979      	ldr	r1, [r7, #20]
 80029c0:	3348      	adds	r3, #72	; 0x48
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d122      	bne.n	8002a16 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	431a      	orrs	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3248      	adds	r2, #72	; 0x48
 80029f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a0c:	6979      	ldr	r1, [r7, #20]
 8002a0e:	3348      	adds	r3, #72	; 0x48
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a30:	e007      	b.n	8002a42 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	401a      	ands	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a5c:	e007      	b.n	8002a6e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d107      	bne.n	8002a86 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a8c:	f023 0201 	bic.w	r2, r3, #1
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e006      	b.n	8002aa8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40006400 	.word	0x40006400

08002ab8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002acc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ad6:	7ffb      	ldrb	r3, [r7, #31]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d003      	beq.n	8002ae4 <HAL_CAN_AddTxMessage+0x2c>
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	f040 80b8 	bne.w	8002c54 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80a0 	beq.w	8002c44 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	0e1b      	lsrs	r3, r3, #24
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d907      	bls.n	8002b24 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e09e      	b.n	8002c62 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b24:	2201      	movs	r2, #1
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	6809      	ldr	r1, [r1, #0]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3318      	adds	r3, #24
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	440b      	add	r3, r1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e00f      	b.n	8002b72 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b5c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b66:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3318      	adds	r3, #24
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	440b      	add	r3, r1
 8002b70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	440b      	add	r3, r1
 8002b82:	3304      	adds	r3, #4
 8002b84:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	7d1b      	ldrb	r3, [r3, #20]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d111      	bne.n	8002bb2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3318      	adds	r3, #24
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	6811      	ldr	r1, [r2, #0]
 8002ba2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3318      	adds	r3, #24
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	440b      	add	r3, r1
 8002bae:	3304      	adds	r3, #4
 8002bb0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3307      	adds	r3, #7
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	061a      	lsls	r2, r3, #24
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3306      	adds	r3, #6
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3305      	adds	r3, #5
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	3204      	adds	r2, #4
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	6811      	ldr	r1, [r2, #0]
 8002bda:	ea43 0200 	orr.w	r2, r3, r0
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002be8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3303      	adds	r3, #3
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	061a      	lsls	r2, r3, #24
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	4313      	orrs	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	7812      	ldrb	r2, [r2, #0]
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	6811      	ldr	r1, [r2, #0]
 8002c10:	ea43 0200 	orr.w	r2, r3, r0
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3318      	adds	r3, #24
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	6811      	ldr	r1, [r2, #0]
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3318      	adds	r3, #24
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	440b      	add	r3, r1
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e00e      	b.n	8002c62 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e006      	b.n	8002c62 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3724      	adds	r7, #36	; 0x24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c80:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c82:	7afb      	ldrb	r3, [r7, #11]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d002      	beq.n	8002c8e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d11d      	bne.n	8002cca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cec:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d002      	beq.n	8002cfa <HAL_CAN_IsTxMessagePending+0x22>
 8002cf4:	7afb      	ldrb	r3, [r7, #11]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d10b      	bne.n	8002d12 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	069b      	lsls	r3, r3, #26
 8002d04:	401a      	ands	r2, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	069b      	lsls	r3, r3, #26
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d001      	beq.n	8002d12 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d07c      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d023      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f983 	bl	800308e <HAL_CAN_TxMailbox0CompleteCallback>
 8002d88:	e016      	b.n	8002db8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9c:	e00c      	b.n	8002db8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
 8002db0:	e002      	b.n	8002db8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f989 	bl	80030ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d024      	beq.n	8002e0c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f963 	bl	80030a2 <HAL_CAN_TxMailbox1CompleteCallback>
 8002ddc:	e016      	b.n	8002e0c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
 8002df0:	e00c      	b.n	8002e0c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
 8002e04:	e002      	b.n	8002e0c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f969 	bl	80030de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d024      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f943 	bl	80030b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e30:	e016      	b.n	8002e60 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e00c      	b.n	8002e60 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d004      	beq.n	8002e5a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
 8002e58:	e002      	b.n	8002e60 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f949 	bl	80030f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2210      	movs	r2, #16
 8002e82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f930 	bl	8003106 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe fa16 	bl	80012f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00c      	beq.n	8002ee8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d006      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2208      	movs	r2, #8
 8002f02:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f912 	bl	800312e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8f9 	bl	800311a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2210      	movs	r2, #16
 8002f42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f8fc 	bl	8003142 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2208      	movs	r2, #8
 8002f64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8f5 	bl	8003156 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d07b      	beq.n	800306e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d072      	beq.n	8003066 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	f043 0304 	orr.w	r3, r3, #4
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d043      	beq.n	8003066 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d03e      	beq.n	8003066 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fee:	2b60      	cmp	r3, #96	; 0x60
 8002ff0:	d02b      	beq.n	800304a <HAL_CAN_IRQHandler+0x32a>
 8002ff2:	2b60      	cmp	r3, #96	; 0x60
 8002ff4:	d82e      	bhi.n	8003054 <HAL_CAN_IRQHandler+0x334>
 8002ff6:	2b50      	cmp	r3, #80	; 0x50
 8002ff8:	d022      	beq.n	8003040 <HAL_CAN_IRQHandler+0x320>
 8002ffa:	2b50      	cmp	r3, #80	; 0x50
 8002ffc:	d82a      	bhi.n	8003054 <HAL_CAN_IRQHandler+0x334>
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
 8003000:	d019      	beq.n	8003036 <HAL_CAN_IRQHandler+0x316>
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d826      	bhi.n	8003054 <HAL_CAN_IRQHandler+0x334>
 8003006:	2b30      	cmp	r3, #48	; 0x30
 8003008:	d010      	beq.n	800302c <HAL_CAN_IRQHandler+0x30c>
 800300a:	2b30      	cmp	r3, #48	; 0x30
 800300c:	d822      	bhi.n	8003054 <HAL_CAN_IRQHandler+0x334>
 800300e:	2b10      	cmp	r3, #16
 8003010:	d002      	beq.n	8003018 <HAL_CAN_IRQHandler+0x2f8>
 8003012:	2b20      	cmp	r3, #32
 8003014:	d005      	beq.n	8003022 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003016:	e01d      	b.n	8003054 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003020:	e019      	b.n	8003056 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	f043 0310 	orr.w	r3, r3, #16
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800302a:	e014      	b.n	8003056 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	f043 0320 	orr.w	r3, r3, #32
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003034:	e00f      	b.n	8003056 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800303e:	e00a      	b.n	8003056 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003048:	e005      	b.n	8003056 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003052:	e000      	b.n	8003056 <HAL_CAN_IRQHandler+0x336>
            break;
 8003054:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003064:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2204      	movs	r2, #4
 800306c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f872 	bl	800316a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003086:	bf00      	nop
 8003088:	3728      	adds	r7, #40	; 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b2:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	60d3      	str	r3, [r2, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0307 	and.w	r3, r3, #7
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db0b      	blt.n	800320e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	4907      	ldr	r1, [pc, #28]	; (800321c <__NVIC_EnableIRQ+0x38>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2001      	movs	r0, #1
 8003206:	fa00 f202 	lsl.w	r2, r0, r2
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff4c 	bl	8003180 <__NVIC_SetPriorityGrouping>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003302:	f7ff ff61 	bl	80031c8 <__NVIC_GetPriorityGrouping>
 8003306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	6978      	ldr	r0, [r7, #20]
 800330e:	f7ff ffb1 	bl	8003274 <NVIC_EncodePriority>
 8003312:	4602      	mov	r2, r0
 8003314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff80 	bl	8003220 <__NVIC_SetPriority>
}
 8003320:	bf00      	nop
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff ff54 	bl	80031e4 <__NVIC_EnableIRQ>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d004      	beq.n	8003362 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00c      	b.n	800337c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2205      	movs	r2, #5
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e177      	b.n	8003694 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f040 8166 	bne.w	800368e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d005      	beq.n	80033da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b03      	cmp	r3, #3
 8003446:	d017      	beq.n	8003478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d123      	bne.n	80034cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80c0 	beq.w	800368e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	4a65      	ldr	r2, [pc, #404]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352a:	4a61      	ldr	r2, [pc, #388]	; (80036b0 <HAL_GPIO_Init+0x328>)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a58      	ldr	r2, [pc, #352]	; (80036b4 <HAL_GPIO_Init+0x32c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d037      	beq.n	80035c6 <HAL_GPIO_Init+0x23e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a57      	ldr	r2, [pc, #348]	; (80036b8 <HAL_GPIO_Init+0x330>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d031      	beq.n	80035c2 <HAL_GPIO_Init+0x23a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a56      	ldr	r2, [pc, #344]	; (80036bc <HAL_GPIO_Init+0x334>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02b      	beq.n	80035be <HAL_GPIO_Init+0x236>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a55      	ldr	r2, [pc, #340]	; (80036c0 <HAL_GPIO_Init+0x338>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d025      	beq.n	80035ba <HAL_GPIO_Init+0x232>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a54      	ldr	r2, [pc, #336]	; (80036c4 <HAL_GPIO_Init+0x33c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01f      	beq.n	80035b6 <HAL_GPIO_Init+0x22e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a53      	ldr	r2, [pc, #332]	; (80036c8 <HAL_GPIO_Init+0x340>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d019      	beq.n	80035b2 <HAL_GPIO_Init+0x22a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_GPIO_Init+0x344>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_GPIO_Init+0x226>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a51      	ldr	r2, [pc, #324]	; (80036d0 <HAL_GPIO_Init+0x348>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00d      	beq.n	80035aa <HAL_GPIO_Init+0x222>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a50      	ldr	r2, [pc, #320]	; (80036d4 <HAL_GPIO_Init+0x34c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <HAL_GPIO_Init+0x21e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4f      	ldr	r2, [pc, #316]	; (80036d8 <HAL_GPIO_Init+0x350>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <HAL_GPIO_Init+0x21a>
 800359e:	2309      	movs	r3, #9
 80035a0:	e012      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035a2:	230a      	movs	r3, #10
 80035a4:	e010      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035a6:	2308      	movs	r3, #8
 80035a8:	e00e      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035aa:	2307      	movs	r3, #7
 80035ac:	e00c      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035ae:	2306      	movs	r3, #6
 80035b0:	e00a      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035b2:	2305      	movs	r3, #5
 80035b4:	e008      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035b6:	2304      	movs	r3, #4
 80035b8:	e006      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035ba:	2303      	movs	r3, #3
 80035bc:	e004      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035be:	2302      	movs	r3, #2
 80035c0:	e002      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_GPIO_Init+0x240>
 80035c6:	2300      	movs	r3, #0
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	f002 0203 	and.w	r2, r2, #3
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	4093      	lsls	r3, r2
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d8:	4935      	ldr	r1, [pc, #212]	; (80036b0 <HAL_GPIO_Init+0x328>)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e6:	4b3d      	ldr	r3, [pc, #244]	; (80036dc <HAL_GPIO_Init+0x354>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800360a:	4a34      	ldr	r2, [pc, #208]	; (80036dc <HAL_GPIO_Init+0x354>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003610:	4b32      	ldr	r3, [pc, #200]	; (80036dc <HAL_GPIO_Init+0x354>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003634:	4a29      	ldr	r2, [pc, #164]	; (80036dc <HAL_GPIO_Init+0x354>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800363a:	4b28      	ldr	r3, [pc, #160]	; (80036dc <HAL_GPIO_Init+0x354>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800365e:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <HAL_GPIO_Init+0x354>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003664:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_GPIO_Init+0x354>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <HAL_GPIO_Init+0x354>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3301      	adds	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b0f      	cmp	r3, #15
 8003698:	f67f ae84 	bls.w	80033a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40013800 	.word	0x40013800
 80036b4:	40020000 	.word	0x40020000
 80036b8:	40020400 	.word	0x40020400
 80036bc:	40020800 	.word	0x40020800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40021400 	.word	0x40021400
 80036cc:	40021800 	.word	0x40021800
 80036d0:	40021c00 	.word	0x40021c00
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40022400 	.word	0x40022400
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f0:	787b      	ldrb	r3, [r7, #1]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036fc:	e003      	b.n	8003706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	041a      	lsls	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	619a      	str	r2, [r3, #24]
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d006      	beq.n	8003738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800372a:	4a05      	ldr	r2, [pc, #20]	; (8003740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fdc8 	bl	80012c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40013c00 	.word	0x40013c00

08003744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e12b      	b.n	80039ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fbd0 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a8:	f002 fef4 	bl	8006594 <HAL_RCC_GetPCLK1Freq>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a81      	ldr	r2, [pc, #516]	; (80039b8 <HAL_I2C_Init+0x274>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d807      	bhi.n	80037c8 <HAL_I2C_Init+0x84>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a80      	ldr	r2, [pc, #512]	; (80039bc <HAL_I2C_Init+0x278>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e006      	b.n	80037d6 <HAL_I2C_Init+0x92>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a7d      	ldr	r2, [pc, #500]	; (80039c0 <HAL_I2C_Init+0x27c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0e7      	b.n	80039ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a78      	ldr	r2, [pc, #480]	; (80039c4 <HAL_I2C_Init+0x280>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <HAL_I2C_Init+0x274>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d802      	bhi.n	8003818 <HAL_I2C_Init+0xd4>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3301      	adds	r3, #1
 8003816:	e009      	b.n	800382c <HAL_I2C_Init+0xe8>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	4a69      	ldr	r2, [pc, #420]	; (80039c8 <HAL_I2C_Init+0x284>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	3301      	adds	r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	495c      	ldr	r1, [pc, #368]	; (80039b8 <HAL_I2C_Init+0x274>)
 8003848:	428b      	cmp	r3, r1
 800384a:	d819      	bhi.n	8003880 <HAL_I2C_Init+0x13c>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e59      	subs	r1, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fbb1 f3f3 	udiv	r3, r1, r3
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003860:	400b      	ands	r3, r1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_I2C_Init+0x138>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e59      	subs	r1, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fbb1 f3f3 	udiv	r3, r1, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	e051      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 800387c:	2304      	movs	r3, #4
 800387e:	e04f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d111      	bne.n	80038ac <HAL_I2C_Init+0x168>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e012      	b.n	80038d2 <HAL_I2C_Init+0x18e>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	0099      	lsls	r1, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Init+0x196>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e022      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10e      	bne.n	8003900 <HAL_I2C_Init+0x1bc>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e58      	subs	r0, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	440b      	add	r3, r1
 80038f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fe:	e00f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6809      	ldr	r1, [r1, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6911      	ldr	r1, [r2, #16]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	430b      	orrs	r3, r1
 8003962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	000186a0 	.word	0x000186a0
 80039bc:	001e847f 	.word	0x001e847f
 80039c0:	003d08ff 	.word	0x003d08ff
 80039c4:	431bde83 	.word	0x431bde83
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	817b      	strh	r3, [r7, #10]
 80039de:	460b      	mov	r3, r1
 80039e0:	813b      	strh	r3, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039e6:	f7fe fb09 	bl	8001ffc <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	f040 80d9 	bne.w	8003bac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2319      	movs	r3, #25
 8003a00:	2201      	movs	r2, #1
 8003a02:	496d      	ldr	r1, [pc, #436]	; (8003bb8 <HAL_I2C_Mem_Write+0x1ec>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fc7f 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0cc      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_Mem_Write+0x56>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0c5      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d007      	beq.n	8003a48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2221      	movs	r2, #33	; 0x21
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <HAL_I2C_Mem_Write+0x1f0>)
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a8a:	88f8      	ldrh	r0, [r7, #6]
 8003a8c:	893a      	ldrh	r2, [r7, #8]
 8003a8e:	8979      	ldrh	r1, [r7, #10]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	4603      	mov	r3, r0
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fab6 	bl	800400c <I2C_RequestMemoryWrite>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d052      	beq.n	8003b4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e081      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fd00 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06b      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d11b      	bne.n	8003b4c <HAL_I2C_Mem_Write+0x180>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1aa      	bne.n	8003aaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fcec 	bl	8004536 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d107      	bne.n	8003b7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e016      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000

08003bc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	; 0x30
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	817b      	strh	r3, [r7, #10]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	813b      	strh	r3, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bda:	f7fe fa0f 	bl	8001ffc <HAL_GetTick>
 8003bde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	f040 8208 	bne.w	8003ffe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	2319      	movs	r3, #25
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	497b      	ldr	r1, [pc, #492]	; (8003de4 <HAL_I2C_Mem_Read+0x224>)
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fb85 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
 8003c06:	e1fb      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_I2C_Mem_Read+0x56>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e1f4      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d007      	beq.n	8003c3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2222      	movs	r2, #34	; 0x22
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a5b      	ldr	r2, [pc, #364]	; (8003de8 <HAL_I2C_Mem_Read+0x228>)
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c7e:	88f8      	ldrh	r0, [r7, #6]
 8003c80:	893a      	ldrh	r2, [r7, #8]
 8003c82:	8979      	ldrh	r1, [r7, #10]
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fa52 	bl	8004138 <I2C_RequestMemoryRead>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e1b0      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d113      	bne.n	8003cce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e184      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d11b      	bne.n	8003d0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e164      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d11b      	bne.n	8003d4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	e144      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d64:	e138      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	f200 80f1 	bhi.w	8003f52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d123      	bne.n	8003dc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fc1b 	bl	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e139      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dbe:	e10b      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d14e      	bne.n	8003e66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4906      	ldr	r1, [pc, #24]	; (8003dec <HAL_I2C_Mem_Read+0x22c>)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa98 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e10e      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
 8003de2:	bf00      	nop
 8003de4:	00100002 	.word	0x00100002
 8003de8:	ffff0000 	.word	0xffff0000
 8003dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e64:	e0b8      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4966      	ldr	r1, [pc, #408]	; (8004008 <HAL_I2C_Mem_Read+0x448>)
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fa49 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0bf      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	2200      	movs	r2, #0
 8003eca:	494f      	ldr	r1, [pc, #316]	; (8004008 <HAL_I2C_Mem_Read+0x448>)
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fa1b 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e091      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f50:	e042      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fb2e 	bl	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e04c      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d118      	bne.n	8003fd8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f47f aec2 	bne.w	8003d66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	4618      	mov	r0, r3
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	00010004 	.word	0x00010004

0800400c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4603      	mov	r3, r0
 800401c:	817b      	strh	r3, [r7, #10]
 800401e:	460b      	mov	r3, r1
 8004020:	813b      	strh	r3, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	2200      	movs	r2, #0
 800403e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f960 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00d      	beq.n	800406a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405c:	d103      	bne.n	8004066 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e05f      	b.n	800412a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800406a:	897b      	ldrh	r3, [r7, #10]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	492d      	ldr	r1, [pc, #180]	; (8004134 <I2C_RequestMemoryWrite+0x128>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f998 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e04c      	b.n	800412a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a8:	6a39      	ldr	r1, [r7, #32]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fa02 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d107      	bne.n	80040ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e02b      	b.n	800412a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040d8:	893b      	ldrh	r3, [r7, #8]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	611a      	str	r2, [r3, #16]
 80040e2:	e021      	b.n	8004128 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040e4:	893b      	ldrh	r3, [r7, #8]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	6a39      	ldr	r1, [r7, #32]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f9dc 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b04      	cmp	r3, #4
 8004108:	d107      	bne.n	800411a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e005      	b.n	800412a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800411e:	893b      	ldrh	r3, [r7, #8]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	00010002 	.word	0x00010002

08004138 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	4608      	mov	r0, r1
 8004142:	4611      	mov	r1, r2
 8004144:	461a      	mov	r2, r3
 8004146:	4603      	mov	r3, r0
 8004148:	817b      	strh	r3, [r7, #10]
 800414a:	460b      	mov	r3, r1
 800414c:	813b      	strh	r3, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004160:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	2200      	movs	r2, #0
 800417a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f8c2 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004198:	d103      	bne.n	80041a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0aa      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041a6:	897b      	ldrh	r3, [r7, #10]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	4952      	ldr	r1, [pc, #328]	; (8004304 <I2C_RequestMemoryRead+0x1cc>)
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f8fa 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e097      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f964 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d107      	bne.n	800420a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e076      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004214:	893b      	ldrh	r3, [r7, #8]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	611a      	str	r2, [r3, #16]
 800421e:	e021      	b.n	8004264 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004220:	893b      	ldrh	r3, [r7, #8]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	b29b      	uxth	r3, r3
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	6a39      	ldr	r1, [r7, #32]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f93e 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2b04      	cmp	r3, #4
 8004244:	d107      	bne.n	8004256 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e050      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004266:	6a39      	ldr	r1, [r7, #32]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f923 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00d      	beq.n	8004290 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2b04      	cmp	r3, #4
 800427a:	d107      	bne.n	800428c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e035      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f82b 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d103      	bne.n	80042d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e013      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	6a3a      	ldr	r2, [r7, #32]
 80042e8:	4906      	ldr	r1, [pc, #24]	; (8004304 <I2C_RequestMemoryRead+0x1cc>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f863 	bl	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	00010002 	.word	0x00010002

08004308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004318:	e025      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d021      	beq.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fd fe6b 	bl	8001ffc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d116      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e023      	b.n	80043ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10d      	bne.n	800438c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	43da      	mvns	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	e00c      	b.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	43da      	mvns	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d0b6      	beq.n	800431a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c4:	e051      	b.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d123      	bne.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e046      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d021      	beq.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fd fde9 	bl	8001ffc <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d116      	bne.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e020      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d10c      	bne.n	800448e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e00b      	b.n	80044a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d18d      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c0:	e02d      	b.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f8ce 	bl	8004664 <I2C_IsAcknowledgeFailed>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e02d      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d021      	beq.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fd fd8f 	bl	8001ffc <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d116      	bne.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e007      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d1ca      	bne.n	80044c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004542:	e02d      	b.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f88d 	bl	8004664 <I2C_IsAcknowledgeFailed>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e02d      	b.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d021      	beq.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455c:	f7fd fd4e 	bl	8001ffc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d116      	bne.n	80045a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e007      	b.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d1ca      	bne.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045c4:	e042      	b.n	800464c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d119      	bne.n	8004608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0210 	mvn.w	r2, #16
 80045dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e029      	b.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004608:	f7fd fcf8 	bl	8001ffc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d116      	bne.n	800464c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e007      	b.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d1b5      	bne.n	80045c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467a:	d11b      	bne.n	80046b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004684:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	f043 0204 	orr.w	r2, r3, #4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d129      	bne.n	800472c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	; 0x24
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0210 	bic.w	r2, r2, #16
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800472c:	2302      	movs	r3, #2
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b20      	cmp	r3, #32
 8004752:	d12a      	bne.n	80047aa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004774:	89fb      	ldrh	r3, [r7, #14]
 8004776:	f023 030f 	bic.w	r3, r3, #15
 800477a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	b29a      	uxth	r2, r3
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	4313      	orrs	r3, r2
 8004784:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	89fa      	ldrh	r2, [r7, #14]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	b08f      	sub	sp, #60	; 0x3c
 80047bc:	af0a      	add	r7, sp, #40	; 0x28
 80047be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e10f      	b.n	80049ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f00a fa79 	bl	800ecdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f004 fa0a 	bl	8008c22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	687e      	ldr	r6, [r7, #4]
 8004816:	466d      	mov	r5, sp
 8004818:	f106 0410 	add.w	r4, r6, #16
 800481c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004828:	e885 0003 	stmia.w	r5, {r0, r1}
 800482c:	1d33      	adds	r3, r6, #4
 800482e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	f004 f8e1 	bl	80089f8 <USB_CoreInit>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0d0      	b.n	80049ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f004 f9f8 	bl	8008c44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	e04a      	b.n	80048f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800485a:	7bfa      	ldrb	r2, [r7, #15]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	333d      	adds	r3, #61	; 0x3d
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	333c      	adds	r3, #60	; 0x3c
 800487e:	7bfa      	ldrb	r2, [r7, #15]
 8004880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004882:	7bfa      	ldrb	r2, [r7, #15]
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	b298      	uxth	r0, r3
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3344      	adds	r3, #68	; 0x44
 8004896:	4602      	mov	r2, r0
 8004898:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800489a:	7bfa      	ldrb	r2, [r7, #15]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	3340      	adds	r3, #64	; 0x40
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	3348      	adds	r3, #72	; 0x48
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048c2:	7bfa      	ldrb	r2, [r7, #15]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	334c      	adds	r3, #76	; 0x4c
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048d6:	7bfa      	ldrb	r2, [r7, #15]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	3354      	adds	r3, #84	; 0x54
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	3301      	adds	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d3af      	bcc.n	800485a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
 80048fe:	e044      	b.n	800498a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004900:	7bfa      	ldrb	r2, [r7, #15]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004916:	7bfa      	ldrb	r2, [r7, #15]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004928:	7bfa      	ldrb	r2, [r7, #15]
 800492a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800492c:	7bfa      	ldrb	r2, [r7, #15]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004942:	7bfa      	ldrb	r2, [r7, #15]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004958:	7bfa      	ldrb	r2, [r7, #15]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800496e:	7bfa      	ldrb	r2, [r7, #15]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	3301      	adds	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d3b5      	bcc.n	8004900 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	687e      	ldr	r6, [r7, #4]
 800499c:	466d      	mov	r5, sp
 800499e:	f106 0410 	add.w	r4, r6, #16
 80049a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80049b2:	1d33      	adds	r3, r6, #4
 80049b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b6:	6838      	ldr	r0, [r7, #0]
 80049b8:	f004 f990 	bl	8008cdc <USB_DevInit>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e00d      	b.n	80049ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f005 fadf 	bl	8009fa6 <USB_DevDisconnect>

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_PCD_Start+0x1c>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e020      	b.n	8004a50 <HAL_PCD_Start+0x5e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d109      	bne.n	8004a32 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d005      	beq.n	8004a32 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f004 f8e2 	bl	8008c00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f005 fa8f 	bl	8009f64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b08d      	sub	sp, #52	; 0x34
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f005 fb4d 	bl	800a10e <USB_GetMode>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 848a 	bne.w	8005390 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f005 fab1 	bl	8009fe8 <USB_ReadInterrupts>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8480 	beq.w	800538e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f005 fa9e 	bl	8009fe8 <USB_ReadInterrupts>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d107      	bne.n	8004ac6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f002 0202 	and.w	r2, r2, #2
 8004ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f005 fa8c 	bl	8009fe8 <USB_ReadInterrupts>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d161      	bne.n	8004b9e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0210 	bic.w	r2, r2, #16
 8004ae8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f003 020f 	and.w	r2, r3, #15
 8004af6:	4613      	mov	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	3304      	adds	r3, #4
 8004b08:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	0c5b      	lsrs	r3, r3, #17
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d124      	bne.n	8004b60 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d035      	beq.n	8004b8e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	6a38      	ldr	r0, [r7, #32]
 8004b36:	f005 f8c3 	bl	8009cc0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b46:	441a      	add	r2, r3
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	6a1a      	ldr	r2, [r3, #32]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b58:	441a      	add	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
 8004b5e:	e016      	b.n	8004b8e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	0c5b      	lsrs	r3, r3, #17
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d110      	bne.n	8004b8e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b72:	2208      	movs	r2, #8
 8004b74:	4619      	mov	r1, r3
 8004b76:	6a38      	ldr	r0, [r7, #32]
 8004b78:	f005 f8a2 	bl	8009cc0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	6a1a      	ldr	r2, [r3, #32]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	091b      	lsrs	r3, r3, #4
 8004b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b88:	441a      	add	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699a      	ldr	r2, [r3, #24]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0210 	orr.w	r2, r2, #16
 8004b9c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f005 fa20 	bl	8009fe8 <USB_ReadInterrupts>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bb2:	f040 80a7 	bne.w	8004d04 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f005 fa25 	bl	800a00e <USB_ReadDevAllOutEpInterrupt>
 8004bc4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004bc6:	e099      	b.n	8004cfc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 808e 	beq.w	8004cf0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f005 fa49 	bl	800a076 <USB_ReadDevOutEPInterrupt>
 8004be4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00c      	beq.n	8004c0a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	2301      	movs	r3, #1
 8004c00:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fec3 	bl	8005990 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00c      	beq.n	8004c2e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	2308      	movs	r3, #8
 8004c24:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 ff99 	bl	8005b60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	461a      	mov	r2, r3
 8004c46:	2310      	movs	r3, #16
 8004c48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d030      	beq.n	8004cb6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b80      	cmp	r3, #128	; 0x80
 8004c5e:	d109      	bne.n	8004c74 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c72:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c76:	4613      	mov	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	3304      	adds	r3, #4
 8004c88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	78db      	ldrb	r3, [r3, #3]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d108      	bne.n	8004ca4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f00a f91e 	bl	800eee0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2320      	movs	r3, #32
 8004cd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	085b      	lsrs	r3, r3, #1
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f47f af62 	bne.w	8004bc8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f005 f96d 	bl	8009fe8 <USB_ReadInterrupts>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d18:	f040 80db 	bne.w	8004ed2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f005 f98e 	bl	800a042 <USB_ReadDevAllInEpInterrupt>
 8004d26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004d2c:	e0cd      	b.n	8004eca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80c2 	beq.w	8004ebe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f005 f9b4 	bl	800a0b2 <USB_ReadDevInEPInterrupt>
 8004d4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d057      	beq.n	8004e06 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69f9      	ldr	r1, [r7, #28]
 8004d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d76:	4013      	ands	r3, r2
 8004d78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d86:	461a      	mov	r2, r3
 8004d88:	2301      	movs	r3, #1
 8004d8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d132      	bne.n	8004dfa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	334c      	adds	r3, #76	; 0x4c
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4403      	add	r3, r0
 8004db4:	3348      	adds	r3, #72	; 0x48
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4419      	add	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4403      	add	r3, r0
 8004dc8:	334c      	adds	r3, #76	; 0x4c
 8004dca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d113      	bne.n	8004dfa <HAL_PCD_IRQHandler+0x3a2>
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	3354      	adds	r3, #84	; 0x54
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d108      	bne.n	8004dfa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004df2:	461a      	mov	r2, r3
 8004df4:	2101      	movs	r1, #1
 8004df6:	f005 f9bb 	bl	800a170 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f009 ffe8 	bl	800edd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2308      	movs	r3, #8
 8004e20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2310      	movs	r3, #16
 8004e3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	461a      	mov	r2, r3
 8004e56:	2340      	movs	r3, #64	; 0x40
 8004e58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d023      	beq.n	8004eac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e66:	6a38      	ldr	r0, [r7, #32]
 8004e68:	f004 f89c 	bl	8008fa4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6e:	4613      	mov	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	3338      	adds	r3, #56	; 0x38
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	78db      	ldrb	r3, [r3, #3]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d108      	bne.n	8004e9a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f00a f835 	bl	800ef04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fcdb 	bl	8005874 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f af2e 	bne.w	8004d2e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f005 f886 	bl	8009fe8 <USB_ReadInterrupts>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee6:	d122      	bne.n	8004f2e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d108      	bne.n	8004f18 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f0e:	2100      	movs	r1, #0
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fec3 	bl	8005c9c <HAL_PCDEx_LPM_Callback>
 8004f16:	e002      	b.n	8004f1e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f009 ffd3 	bl	800eec4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f005 f858 	bl	8009fe8 <USB_ReadInterrupts>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f42:	d112      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d102      	bne.n	8004f5a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f009 ff8f 	bl	800ee78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695a      	ldr	r2, [r3, #20]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004f68:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f005 f83a 	bl	8009fe8 <USB_ReadInterrupts>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	f040 80b7 	bne.w	80050f0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2110      	movs	r1, #16
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f004 f801 	bl	8008fa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fa6:	e046      	b.n	8005036 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800500e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800502e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	3301      	adds	r3, #1
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800503c:	429a      	cmp	r2, r3
 800503e:	d3b3      	bcc.n	8004fa8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800504e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005052:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	2b00      	cmp	r3, #0
 800505a:	d016      	beq.n	800508a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800506c:	f043 030b 	orr.w	r3, r3, #11
 8005070:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005082:	f043 030b 	orr.w	r3, r3, #11
 8005086:	6453      	str	r3, [r2, #68]	; 0x44
 8005088:	e015      	b.n	80050b6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005098:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800509c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80050a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	69fa      	ldr	r2, [r7, #28]
 80050ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b0:	f043 030b 	orr.w	r3, r3, #11
 80050b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050da:	461a      	mov	r2, r3
 80050dc:	f005 f848 	bl	800a170 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80050ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f004 ff77 	bl	8009fe8 <USB_ReadInterrupts>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005104:	d124      	bne.n	8005150 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f005 f80d 	bl	800a12a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f003 ffc2 	bl	800909e <USB_GetDevSpeed>
 800511a:	4603      	mov	r3, r0
 800511c:	461a      	mov	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681c      	ldr	r4, [r3, #0]
 8005126:	f001 fa29 	bl	800657c <HAL_RCC_GetHCLKFreq>
 800512a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	4620      	mov	r0, r4
 8005136:	f003 fcc1 	bl	8008abc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f009 fe73 	bl	800ee26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695a      	ldr	r2, [r3, #20]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800514e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f004 ff47 	bl	8009fe8 <USB_ReadInterrupts>
 800515a:	4603      	mov	r3, r0
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b08      	cmp	r3, #8
 8005162:	d10a      	bne.n	800517a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f009 fe50 	bl	800ee0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f002 0208 	and.w	r2, r2, #8
 8005178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f004 ff32 	bl	8009fe8 <USB_ReadInterrupts>
 8005184:	4603      	mov	r3, r0
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	2b80      	cmp	r3, #128	; 0x80
 800518c:	d122      	bne.n	80051d4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800519a:	2301      	movs	r3, #1
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	e014      	b.n	80051ca <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d105      	bne.n	80051c4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fb27 	bl	8005812 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	3301      	adds	r3, #1
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d3e5      	bcc.n	80051a0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f004 ff05 	bl	8009fe8 <USB_ReadInterrupts>
 80051de:	4603      	mov	r3, r0
 80051e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e8:	d13b      	bne.n	8005262 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051ea:	2301      	movs	r3, #1
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
 80051ee:	e02b      	b.n	8005248 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005204:	4613      	mov	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	3340      	adds	r3, #64	; 0x40
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d115      	bne.n	8005242 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005216:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005218:	2b00      	cmp	r3, #0
 800521a:	da12      	bge.n	8005242 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	4613      	mov	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	333f      	adds	r3, #63	; 0x3f
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005238:	b2db      	uxtb	r3, r3
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fae8 	bl	8005812 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	3301      	adds	r3, #1
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524e:	429a      	cmp	r2, r3
 8005250:	d3ce      	bcc.n	80051f0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f004 febe 	bl	8009fe8 <USB_ReadInterrupts>
 800526c:	4603      	mov	r3, r0
 800526e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005276:	d155      	bne.n	8005324 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005278:	2301      	movs	r3, #1
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
 800527c:	e045      	b.n	800530a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d12e      	bne.n	8005304 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	da2b      	bge.n	8005304 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80052b8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052bc:	429a      	cmp	r2, r3
 80052be:	d121      	bne.n	8005304 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005300:	6053      	str	r3, [r2, #4]
            break;
 8005302:	e007      	b.n	8005314 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	3301      	adds	r3, #1
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005310:	429a      	cmp	r2, r3
 8005312:	d3b4      	bcc.n	800527e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f004 fe5d 	bl	8009fe8 <USB_ReadInterrupts>
 800532e:	4603      	mov	r3, r0
 8005330:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005338:	d10a      	bne.n	8005350 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f009 fdf4 	bl	800ef28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800534e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f004 fe47 	bl	8009fe8 <USB_ReadInterrupts>
 800535a:	4603      	mov	r3, r0
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d115      	bne.n	8005390 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f009 fde4 	bl	800ef44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6859      	ldr	r1, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	e000      	b.n	8005390 <HAL_PCD_IRQHandler+0x938>
      return;
 800538e:	bf00      	nop
    }
  }
}
 8005390:	3734      	adds	r7, #52	; 0x34
 8005392:	46bd      	mov	sp, r7
 8005394:	bd90      	pop	{r4, r7, pc}

08005396 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_PCD_SetAddress+0x1a>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e013      	b.n	80053d8 <HAL_PCD_SetAddress+0x42>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	78fa      	ldrb	r2, [r7, #3]
 80053bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f004 fda5 	bl	8009f18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	4608      	mov	r0, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	70fb      	strb	r3, [r7, #3]
 80053f2:	460b      	mov	r3, r1
 80053f4:	803b      	strh	r3, [r7, #0]
 80053f6:	4613      	mov	r3, r2
 80053f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005402:	2b00      	cmp	r3, #0
 8005404:	da0f      	bge.n	8005426 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	f003 020f 	and.w	r2, r3, #15
 800540c:	4613      	mov	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	3338      	adds	r3, #56	; 0x38
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4413      	add	r3, r2
 800541a:	3304      	adds	r3, #4
 800541c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	705a      	strb	r2, [r3, #1]
 8005424:	e00f      	b.n	8005446 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	f003 020f 	and.w	r2, r3, #15
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	4413      	add	r3, r2
 800543c:	3304      	adds	r3, #4
 800543e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	b2da      	uxtb	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005452:	883a      	ldrh	r2, [r7, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	78ba      	ldrb	r2, [r7, #2]
 800545c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005470:	78bb      	ldrb	r3, [r7, #2]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d102      	bne.n	800547c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_PCD_EP_Open+0xaa>
 8005486:	2302      	movs	r3, #2
 8005488:	e00e      	b.n	80054a8 <HAL_PCD_EP_Open+0xc8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	4618      	mov	r0, r3
 800549a:	f003 fe25 	bl	80090e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80054a6:	7afb      	ldrb	r3, [r7, #11]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	da0f      	bge.n	80054e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	f003 020f 	and.w	r2, r3, #15
 80054ca:	4613      	mov	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	3338      	adds	r3, #56	; 0x38
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	4413      	add	r3, r2
 80054d8:	3304      	adds	r3, #4
 80054da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	705a      	strb	r2, [r3, #1]
 80054e2:	e00f      	b.n	8005504 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	f003 020f 	and.w	r2, r3, #15
 80054ea:	4613      	mov	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	3304      	adds	r3, #4
 80054fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	b2da      	uxtb	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_PCD_EP_Close+0x6e>
 800551a:	2302      	movs	r3, #2
 800551c:	e00e      	b.n	800553c <HAL_PCD_EP_Close+0x8c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	4618      	mov	r0, r3
 800552e:	f003 fe63 	bl	80091f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	460b      	mov	r3, r1
 8005552:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005554:	7afb      	ldrb	r3, [r7, #11]
 8005556:	f003 020f 	and.w	r2, r3, #15
 800555a:	4613      	mov	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	3304      	adds	r3, #4
 800556c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2200      	movs	r2, #0
 800557e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2200      	movs	r2, #0
 8005584:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005586:	7afb      	ldrb	r3, [r7, #11]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	b2da      	uxtb	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d102      	bne.n	80055a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055a0:	7afb      	ldrb	r3, [r7, #11]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	6979      	ldr	r1, [r7, #20]
 80055b8:	f004 f942 	bl	8009840 <USB_EP0StartXfer>
 80055bc:	e008      	b.n	80055d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6979      	ldr	r1, [r7, #20]
 80055cc:	f003 fef0 	bl	80093b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	f003 020f 	and.w	r2, r3, #15
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80055fc:	681b      	ldr	r3, [r3, #0]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
 8005616:	460b      	mov	r3, r1
 8005618:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800561a:	7afb      	ldrb	r3, [r7, #11]
 800561c:	f003 020f 	and.w	r2, r3, #15
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	3338      	adds	r3, #56	; 0x38
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	3304      	adds	r3, #4
 8005630:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2201      	movs	r2, #1
 8005648:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800564a:	7afb      	ldrb	r3, [r7, #11]
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	b2da      	uxtb	r2, r3
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d102      	bne.n	8005664 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	6979      	ldr	r1, [r7, #20]
 800567c:	f004 f8e0 	bl	8009840 <USB_EP0StartXfer>
 8005680:	e008      	b.n	8005694 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	6979      	ldr	r1, [r7, #20]
 8005690:	f003 fe8e 	bl	80093b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	460b      	mov	r3, r1
 80056a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	f003 020f 	and.w	r2, r3, #15
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d901      	bls.n	80056bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e050      	b.n	800575e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	da0f      	bge.n	80056e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	f003 020f 	and.w	r2, r3, #15
 80056ca:	4613      	mov	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	3338      	adds	r3, #56	; 0x38
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	4413      	add	r3, r2
 80056d8:	3304      	adds	r3, #4
 80056da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	705a      	strb	r2, [r3, #1]
 80056e2:	e00d      	b.n	8005700 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056e4:	78fa      	ldrb	r2, [r7, #3]
 80056e6:	4613      	mov	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	3304      	adds	r3, #4
 80056f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_PCD_EP_SetStall+0x82>
 800571c:	2302      	movs	r3, #2
 800571e:	e01e      	b.n	800575e <HAL_PCD_EP_SetStall+0xc0>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68f9      	ldr	r1, [r7, #12]
 800572e:	4618      	mov	r0, r3
 8005730:	f004 fb1e 	bl	8009d70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	b2d9      	uxtb	r1, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800574e:	461a      	mov	r2, r3
 8005750:	f004 fd0e 	bl	800a170 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	460b      	mov	r3, r1
 8005770:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	f003 020f 	and.w	r2, r3, #15
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d901      	bls.n	8005784 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e042      	b.n	800580a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005788:	2b00      	cmp	r3, #0
 800578a:	da0f      	bge.n	80057ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	f003 020f 	and.w	r2, r3, #15
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	3338      	adds	r3, #56	; 0x38
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4413      	add	r3, r2
 80057a0:	3304      	adds	r3, #4
 80057a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	705a      	strb	r2, [r3, #1]
 80057aa:	e00f      	b.n	80057cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	f003 020f 	and.w	r2, r3, #15
 80057b2:	4613      	mov	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	3304      	adds	r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_PCD_EP_ClrStall+0x86>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e00e      	b.n	800580a <HAL_PCD_EP_ClrStall+0xa4>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f004 fb26 	bl	8009e4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800581e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005822:	2b00      	cmp	r3, #0
 8005824:	da0c      	bge.n	8005840 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	f003 020f 	and.w	r2, r3, #15
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	3338      	adds	r3, #56	; 0x38
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	3304      	adds	r3, #4
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e00c      	b.n	800585a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	f003 020f 	and.w	r2, r3, #15
 8005846:	4613      	mov	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	3304      	adds	r3, #4
 8005858:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68f9      	ldr	r1, [r7, #12]
 8005860:	4618      	mov	r0, r3
 8005862:	f004 f945 	bl	8009af0 <USB_EPStopXfer>
 8005866:	4603      	mov	r3, r0
 8005868:	72fb      	strb	r3, [r7, #11]

  return ret;
 800586a:	7afb      	ldrb	r3, [r7, #11]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af02      	add	r7, sp, #8
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	3338      	adds	r3, #56	; 0x38
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	3304      	adds	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d901      	bls.n	80058ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e06c      	b.n	8005986 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d902      	bls.n	80058c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3303      	adds	r3, #3
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058d0:	e02b      	b.n	800592a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d902      	bls.n	80058ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3303      	adds	r3, #3
 80058f2:	089b      	lsrs	r3, r3, #2
 80058f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6919      	ldr	r1, [r3, #16]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005906:	b2db      	uxtb	r3, r3
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	4603      	mov	r3, r0
 800590c:	6978      	ldr	r0, [r7, #20]
 800590e:	f004 f999 	bl	8009c44 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	441a      	add	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	441a      	add	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	b29b      	uxth	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	429a      	cmp	r2, r3
 800593e:	d809      	bhi.n	8005954 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005948:	429a      	cmp	r2, r3
 800594a:	d203      	bcs.n	8005954 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1be      	bne.n	80058d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	429a      	cmp	r2, r3
 800595e:	d811      	bhi.n	8005984 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	2201      	movs	r2, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	43db      	mvns	r3, r3
 800597a:	6939      	ldr	r1, [r7, #16]
 800597c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005980:	4013      	ands	r3, r2
 8005982:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	333c      	adds	r3, #60	; 0x3c
 80059a8:	3304      	adds	r3, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d17b      	bne.n	8005abe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d015      	beq.n	80059fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	4a61      	ldr	r2, [pc, #388]	; (8005b58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	f240 80b9 	bls.w	8005b4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80b3 	beq.w	8005b4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	461a      	mov	r2, r3
 80059f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f8:	6093      	str	r3, [r2, #8]
 80059fa:	e0a7      	b.n	8005b4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	461a      	mov	r2, r3
 8005a14:	2320      	movs	r3, #32
 8005a16:	6093      	str	r3, [r2, #8]
 8005a18:	e098      	b.n	8005b4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f040 8093 	bne.w	8005b4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4a4b      	ldr	r2, [pc, #300]	; (8005b58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d90f      	bls.n	8005a4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	461a      	mov	r2, r3
 8005a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4a:	6093      	str	r3, [r2, #8]
 8005a4c:	e07e      	b.n	8005b4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4413      	add	r3, r2
 8005a60:	3304      	adds	r3, #4
 8005a62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	0159      	lsls	r1, r3, #5
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	440b      	add	r3, r1
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d114      	bne.n	8005ab0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a98:	461a      	mov	r2, r3
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	f004 fb68 	bl	800a170 <USB_EP0_OutStart>
 8005aa0:	e006      	b.n	8005ab0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	441a      	add	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f009 f972 	bl	800eda0 <HAL_PCD_DataOutStageCallback>
 8005abc:	e046      	b.n	8005b4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	4a26      	ldr	r2, [pc, #152]	; (8005b5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d124      	bne.n	8005b10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	461a      	mov	r2, r3
 8005ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae2:	6093      	str	r3, [r2, #8]
 8005ae4:	e032      	b.n	8005b4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d008      	beq.n	8005b02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	461a      	mov	r2, r3
 8005afe:	2320      	movs	r3, #32
 8005b00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f009 f949 	bl	800eda0 <HAL_PCD_DataOutStageCallback>
 8005b0e:	e01d      	b.n	8005b4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d114      	bne.n	8005b40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d108      	bne.n	8005b40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f004 fb18 	bl	800a170 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f009 f92a 	bl	800eda0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	4f54300a 	.word	0x4f54300a
 8005b5c:	4f54310a 	.word	0x4f54310a

08005b60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	333c      	adds	r3, #60	; 0x3c
 8005b78:	3304      	adds	r3, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d90e      	bls.n	8005bb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bac:	461a      	mov	r2, r3
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f009 f8e1 	bl	800ed7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d90c      	bls.n	8005bdc <PCD_EP_OutSetupPacket_int+0x7c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d108      	bne.n	8005bdc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6818      	ldr	r0, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	f004 faca 	bl	800a170 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	4f54300a 	.word	0x4f54300a

08005bec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d107      	bne.n	8005c1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c0a:	883b      	ldrh	r3, [r7, #0]
 8005c0c:	0419      	lsls	r1, r3, #16
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	629a      	str	r2, [r3, #40]	; 0x28
 8005c18:	e028      	b.n	8005c6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4413      	add	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]
 8005c2c:	e00d      	b.n	8005c4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	3340      	adds	r3, #64	; 0x40
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	4413      	add	r3, r2
 8005c42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	3301      	adds	r3, #1
 8005c48:	73fb      	strb	r3, [r7, #15]
 8005c4a:	7bfa      	ldrb	r2, [r7, #15]
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d3ec      	bcc.n	8005c2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c54:	883b      	ldrh	r3, [r7, #0]
 8005c56:	0418      	lsls	r0, r3, #16
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6819      	ldr	r1, [r3, #0]
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	4302      	orrs	r2, r0
 8005c64:	3340      	adds	r3, #64	; 0x40
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	887a      	ldrh	r2, [r7, #2]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e267      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d075      	beq.n	8005dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cd2:	4b88      	ldr	r3, [pc, #544]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d00c      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cde:	4b85      	ldr	r3, [pc, #532]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d112      	bne.n	8005d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cea:	4b82      	ldr	r3, [pc, #520]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf6:	d10b      	bne.n	8005d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf8:	4b7e      	ldr	r3, [pc, #504]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d05b      	beq.n	8005dbc <HAL_RCC_OscConfig+0x108>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d157      	bne.n	8005dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e242      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d18:	d106      	bne.n	8005d28 <HAL_RCC_OscConfig+0x74>
 8005d1a:	4b76      	ldr	r3, [pc, #472]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a75      	ldr	r2, [pc, #468]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e01d      	b.n	8005d64 <HAL_RCC_OscConfig+0xb0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d30:	d10c      	bne.n	8005d4c <HAL_RCC_OscConfig+0x98>
 8005d32:	4b70      	ldr	r3, [pc, #448]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a6f      	ldr	r2, [pc, #444]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	4b6d      	ldr	r3, [pc, #436]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a6c      	ldr	r2, [pc, #432]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e00b      	b.n	8005d64 <HAL_RCC_OscConfig+0xb0>
 8005d4c:	4b69      	ldr	r3, [pc, #420]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a68      	ldr	r2, [pc, #416]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	4b66      	ldr	r3, [pc, #408]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a65      	ldr	r2, [pc, #404]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d013      	beq.n	8005d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6c:	f7fc f946 	bl	8001ffc <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d74:	f7fc f942 	bl	8001ffc <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	; 0x64
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e207      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d86:	4b5b      	ldr	r3, [pc, #364]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0xc0>
 8005d92:	e014      	b.n	8005dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d94:	f7fc f932 	bl	8001ffc <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d9c:	f7fc f92e 	bl	8001ffc <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b64      	cmp	r3, #100	; 0x64
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e1f3      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dae:	4b51      	ldr	r3, [pc, #324]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0xe8>
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d063      	beq.n	8005e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dca:	4b4a      	ldr	r3, [pc, #296]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dd6:	4b47      	ldr	r3, [pc, #284]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d11c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005de2:	4b44      	ldr	r3, [pc, #272]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d116      	bne.n	8005e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dee:	4b41      	ldr	r3, [pc, #260]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_RCC_OscConfig+0x152>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d001      	beq.n	8005e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e1c7      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e06:	4b3b      	ldr	r3, [pc, #236]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4937      	ldr	r1, [pc, #220]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1a:	e03a      	b.n	8005e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d020      	beq.n	8005e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e24:	4b34      	ldr	r3, [pc, #208]	; (8005ef8 <HAL_RCC_OscConfig+0x244>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2a:	f7fc f8e7 	bl	8001ffc <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e32:	f7fc f8e3 	bl	8001ffc <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e1a8      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e44:	4b2b      	ldr	r3, [pc, #172]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0f0      	beq.n	8005e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e50:	4b28      	ldr	r3, [pc, #160]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4925      	ldr	r1, [pc, #148]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	600b      	str	r3, [r1, #0]
 8005e64:	e015      	b.n	8005e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e66:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <HAL_RCC_OscConfig+0x244>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6c:	f7fc f8c6 	bl	8001ffc <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e74:	f7fc f8c2 	bl	8001ffc <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e187      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e86:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f0      	bne.n	8005e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d036      	beq.n	8005f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d016      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ea6:	4b15      	ldr	r3, [pc, #84]	; (8005efc <HAL_RCC_OscConfig+0x248>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eac:	f7fc f8a6 	bl	8001ffc <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb4:	f7fc f8a2 	bl	8001ffc <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e167      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x200>
 8005ed2:	e01b      	b.n	8005f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ed4:	4b09      	ldr	r3, [pc, #36]	; (8005efc <HAL_RCC_OscConfig+0x248>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eda:	f7fc f88f 	bl	8001ffc <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee0:	e00e      	b.n	8005f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ee2:	f7fc f88b 	bl	8001ffc <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d907      	bls.n	8005f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e150      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	42470000 	.word	0x42470000
 8005efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f00:	4b88      	ldr	r3, [pc, #544]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1ea      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8097 	beq.w	8006048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f1e:	4b81      	ldr	r3, [pc, #516]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10f      	bne.n	8005f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	4b7d      	ldr	r3, [pc, #500]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	4a7c      	ldr	r2, [pc, #496]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f38:	6413      	str	r3, [r2, #64]	; 0x40
 8005f3a:	4b7a      	ldr	r3, [pc, #488]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f46:	2301      	movs	r3, #1
 8005f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4a:	4b77      	ldr	r3, [pc, #476]	; (8006128 <HAL_RCC_OscConfig+0x474>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d118      	bne.n	8005f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f56:	4b74      	ldr	r3, [pc, #464]	; (8006128 <HAL_RCC_OscConfig+0x474>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a73      	ldr	r2, [pc, #460]	; (8006128 <HAL_RCC_OscConfig+0x474>)
 8005f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f62:	f7fc f84b 	bl	8001ffc <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6a:	f7fc f847 	bl	8001ffc <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e10c      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f7c:	4b6a      	ldr	r3, [pc, #424]	; (8006128 <HAL_RCC_OscConfig+0x474>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f0      	beq.n	8005f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d106      	bne.n	8005f9e <HAL_RCC_OscConfig+0x2ea>
 8005f90:	4b64      	ldr	r3, [pc, #400]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a63      	ldr	r2, [pc, #396]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9c:	e01c      	b.n	8005fd8 <HAL_RCC_OscConfig+0x324>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b05      	cmp	r3, #5
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x30c>
 8005fa6:	4b5f      	ldr	r3, [pc, #380]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	4a5e      	ldr	r2, [pc, #376]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005fac:	f043 0304 	orr.w	r3, r3, #4
 8005fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb2:	4b5c      	ldr	r3, [pc, #368]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	4a5b      	ldr	r2, [pc, #364]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fbe:	e00b      	b.n	8005fd8 <HAL_RCC_OscConfig+0x324>
 8005fc0:	4b58      	ldr	r3, [pc, #352]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	4a57      	ldr	r2, [pc, #348]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	6713      	str	r3, [r2, #112]	; 0x70
 8005fcc:	4b55      	ldr	r3, [pc, #340]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	4a54      	ldr	r2, [pc, #336]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8005fd2:	f023 0304 	bic.w	r3, r3, #4
 8005fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d015      	beq.n	800600c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe0:	f7fc f80c 	bl	8001ffc <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe8:	f7fc f808 	bl	8001ffc <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e0cb      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffe:	4b49      	ldr	r3, [pc, #292]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0ee      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x334>
 800600a:	e014      	b.n	8006036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600c:	f7fb fff6 	bl	8001ffc <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006012:	e00a      	b.n	800602a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006014:	f7fb fff2 	bl	8001ffc <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e0b5      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602a:	4b3e      	ldr	r3, [pc, #248]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 800602c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1ee      	bne.n	8006014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006036:	7dfb      	ldrb	r3, [r7, #23]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d105      	bne.n	8006048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800603c:	4b39      	ldr	r3, [pc, #228]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 800603e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006040:	4a38      	ldr	r2, [pc, #224]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8006042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80a1 	beq.w	8006194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006052:	4b34      	ldr	r3, [pc, #208]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 030c 	and.w	r3, r3, #12
 800605a:	2b08      	cmp	r3, #8
 800605c:	d05c      	beq.n	8006118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b02      	cmp	r3, #2
 8006064:	d141      	bne.n	80060ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006066:	4b31      	ldr	r3, [pc, #196]	; (800612c <HAL_RCC_OscConfig+0x478>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606c:	f7fb ffc6 	bl	8001ffc <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006074:	f7fb ffc2 	bl	8001ffc <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e087      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69da      	ldr	r2, [r3, #28]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	019b      	lsls	r3, r3, #6
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	3b01      	subs	r3, #1
 80060ac:	041b      	lsls	r3, r3, #16
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	061b      	lsls	r3, r3, #24
 80060b6:	491b      	ldr	r1, [pc, #108]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060bc:	4b1b      	ldr	r3, [pc, #108]	; (800612c <HAL_RCC_OscConfig+0x478>)
 80060be:	2201      	movs	r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c2:	f7fb ff9b 	bl	8001ffc <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ca:	f7fb ff97 	bl	8001ffc <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e05c      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060dc:	4b11      	ldr	r3, [pc, #68]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0f0      	beq.n	80060ca <HAL_RCC_OscConfig+0x416>
 80060e8:	e054      	b.n	8006194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <HAL_RCC_OscConfig+0x478>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f0:	f7fb ff84 	bl	8001ffc <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f8:	f7fb ff80 	bl	8001ffc <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e045      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610a:	4b06      	ldr	r3, [pc, #24]	; (8006124 <HAL_RCC_OscConfig+0x470>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f0      	bne.n	80060f8 <HAL_RCC_OscConfig+0x444>
 8006116:	e03d      	b.n	8006194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d107      	bne.n	8006130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e038      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
 8006124:	40023800 	.word	0x40023800
 8006128:	40007000 	.word	0x40007000
 800612c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <HAL_RCC_OscConfig+0x4ec>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d028      	beq.n	8006190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006148:	429a      	cmp	r2, r3
 800614a:	d121      	bne.n	8006190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006156:	429a      	cmp	r2, r3
 8006158:	d11a      	bne.n	8006190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006160:	4013      	ands	r3, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006168:	4293      	cmp	r3, r2
 800616a:	d111      	bne.n	8006190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	3b01      	subs	r3, #1
 800617a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d107      	bne.n	8006190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800618c:	429a      	cmp	r2, r3
 800618e:	d001      	beq.n	8006194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40023800 	.word	0x40023800

080061a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0cc      	b.n	8006352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061b8:	4b68      	ldr	r3, [pc, #416]	; (800635c <HAL_RCC_ClockConfig+0x1b8>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d90c      	bls.n	80061e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c6:	4b65      	ldr	r3, [pc, #404]	; (800635c <HAL_RCC_ClockConfig+0x1b8>)
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ce:	4b63      	ldr	r3, [pc, #396]	; (800635c <HAL_RCC_ClockConfig+0x1b8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d001      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0b8      	b.n	8006352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d020      	beq.n	800622e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061f8:	4b59      	ldr	r3, [pc, #356]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	4a58      	ldr	r2, [pc, #352]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006210:	4b53      	ldr	r3, [pc, #332]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	4a52      	ldr	r2, [pc, #328]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800621a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800621c:	4b50      	ldr	r3, [pc, #320]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	494d      	ldr	r1, [pc, #308]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	4313      	orrs	r3, r2
 800622c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d044      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d107      	bne.n	8006252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006242:	4b47      	ldr	r3, [pc, #284]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d119      	bne.n	8006282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e07f      	b.n	8006352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b02      	cmp	r3, #2
 8006258:	d003      	beq.n	8006262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800625e:	2b03      	cmp	r3, #3
 8006260:	d107      	bne.n	8006272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006262:	4b3f      	ldr	r3, [pc, #252]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e06f      	b.n	8006352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006272:	4b3b      	ldr	r3, [pc, #236]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e067      	b.n	8006352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006282:	4b37      	ldr	r3, [pc, #220]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f023 0203 	bic.w	r2, r3, #3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	4934      	ldr	r1, [pc, #208]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	4313      	orrs	r3, r2
 8006292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006294:	f7fb feb2 	bl	8001ffc <HAL_GetTick>
 8006298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629a:	e00a      	b.n	80062b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800629c:	f7fb feae 	bl	8001ffc <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e04f      	b.n	8006352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062b2:	4b2b      	ldr	r3, [pc, #172]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 020c 	and.w	r2, r3, #12
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d1eb      	bne.n	800629c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062c4:	4b25      	ldr	r3, [pc, #148]	; (800635c <HAL_RCC_ClockConfig+0x1b8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d20c      	bcs.n	80062ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d2:	4b22      	ldr	r3, [pc, #136]	; (800635c <HAL_RCC_ClockConfig+0x1b8>)
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062da:	4b20      	ldr	r3, [pc, #128]	; (800635c <HAL_RCC_ClockConfig+0x1b8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d001      	beq.n	80062ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e032      	b.n	8006352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062f8:	4b19      	ldr	r3, [pc, #100]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	4916      	ldr	r1, [pc, #88]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006316:	4b12      	ldr	r3, [pc, #72]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	490e      	ldr	r1, [pc, #56]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	4313      	orrs	r3, r2
 8006328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800632a:	f000 f821 	bl	8006370 <HAL_RCC_GetSysClockFreq>
 800632e:	4602      	mov	r2, r0
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	091b      	lsrs	r3, r3, #4
 8006336:	f003 030f 	and.w	r3, r3, #15
 800633a:	490a      	ldr	r1, [pc, #40]	; (8006364 <HAL_RCC_ClockConfig+0x1c0>)
 800633c:	5ccb      	ldrb	r3, [r1, r3]
 800633e:	fa22 f303 	lsr.w	r3, r2, r3
 8006342:	4a09      	ldr	r2, [pc, #36]	; (8006368 <HAL_RCC_ClockConfig+0x1c4>)
 8006344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006346:	4b09      	ldr	r3, [pc, #36]	; (800636c <HAL_RCC_ClockConfig+0x1c8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7fb f8e6 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40023c00 	.word	0x40023c00
 8006360:	40023800 	.word	0x40023800
 8006364:	0800ff3c 	.word	0x0800ff3c
 8006368:	2000000c 	.word	0x2000000c
 800636c:	20000014 	.word	0x20000014

08006370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006374:	b094      	sub	sp, #80	; 0x50
 8006376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	647b      	str	r3, [r7, #68]	; 0x44
 800637c:	2300      	movs	r3, #0
 800637e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006380:	2300      	movs	r3, #0
 8006382:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006388:	4b79      	ldr	r3, [pc, #484]	; (8006570 <HAL_RCC_GetSysClockFreq+0x200>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 030c 	and.w	r3, r3, #12
 8006390:	2b08      	cmp	r3, #8
 8006392:	d00d      	beq.n	80063b0 <HAL_RCC_GetSysClockFreq+0x40>
 8006394:	2b08      	cmp	r3, #8
 8006396:	f200 80e1 	bhi.w	800655c <HAL_RCC_GetSysClockFreq+0x1ec>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_RCC_GetSysClockFreq+0x34>
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d003      	beq.n	80063aa <HAL_RCC_GetSysClockFreq+0x3a>
 80063a2:	e0db      	b.n	800655c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063a4:	4b73      	ldr	r3, [pc, #460]	; (8006574 <HAL_RCC_GetSysClockFreq+0x204>)
 80063a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063a8:	e0db      	b.n	8006562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063aa:	4b73      	ldr	r3, [pc, #460]	; (8006578 <HAL_RCC_GetSysClockFreq+0x208>)
 80063ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063ae:	e0d8      	b.n	8006562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063b0:	4b6f      	ldr	r3, [pc, #444]	; (8006570 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063ba:	4b6d      	ldr	r3, [pc, #436]	; (8006570 <HAL_RCC_GetSysClockFreq+0x200>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d063      	beq.n	800648e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c6:	4b6a      	ldr	r3, [pc, #424]	; (8006570 <HAL_RCC_GetSysClockFreq+0x200>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	099b      	lsrs	r3, r3, #6
 80063cc:	2200      	movs	r2, #0
 80063ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80063d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d8:	633b      	str	r3, [r7, #48]	; 0x30
 80063da:	2300      	movs	r3, #0
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
 80063de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063e2:	4622      	mov	r2, r4
 80063e4:	462b      	mov	r3, r5
 80063e6:	f04f 0000 	mov.w	r0, #0
 80063ea:	f04f 0100 	mov.w	r1, #0
 80063ee:	0159      	lsls	r1, r3, #5
 80063f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063f4:	0150      	lsls	r0, r2, #5
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4621      	mov	r1, r4
 80063fc:	1a51      	subs	r1, r2, r1
 80063fe:	6139      	str	r1, [r7, #16]
 8006400:	4629      	mov	r1, r5
 8006402:	eb63 0301 	sbc.w	r3, r3, r1
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006414:	4659      	mov	r1, fp
 8006416:	018b      	lsls	r3, r1, #6
 8006418:	4651      	mov	r1, sl
 800641a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800641e:	4651      	mov	r1, sl
 8006420:	018a      	lsls	r2, r1, #6
 8006422:	4651      	mov	r1, sl
 8006424:	ebb2 0801 	subs.w	r8, r2, r1
 8006428:	4659      	mov	r1, fp
 800642a:	eb63 0901 	sbc.w	r9, r3, r1
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800643a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800643e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006442:	4690      	mov	r8, r2
 8006444:	4699      	mov	r9, r3
 8006446:	4623      	mov	r3, r4
 8006448:	eb18 0303 	adds.w	r3, r8, r3
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	462b      	mov	r3, r5
 8006450:	eb49 0303 	adc.w	r3, r9, r3
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006462:	4629      	mov	r1, r5
 8006464:	024b      	lsls	r3, r1, #9
 8006466:	4621      	mov	r1, r4
 8006468:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800646c:	4621      	mov	r1, r4
 800646e:	024a      	lsls	r2, r1, #9
 8006470:	4610      	mov	r0, r2
 8006472:	4619      	mov	r1, r3
 8006474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006476:	2200      	movs	r2, #0
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
 800647a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800647c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006480:	f7f9 ff0e 	bl	80002a0 <__aeabi_uldivmod>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4613      	mov	r3, r2
 800648a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800648c:	e058      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800648e:	4b38      	ldr	r3, [pc, #224]	; (8006570 <HAL_RCC_GetSysClockFreq+0x200>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	099b      	lsrs	r3, r3, #6
 8006494:	2200      	movs	r2, #0
 8006496:	4618      	mov	r0, r3
 8006498:	4611      	mov	r1, r2
 800649a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800649e:	623b      	str	r3, [r7, #32]
 80064a0:	2300      	movs	r3, #0
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
 80064a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064a8:	4642      	mov	r2, r8
 80064aa:	464b      	mov	r3, r9
 80064ac:	f04f 0000 	mov.w	r0, #0
 80064b0:	f04f 0100 	mov.w	r1, #0
 80064b4:	0159      	lsls	r1, r3, #5
 80064b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064ba:	0150      	lsls	r0, r2, #5
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4641      	mov	r1, r8
 80064c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80064c6:	4649      	mov	r1, r9
 80064c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064e0:	ebb2 040a 	subs.w	r4, r2, sl
 80064e4:	eb63 050b 	sbc.w	r5, r3, fp
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	00eb      	lsls	r3, r5, #3
 80064f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064f6:	00e2      	lsls	r2, r4, #3
 80064f8:	4614      	mov	r4, r2
 80064fa:	461d      	mov	r5, r3
 80064fc:	4643      	mov	r3, r8
 80064fe:	18e3      	adds	r3, r4, r3
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	464b      	mov	r3, r9
 8006504:	eb45 0303 	adc.w	r3, r5, r3
 8006508:	607b      	str	r3, [r7, #4]
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006516:	4629      	mov	r1, r5
 8006518:	028b      	lsls	r3, r1, #10
 800651a:	4621      	mov	r1, r4
 800651c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006520:	4621      	mov	r1, r4
 8006522:	028a      	lsls	r2, r1, #10
 8006524:	4610      	mov	r0, r2
 8006526:	4619      	mov	r1, r3
 8006528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652a:	2200      	movs	r2, #0
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	61fa      	str	r2, [r7, #28]
 8006530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006534:	f7f9 feb4 	bl	80002a0 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4613      	mov	r3, r2
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_GetSysClockFreq+0x200>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	3301      	adds	r3, #1
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006554:	fbb2 f3f3 	udiv	r3, r2, r3
 8006558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800655a:	e002      	b.n	8006562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <HAL_RCC_GetSysClockFreq+0x204>)
 800655e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006564:	4618      	mov	r0, r3
 8006566:	3750      	adds	r7, #80	; 0x50
 8006568:	46bd      	mov	sp, r7
 800656a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800656e:	bf00      	nop
 8006570:	40023800 	.word	0x40023800
 8006574:	00f42400 	.word	0x00f42400
 8006578:	007a1200 	.word	0x007a1200

0800657c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006580:	4b03      	ldr	r3, [pc, #12]	; (8006590 <HAL_RCC_GetHCLKFreq+0x14>)
 8006582:	681b      	ldr	r3, [r3, #0]
}
 8006584:	4618      	mov	r0, r3
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	2000000c 	.word	0x2000000c

08006594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006598:	f7ff fff0 	bl	800657c <HAL_RCC_GetHCLKFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	0a9b      	lsrs	r3, r3, #10
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	4903      	ldr	r1, [pc, #12]	; (80065b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065aa:	5ccb      	ldrb	r3, [r1, r3]
 80065ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40023800 	.word	0x40023800
 80065b8:	0800ff4c 	.word	0x0800ff4c

080065bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065c0:	f7ff ffdc 	bl	800657c <HAL_RCC_GetHCLKFreq>
 80065c4:	4602      	mov	r2, r0
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	0b5b      	lsrs	r3, r3, #13
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	4903      	ldr	r1, [pc, #12]	; (80065e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065d2:	5ccb      	ldrb	r3, [r1, r3]
 80065d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d8:	4618      	mov	r0, r3
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40023800 	.word	0x40023800
 80065e0:	0800ff4c 	.word	0x0800ff4c

080065e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	220f      	movs	r2, #15
 80065f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <HAL_RCC_GetClockConfig+0x5c>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f003 0203 	and.w	r2, r3, #3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <HAL_RCC_GetClockConfig+0x5c>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800660c:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <HAL_RCC_GetClockConfig+0x5c>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_RCC_GetClockConfig+0x5c>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	08db      	lsrs	r3, r3, #3
 800661e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006626:	4b07      	ldr	r3, [pc, #28]	; (8006644 <HAL_RCC_GetClockConfig+0x60>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 020f 	and.w	r2, r3, #15
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	601a      	str	r2, [r3, #0]
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40023800 	.word	0x40023800
 8006644:	40023c00 	.word	0x40023c00

08006648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e07b      	b.n	8006752 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	2b00      	cmp	r3, #0
 8006660:	d108      	bne.n	8006674 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800666a:	d009      	beq.n	8006680 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	61da      	str	r2, [r3, #28]
 8006672:	e005      	b.n	8006680 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fa fec2 	bl	8001424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006704:	ea42 0103 	orr.w	r1, r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	f003 0104 	and.w	r1, r3, #4
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	f003 0210 	and.w	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006740:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_SPI_Transmit+0x22>
 8006778:	2302      	movs	r3, #2
 800677a:	e126      	b.n	80069ca <HAL_SPI_Transmit+0x270>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006784:	f7fb fc3a 	bl	8001ffc <HAL_GetTick>
 8006788:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b01      	cmp	r3, #1
 8006798:	d002      	beq.n	80067a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800679a:	2302      	movs	r3, #2
 800679c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800679e:	e10b      	b.n	80069b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <HAL_SPI_Transmit+0x52>
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067b0:	e102      	b.n	80069b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2203      	movs	r2, #3
 80067b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	88fa      	ldrh	r2, [r7, #6]
 80067ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	88fa      	ldrh	r2, [r7, #6]
 80067d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f8:	d10f      	bne.n	800681a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006808:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006818:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	d007      	beq.n	8006838 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006840:	d14b      	bne.n	80068da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_SPI_Transmit+0xf6>
 800684a:	8afb      	ldrh	r3, [r7, #22]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d13e      	bne.n	80068ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	881a      	ldrh	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	1c9a      	adds	r2, r3, #2
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006874:	e02b      	b.n	80068ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d112      	bne.n	80068aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	881a      	ldrh	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	1c9a      	adds	r2, r3, #2
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80068a8:	e011      	b.n	80068ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068aa:	f7fb fba7 	bl	8001ffc <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d803      	bhi.n	80068c2 <HAL_SPI_Transmit+0x168>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d102      	bne.n	80068c8 <HAL_SPI_Transmit+0x16e>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d102      	bne.n	80068ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068cc:	e074      	b.n	80069b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1ce      	bne.n	8006876 <HAL_SPI_Transmit+0x11c>
 80068d8:	e04c      	b.n	8006974 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_SPI_Transmit+0x18e>
 80068e2:	8afb      	ldrh	r3, [r7, #22]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d140      	bne.n	800696a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	7812      	ldrb	r2, [r2, #0]
 80068f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800690e:	e02c      	b.n	800696a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d113      	bne.n	8006946 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	7812      	ldrb	r2, [r2, #0]
 800692a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	86da      	strh	r2, [r3, #54]	; 0x36
 8006944:	e011      	b.n	800696a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006946:	f7fb fb59 	bl	8001ffc <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d803      	bhi.n	800695e <HAL_SPI_Transmit+0x204>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d102      	bne.n	8006964 <HAL_SPI_Transmit+0x20a>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006968:	e026      	b.n	80069b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1cd      	bne.n	8006910 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fce9 	bl	8007350 <SPI_EndRxTxTransaction>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e000      	b.n	80069b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80069b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b088      	sub	sp, #32
 80069d6:	af02      	add	r7, sp, #8
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	603b      	str	r3, [r7, #0]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ee:	d112      	bne.n	8006a16 <HAL_SPI_Receive+0x44>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10e      	bne.n	8006a16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2204      	movs	r2, #4
 80069fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	4613      	mov	r3, r2
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	68b9      	ldr	r1, [r7, #8]
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 f8f1 	bl	8006bf4 <HAL_SPI_TransmitReceive>
 8006a12:	4603      	mov	r3, r0
 8006a14:	e0ea      	b.n	8006bec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_SPI_Receive+0x52>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e0e3      	b.n	8006bec <HAL_SPI_Receive+0x21a>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a2c:	f7fb fae6 	bl	8001ffc <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d002      	beq.n	8006a44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a42:	e0ca      	b.n	8006bda <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_SPI_Receive+0x7e>
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a54:	e0c1      	b.n	8006bda <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	88fa      	ldrh	r2, [r7, #6]
 8006a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	88fa      	ldrh	r2, [r7, #6]
 8006a74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9c:	d10f      	bne.n	8006abe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006abc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac8:	2b40      	cmp	r3, #64	; 0x40
 8006aca:	d007      	beq.n	8006adc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ada:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d162      	bne.n	8006baa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ae4:	e02e      	b.n	8006b44 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d115      	bne.n	8006b20 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f103 020c 	add.w	r2, r3, #12
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	7812      	ldrb	r2, [r2, #0]
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b1e:	e011      	b.n	8006b44 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b20:	f7fb fa6c 	bl	8001ffc <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d803      	bhi.n	8006b38 <HAL_SPI_Receive+0x166>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d102      	bne.n	8006b3e <HAL_SPI_Receive+0x16c>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b42:	e04a      	b.n	8006bda <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1cb      	bne.n	8006ae6 <HAL_SPI_Receive+0x114>
 8006b4e:	e031      	b.n	8006bb4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d113      	bne.n	8006b86 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	b292      	uxth	r2, r2
 8006b6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b70:	1c9a      	adds	r2, r3, #2
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b84:	e011      	b.n	8006baa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b86:	f7fb fa39 	bl	8001ffc <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d803      	bhi.n	8006b9e <HAL_SPI_Receive+0x1cc>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d102      	bne.n	8006ba4 <HAL_SPI_Receive+0x1d2>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ba8:	e017      	b.n	8006bda <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1cd      	bne.n	8006b50 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fb63 	bl	8007284 <SPI_EndRxTransaction>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	75fb      	strb	r3, [r7, #23]
 8006bd6:	e000      	b.n	8006bda <HAL_SPI_Receive+0x208>
  }

error :
 8006bd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08c      	sub	sp, #48	; 0x30
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c02:	2301      	movs	r3, #1
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_SPI_TransmitReceive+0x26>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e18a      	b.n	8006f30 <HAL_SPI_TransmitReceive+0x33c>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c22:	f7fb f9eb 	bl	8001ffc <HAL_GetTick>
 8006c26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c38:	887b      	ldrh	r3, [r7, #2]
 8006c3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d00f      	beq.n	8006c64 <HAL_SPI_TransmitReceive+0x70>
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c4a:	d107      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d103      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x68>
 8006c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d003      	beq.n	8006c64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c62:	e15b      	b.n	8006f1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <HAL_SPI_TransmitReceive+0x82>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_SPI_TransmitReceive+0x82>
 8006c70:	887b      	ldrh	r3, [r7, #2]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c7c:	e14e      	b.n	8006f1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d003      	beq.n	8006c92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2205      	movs	r2, #5
 8006c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	887a      	ldrh	r2, [r7, #2]
 8006ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	887a      	ldrh	r2, [r7, #2]
 8006ca8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	887a      	ldrh	r2, [r7, #2]
 8006cb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	887a      	ldrh	r2, [r7, #2]
 8006cba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b40      	cmp	r3, #64	; 0x40
 8006cd4:	d007      	beq.n	8006ce6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cee:	d178      	bne.n	8006de2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <HAL_SPI_TransmitReceive+0x10a>
 8006cf8:	8b7b      	ldrh	r3, [r7, #26]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d166      	bne.n	8006dcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	881a      	ldrh	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	1c9a      	adds	r2, r3, #2
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d22:	e053      	b.n	8006dcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d11b      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x176>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d016      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x176>
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d113      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d46:	881a      	ldrh	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	1c9a      	adds	r2, r3, #2
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d119      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x1b8>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d014      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	b292      	uxth	r2, r2
 8006d8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	1c9a      	adds	r2, r3, #2
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006da8:	2301      	movs	r3, #1
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dac:	f7fb f926 	bl	8001ffc <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d807      	bhi.n	8006dcc <HAL_SPI_TransmitReceive+0x1d8>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d003      	beq.n	8006dcc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006dca:	e0a7      	b.n	8006f1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1a6      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x130>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1a1      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x130>
 8006de0:	e07c      	b.n	8006edc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <HAL_SPI_TransmitReceive+0x1fc>
 8006dea:	8b7b      	ldrh	r3, [r7, #26]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d16b      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	330c      	adds	r3, #12
 8006dfa:	7812      	ldrb	r2, [r2, #0]
 8006dfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e16:	e057      	b.n	8006ec8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d11c      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x26c>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d017      	beq.n	8006e60 <HAL_SPI_TransmitReceive+0x26c>
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d114      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d119      	bne.n	8006ea2 <HAL_SPI_TransmitReceive+0x2ae>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d014      	beq.n	8006ea2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ea2:	f7fb f8ab 	bl	8001ffc <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d803      	bhi.n	8006eba <HAL_SPI_TransmitReceive+0x2c6>
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d102      	bne.n	8006ec0 <HAL_SPI_TransmitReceive+0x2cc>
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ec6:	e029      	b.n	8006f1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1a2      	bne.n	8006e18 <HAL_SPI_TransmitReceive+0x224>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d19d      	bne.n	8006e18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ede:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fa35 	bl	8007350 <SPI_EndRxTxTransaction>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d006      	beq.n	8006efa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ef8:	e010      	b.n	8006f1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10b      	bne.n	8006f1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	e000      	b.n	8006f1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3730      	adds	r7, #48	; 0x30
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	099b      	lsrs	r3, r3, #6
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10f      	bne.n	8006f7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	099b      	lsrs	r3, r3, #6
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
    return;
 8006f7a:	e0d7      	b.n	800712c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <HAL_SPI_IRQHandler+0x66>
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	09db      	lsrs	r3, r3, #7
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
    return;
 8006f9c:	e0c6      	b.n	800712c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10c      	bne.n	8006fc4 <HAL_SPI_IRQHandler+0x8c>
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	099b      	lsrs	r3, r3, #6
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	0a1b      	lsrs	r3, r3, #8
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80b4 	beq.w	800712c <HAL_SPI_IRQHandler+0x1f4>
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80ad 	beq.w	800712c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	099b      	lsrs	r3, r3, #6
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d023      	beq.n	8007026 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d011      	beq.n	800700e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fee:	f043 0204 	orr.w	r2, r3, #4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	e00b      	b.n	8007026 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	693b      	ldr	r3, [r7, #16]
        return;
 8007024:	e082      	b.n	800712c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d014      	beq.n	800705c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	f043 0201 	orr.w	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00c      	beq.n	8007082 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706c:	f043 0208 	orr.w	r2, r3, #8
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007074:	2300      	movs	r3, #0
 8007076:	60bb      	str	r3, [r7, #8]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	60bb      	str	r3, [r7, #8]
 8007080:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	2b00      	cmp	r3, #0
 8007088:	d04f      	beq.n	800712a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007098:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <HAL_SPI_IRQHandler+0x17e>
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d034      	beq.n	8007120 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0203 	bic.w	r2, r2, #3
 80070c4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d011      	beq.n	80070f2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d2:	4a18      	ldr	r2, [pc, #96]	; (8007134 <HAL_SPI_IRQHandler+0x1fc>)
 80070d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fc f932 	bl	8003344 <HAL_DMA_Abort_IT>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d005      	beq.n	80070f2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d016      	beq.n	8007128 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fe:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <HAL_SPI_IRQHandler+0x1fc>)
 8007100:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007106:	4618      	mov	r0, r3
 8007108:	f7fc f91c 	bl	8003344 <HAL_DMA_Abort_IT>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800711e:	e003      	b.n	8007128 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f809 	bl	8007138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007126:	e000      	b.n	800712a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007128:	bf00      	nop
    return;
 800712a:	bf00      	nop
  }
}
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	0800714d 	.word	0x0800714d

08007138 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f7ff ffe6 	bl	8007138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007184:	f7fa ff3a 	bl	8001ffc <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	4413      	add	r3, r2
 8007192:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007194:	f7fa ff32 	bl	8001ffc <HAL_GetTick>
 8007198:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800719a:	4b39      	ldr	r3, [pc, #228]	; (8007280 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	015b      	lsls	r3, r3, #5
 80071a0:	0d1b      	lsrs	r3, r3, #20
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	fb02 f303 	mul.w	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071aa:	e054      	b.n	8007256 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d050      	beq.n	8007256 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071b4:	f7fa ff22 	bl	8001ffc <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d902      	bls.n	80071ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d13d      	bne.n	8007246 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071e2:	d111      	bne.n	8007208 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ec:	d004      	beq.n	80071f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f6:	d107      	bne.n	8007208 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007206:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007210:	d10f      	bne.n	8007232 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007230:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e017      	b.n	8007276 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	3b01      	subs	r3, #1
 8007254:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	4013      	ands	r3, r2
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	429a      	cmp	r2, r3
 8007264:	bf0c      	ite	eq
 8007266:	2301      	moveq	r3, #1
 8007268:	2300      	movne	r3, #0
 800726a:	b2db      	uxtb	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	429a      	cmp	r2, r3
 8007272:	d19b      	bne.n	80071ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000000c 	.word	0x2000000c

08007284 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af02      	add	r7, sp, #8
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007298:	d111      	bne.n	80072be <SPI_EndRxTransaction+0x3a>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a2:	d004      	beq.n	80072ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ac:	d107      	bne.n	80072be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072c6:	d12a      	bne.n	800731e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d0:	d012      	beq.n	80072f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2200      	movs	r2, #0
 80072da:	2180      	movs	r1, #128	; 0x80
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff ff49 	bl	8007174 <SPI_WaitFlagStateUntilTimeout>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02d      	beq.n	8007344 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ec:	f043 0220 	orr.w	r2, r3, #32
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e026      	b.n	8007346 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2200      	movs	r2, #0
 8007300:	2101      	movs	r1, #1
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff ff36 	bl	8007174 <SPI_WaitFlagStateUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01a      	beq.n	8007344 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007312:	f043 0220 	orr.w	r2, r3, #32
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e013      	b.n	8007346 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	2101      	movs	r1, #1
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff ff23 	bl	8007174 <SPI_WaitFlagStateUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d007      	beq.n	8007344 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007338:	f043 0220 	orr.w	r2, r3, #32
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e000      	b.n	8007346 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af02      	add	r7, sp, #8
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800735c:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <SPI_EndRxTxTransaction+0x7c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <SPI_EndRxTxTransaction+0x80>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	0d5b      	lsrs	r3, r3, #21
 8007368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800737a:	d112      	bne.n	80073a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	2180      	movs	r1, #128	; 0x80
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7ff fef4 	bl	8007174 <SPI_WaitFlagStateUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d016      	beq.n	80073c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	f043 0220 	orr.w	r2, r3, #32
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e00f      	b.n	80073c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b8:	2b80      	cmp	r3, #128	; 0x80
 80073ba:	d0f2      	beq.n	80073a2 <SPI_EndRxTxTransaction+0x52>
 80073bc:	e000      	b.n	80073c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80073be:	bf00      	nop
  }

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	2000000c 	.word	0x2000000c
 80073d0:	165e9f81 	.word	0x165e9f81

080073d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e041      	b.n	800746a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fa fc30 	bl	8001c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	4619      	mov	r1, r3
 8007412:	4610      	mov	r0, r2
 8007414:	f000 fbd6 	bl	8007bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b01      	cmp	r3, #1
 8007486:	d001      	beq.n	800748c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e04e      	b.n	800752a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a23      	ldr	r2, [pc, #140]	; (8007538 <HAL_TIM_Base_Start_IT+0xc4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d022      	beq.n	80074f4 <HAL_TIM_Base_Start_IT+0x80>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b6:	d01d      	beq.n	80074f4 <HAL_TIM_Base_Start_IT+0x80>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1f      	ldr	r2, [pc, #124]	; (800753c <HAL_TIM_Base_Start_IT+0xc8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d018      	beq.n	80074f4 <HAL_TIM_Base_Start_IT+0x80>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1e      	ldr	r2, [pc, #120]	; (8007540 <HAL_TIM_Base_Start_IT+0xcc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d013      	beq.n	80074f4 <HAL_TIM_Base_Start_IT+0x80>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <HAL_TIM_Base_Start_IT+0xd0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00e      	beq.n	80074f4 <HAL_TIM_Base_Start_IT+0x80>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_TIM_Base_Start_IT+0xd4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d009      	beq.n	80074f4 <HAL_TIM_Base_Start_IT+0x80>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a19      	ldr	r2, [pc, #100]	; (800754c <HAL_TIM_Base_Start_IT+0xd8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d004      	beq.n	80074f4 <HAL_TIM_Base_Start_IT+0x80>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a18      	ldr	r2, [pc, #96]	; (8007550 <HAL_TIM_Base_Start_IT+0xdc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d111      	bne.n	8007518 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b06      	cmp	r3, #6
 8007504:	d010      	beq.n	8007528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f042 0201 	orr.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007516:	e007      	b.n	8007528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40010000 	.word	0x40010000
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800
 8007544:	40000c00 	.word	0x40000c00
 8007548:	40010400 	.word	0x40010400
 800754c:	40014000 	.word	0x40014000
 8007550:	40001800 	.word	0x40001800

08007554 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0201 	bic.w	r2, r2, #1
 800756a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a1a      	ldr	r2, [r3, #32]
 8007572:	f241 1311 	movw	r3, #4369	; 0x1111
 8007576:	4013      	ands	r3, r2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10f      	bne.n	800759c <HAL_TIM_Base_Stop_IT+0x48>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6a1a      	ldr	r2, [r3, #32]
 8007582:	f240 4344 	movw	r3, #1092	; 0x444
 8007586:	4013      	ands	r3, r2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d107      	bne.n	800759c <HAL_TIM_Base_Stop_IT+0x48>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0201 	bic.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e041      	b.n	8007648 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d106      	bne.n	80075de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fa fb19 	bl	8001c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2202      	movs	r2, #2
 80075e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4619      	mov	r1, r3
 80075f0:	4610      	mov	r0, r2
 80075f2:	f000 fae7 	bl	8007bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d109      	bne.n	8007674 <HAL_TIM_PWM_Start+0x24>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b01      	cmp	r3, #1
 800766a:	bf14      	ite	ne
 800766c:	2301      	movne	r3, #1
 800766e:	2300      	moveq	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	e022      	b.n	80076ba <HAL_TIM_PWM_Start+0x6a>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b04      	cmp	r3, #4
 8007678:	d109      	bne.n	800768e <HAL_TIM_PWM_Start+0x3e>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b01      	cmp	r3, #1
 8007684:	bf14      	ite	ne
 8007686:	2301      	movne	r3, #1
 8007688:	2300      	moveq	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	e015      	b.n	80076ba <HAL_TIM_PWM_Start+0x6a>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b08      	cmp	r3, #8
 8007692:	d109      	bne.n	80076a8 <HAL_TIM_PWM_Start+0x58>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	e008      	b.n	80076ba <HAL_TIM_PWM_Start+0x6a>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	bf14      	ite	ne
 80076b4:	2301      	movne	r3, #1
 80076b6:	2300      	moveq	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e07c      	b.n	80077bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <HAL_TIM_PWM_Start+0x82>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d0:	e013      	b.n	80076fa <HAL_TIM_PWM_Start+0xaa>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	d104      	bne.n	80076e2 <HAL_TIM_PWM_Start+0x92>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e0:	e00b      	b.n	80076fa <HAL_TIM_PWM_Start+0xaa>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d104      	bne.n	80076f2 <HAL_TIM_PWM_Start+0xa2>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f0:	e003      	b.n	80076fa <HAL_TIM_PWM_Start+0xaa>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2201      	movs	r2, #1
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fcae 	bl	8008064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a2d      	ldr	r2, [pc, #180]	; (80077c4 <HAL_TIM_PWM_Start+0x174>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <HAL_TIM_PWM_Start+0xcc>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2c      	ldr	r2, [pc, #176]	; (80077c8 <HAL_TIM_PWM_Start+0x178>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d101      	bne.n	8007720 <HAL_TIM_PWM_Start+0xd0>
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <HAL_TIM_PWM_Start+0xd2>
 8007720:	2300      	movs	r3, #0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d007      	beq.n	8007736 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007734:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a22      	ldr	r2, [pc, #136]	; (80077c4 <HAL_TIM_PWM_Start+0x174>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d022      	beq.n	8007786 <HAL_TIM_PWM_Start+0x136>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007748:	d01d      	beq.n	8007786 <HAL_TIM_PWM_Start+0x136>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a1f      	ldr	r2, [pc, #124]	; (80077cc <HAL_TIM_PWM_Start+0x17c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d018      	beq.n	8007786 <HAL_TIM_PWM_Start+0x136>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1d      	ldr	r2, [pc, #116]	; (80077d0 <HAL_TIM_PWM_Start+0x180>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d013      	beq.n	8007786 <HAL_TIM_PWM_Start+0x136>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a1c      	ldr	r2, [pc, #112]	; (80077d4 <HAL_TIM_PWM_Start+0x184>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00e      	beq.n	8007786 <HAL_TIM_PWM_Start+0x136>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <HAL_TIM_PWM_Start+0x178>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d009      	beq.n	8007786 <HAL_TIM_PWM_Start+0x136>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a18      	ldr	r2, [pc, #96]	; (80077d8 <HAL_TIM_PWM_Start+0x188>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d004      	beq.n	8007786 <HAL_TIM_PWM_Start+0x136>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a16      	ldr	r2, [pc, #88]	; (80077dc <HAL_TIM_PWM_Start+0x18c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d111      	bne.n	80077aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b06      	cmp	r3, #6
 8007796:	d010      	beq.n	80077ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a8:	e007      	b.n	80077ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0201 	orr.w	r2, r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40010400 	.word	0x40010400
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40001800 	.word	0x40001800

080077e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d122      	bne.n	800783c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b02      	cmp	r3, #2
 8007802:	d11b      	bne.n	800783c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0202 	mvn.w	r2, #2
 800780c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f9b0 	bl	8007b88 <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f9a2 	bl	8007b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f9b3 	bl	8007b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b04      	cmp	r3, #4
 8007848:	d122      	bne.n	8007890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b04      	cmp	r3, #4
 8007856:	d11b      	bne.n	8007890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0204 	mvn.w	r2, #4
 8007860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2202      	movs	r2, #2
 8007866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f986 	bl	8007b88 <HAL_TIM_IC_CaptureCallback>
 800787c:	e005      	b.n	800788a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f978 	bl	8007b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f989 	bl	8007b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b08      	cmp	r3, #8
 800789c:	d122      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d11b      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0208 	mvn.w	r2, #8
 80078b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2204      	movs	r2, #4
 80078ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f95c 	bl	8007b88 <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f94e 	bl	8007b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f95f 	bl	8007b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b10      	cmp	r3, #16
 80078f0:	d122      	bne.n	8007938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b10      	cmp	r3, #16
 80078fe:	d11b      	bne.n	8007938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0210 	mvn.w	r2, #16
 8007908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2208      	movs	r2, #8
 800790e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f932 	bl	8007b88 <HAL_TIM_IC_CaptureCallback>
 8007924:	e005      	b.n	8007932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f924 	bl	8007b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f935 	bl	8007b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b01      	cmp	r3, #1
 8007944:	d10e      	bne.n	8007964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b01      	cmp	r3, #1
 8007952:	d107      	bne.n	8007964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f06f 0201 	mvn.w	r2, #1
 800795c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7f9 fcd6 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796e:	2b80      	cmp	r3, #128	; 0x80
 8007970:	d10e      	bne.n	8007990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d107      	bne.n	8007990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fc68 	bl	8008260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d10e      	bne.n	80079bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a8:	2b40      	cmp	r3, #64	; 0x40
 80079aa:	d107      	bne.n	80079bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f8fa 	bl	8007bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d10e      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d107      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0220 	mvn.w	r2, #32
 80079e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fc32 	bl	800824c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d101      	bne.n	8007a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e0ae      	b.n	8007b6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b0c      	cmp	r3, #12
 8007a1a:	f200 809f 	bhi.w	8007b5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a1e:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a59 	.word	0x08007a59
 8007a28:	08007b5d 	.word	0x08007b5d
 8007a2c:	08007b5d 	.word	0x08007b5d
 8007a30:	08007b5d 	.word	0x08007b5d
 8007a34:	08007a99 	.word	0x08007a99
 8007a38:	08007b5d 	.word	0x08007b5d
 8007a3c:	08007b5d 	.word	0x08007b5d
 8007a40:	08007b5d 	.word	0x08007b5d
 8007a44:	08007adb 	.word	0x08007adb
 8007a48:	08007b5d 	.word	0x08007b5d
 8007a4c:	08007b5d 	.word	0x08007b5d
 8007a50:	08007b5d 	.word	0x08007b5d
 8007a54:	08007b1b 	.word	0x08007b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68b9      	ldr	r1, [r7, #8]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f950 	bl	8007d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699a      	ldr	r2, [r3, #24]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0208 	orr.w	r2, r2, #8
 8007a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0204 	bic.w	r2, r2, #4
 8007a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6999      	ldr	r1, [r3, #24]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	619a      	str	r2, [r3, #24]
      break;
 8007a96:	e064      	b.n	8007b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68b9      	ldr	r1, [r7, #8]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f9a0 	bl	8007de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6999      	ldr	r1, [r3, #24]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	021a      	lsls	r2, r3, #8
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	619a      	str	r2, [r3, #24]
      break;
 8007ad8:	e043      	b.n	8007b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 f9f5 	bl	8007ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69da      	ldr	r2, [r3, #28]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f042 0208 	orr.w	r2, r2, #8
 8007af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 0204 	bic.w	r2, r2, #4
 8007b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69d9      	ldr	r1, [r3, #28]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	691a      	ldr	r2, [r3, #16]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	61da      	str	r2, [r3, #28]
      break;
 8007b18:	e023      	b.n	8007b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fa49 	bl	8007fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69da      	ldr	r2, [r3, #28]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69d9      	ldr	r1, [r3, #28]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	021a      	lsls	r2, r3, #8
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	61da      	str	r2, [r3, #28]
      break;
 8007b5a:	e002      	b.n	8007b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a40      	ldr	r2, [pc, #256]	; (8007cd8 <TIM_Base_SetConfig+0x114>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d013      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be2:	d00f      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a3d      	ldr	r2, [pc, #244]	; (8007cdc <TIM_Base_SetConfig+0x118>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00b      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a3c      	ldr	r2, [pc, #240]	; (8007ce0 <TIM_Base_SetConfig+0x11c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d007      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a3b      	ldr	r2, [pc, #236]	; (8007ce4 <TIM_Base_SetConfig+0x120>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a3a      	ldr	r2, [pc, #232]	; (8007ce8 <TIM_Base_SetConfig+0x124>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d108      	bne.n	8007c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a2f      	ldr	r2, [pc, #188]	; (8007cd8 <TIM_Base_SetConfig+0x114>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d02b      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c24:	d027      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a2c      	ldr	r2, [pc, #176]	; (8007cdc <TIM_Base_SetConfig+0x118>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d023      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a2b      	ldr	r2, [pc, #172]	; (8007ce0 <TIM_Base_SetConfig+0x11c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d01f      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <TIM_Base_SetConfig+0x120>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d01b      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a29      	ldr	r2, [pc, #164]	; (8007ce8 <TIM_Base_SetConfig+0x124>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d017      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a28      	ldr	r2, [pc, #160]	; (8007cec <TIM_Base_SetConfig+0x128>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d013      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a27      	ldr	r2, [pc, #156]	; (8007cf0 <TIM_Base_SetConfig+0x12c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00f      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a26      	ldr	r2, [pc, #152]	; (8007cf4 <TIM_Base_SetConfig+0x130>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00b      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a25      	ldr	r2, [pc, #148]	; (8007cf8 <TIM_Base_SetConfig+0x134>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a24      	ldr	r2, [pc, #144]	; (8007cfc <TIM_Base_SetConfig+0x138>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d003      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a23      	ldr	r2, [pc, #140]	; (8007d00 <TIM_Base_SetConfig+0x13c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d108      	bne.n	8007c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a0a      	ldr	r2, [pc, #40]	; (8007cd8 <TIM_Base_SetConfig+0x114>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_Base_SetConfig+0xf8>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a0c      	ldr	r2, [pc, #48]	; (8007ce8 <TIM_Base_SetConfig+0x124>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d103      	bne.n	8007cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	615a      	str	r2, [r3, #20]
}
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	40010000 	.word	0x40010000
 8007cdc:	40000400 	.word	0x40000400
 8007ce0:	40000800 	.word	0x40000800
 8007ce4:	40000c00 	.word	0x40000c00
 8007ce8:	40010400 	.word	0x40010400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40014400 	.word	0x40014400
 8007cf4:	40014800 	.word	0x40014800
 8007cf8:	40001800 	.word	0x40001800
 8007cfc:	40001c00 	.word	0x40001c00
 8007d00:	40002000 	.word	0x40002000

08007d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0303 	bic.w	r3, r3, #3
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 0302 	bic.w	r3, r3, #2
 8007d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a20      	ldr	r2, [pc, #128]	; (8007ddc <TIM_OC1_SetConfig+0xd8>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d003      	beq.n	8007d68 <TIM_OC1_SetConfig+0x64>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <TIM_OC1_SetConfig+0xdc>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10c      	bne.n	8007d82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f023 0308 	bic.w	r3, r3, #8
 8007d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 0304 	bic.w	r3, r3, #4
 8007d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <TIM_OC1_SetConfig+0xd8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d003      	beq.n	8007d92 <TIM_OC1_SetConfig+0x8e>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a14      	ldr	r2, [pc, #80]	; (8007de0 <TIM_OC1_SetConfig+0xdc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d111      	bne.n	8007db6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	621a      	str	r2, [r3, #32]
}
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40010400 	.word	0x40010400

08007de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f023 0210 	bic.w	r2, r3, #16
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f023 0320 	bic.w	r3, r3, #32
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	011b      	lsls	r3, r3, #4
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a22      	ldr	r2, [pc, #136]	; (8007ec8 <TIM_OC2_SetConfig+0xe4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d003      	beq.n	8007e4c <TIM_OC2_SetConfig+0x68>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a21      	ldr	r2, [pc, #132]	; (8007ecc <TIM_OC2_SetConfig+0xe8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d10d      	bne.n	8007e68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <TIM_OC2_SetConfig+0xe4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC2_SetConfig+0x94>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a16      	ldr	r2, [pc, #88]	; (8007ecc <TIM_OC2_SetConfig+0xe8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d113      	bne.n	8007ea0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40010400 	.word	0x40010400

08007ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0303 	bic.w	r3, r3, #3
 8007f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	021b      	lsls	r3, r3, #8
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a21      	ldr	r2, [pc, #132]	; (8007fb0 <TIM_OC3_SetConfig+0xe0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d003      	beq.n	8007f36 <TIM_OC3_SetConfig+0x66>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a20      	ldr	r2, [pc, #128]	; (8007fb4 <TIM_OC3_SetConfig+0xe4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d10d      	bne.n	8007f52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <TIM_OC3_SetConfig+0xe0>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d003      	beq.n	8007f62 <TIM_OC3_SetConfig+0x92>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a15      	ldr	r2, [pc, #84]	; (8007fb4 <TIM_OC3_SetConfig+0xe4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d113      	bne.n	8007f8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	621a      	str	r2, [r3, #32]
}
 8007fa4:	bf00      	nop
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	40010000 	.word	0x40010000
 8007fb4:	40010400 	.word	0x40010400

08007fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	031b      	lsls	r3, r3, #12
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a12      	ldr	r2, [pc, #72]	; (800805c <TIM_OC4_SetConfig+0xa4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <TIM_OC4_SetConfig+0x68>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a11      	ldr	r2, [pc, #68]	; (8008060 <TIM_OC4_SetConfig+0xa8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d109      	bne.n	8008034 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008026:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	019b      	lsls	r3, r3, #6
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	621a      	str	r2, [r3, #32]
}
 800804e:	bf00      	nop
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	40010000 	.word	0x40010000
 8008060:	40010400 	.word	0x40010400

08008064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 031f 	and.w	r3, r3, #31
 8008076:	2201      	movs	r2, #1
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1a      	ldr	r2, [r3, #32]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	43db      	mvns	r3, r3
 8008086:	401a      	ands	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	431a      	orrs	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
}
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e05a      	b.n	800817e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a21      	ldr	r2, [pc, #132]	; (800818c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d022      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008114:	d01d      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1d      	ldr	r2, [pc, #116]	; (8008190 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d018      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1b      	ldr	r2, [pc, #108]	; (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d013      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1a      	ldr	r2, [pc, #104]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00e      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a18      	ldr	r2, [pc, #96]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d009      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a17      	ldr	r2, [pc, #92]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d004      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d10c      	bne.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	4313      	orrs	r3, r2
 8008162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	40010000 	.word	0x40010000
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800
 8008198:	40000c00 	.word	0x40000c00
 800819c:	40010400 	.word	0x40010400
 80081a0:	40014000 	.word	0x40014000
 80081a4:	40001800 	.word	0x40001800

080081a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e03d      	b.n	8008240 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e03f      	b.n	8008306 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d106      	bne.n	80082a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7f9 fe06 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2224      	movs	r2, #36	; 0x24
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f929 	bl	8008510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695a      	ldr	r2, [r3, #20]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2220      	movs	r2, #32
 8008300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b08a      	sub	sp, #40	; 0x28
 8008312:	af02      	add	r7, sp, #8
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	4613      	mov	r3, r2
 800831c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b20      	cmp	r3, #32
 800832c:	d17c      	bne.n	8008428 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <HAL_UART_Transmit+0x2c>
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e075      	b.n	800842a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_UART_Transmit+0x3e>
 8008348:	2302      	movs	r3, #2
 800834a:	e06e      	b.n	800842a <HAL_UART_Transmit+0x11c>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2221      	movs	r2, #33	; 0x21
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008362:	f7f9 fe4b 	bl	8001ffc <HAL_GetTick>
 8008366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	88fa      	ldrh	r2, [r7, #6]
 800836c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	88fa      	ldrh	r2, [r7, #6]
 8008372:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837c:	d108      	bne.n	8008390 <HAL_UART_Transmit+0x82>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d104      	bne.n	8008390 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	61bb      	str	r3, [r7, #24]
 800838e:	e003      	b.n	8008398 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008394:	2300      	movs	r3, #0
 8008396:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80083a0:	e02a      	b.n	80083f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2200      	movs	r2, #0
 80083aa:	2180      	movs	r1, #128	; 0x80
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 f840 	bl	8008432 <UART_WaitOnFlagUntilTimeout>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e036      	b.n	800842a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10b      	bne.n	80083da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	3302      	adds	r3, #2
 80083d6:	61bb      	str	r3, [r7, #24]
 80083d8:	e007      	b.n	80083ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	781a      	ldrb	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	3301      	adds	r3, #1
 80083e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1cf      	bne.n	80083a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2200      	movs	r2, #0
 800840a:	2140      	movs	r1, #64	; 0x40
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f810 	bl	8008432 <UART_WaitOnFlagUntilTimeout>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e006      	b.n	800842a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	e000      	b.n	800842a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008428:	2302      	movs	r3, #2
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	3720      	adds	r7, #32
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b090      	sub	sp, #64	; 0x40
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	603b      	str	r3, [r7, #0]
 800843e:	4613      	mov	r3, r2
 8008440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008442:	e050      	b.n	80084e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844a:	d04c      	beq.n	80084e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800844c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0x30>
 8008452:	f7f9 fdd3 	bl	8001ffc <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800845e:	429a      	cmp	r2, r3
 8008460:	d241      	bcs.n	80084e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	330c      	adds	r3, #12
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	330c      	adds	r3, #12
 8008480:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008482:	637a      	str	r2, [r7, #52]	; 0x34
 8008484:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3314      	adds	r3, #20
 800849c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	613b      	str	r3, [r7, #16]
   return(result);
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3314      	adds	r3, #20
 80084b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084b6:	623a      	str	r2, [r7, #32]
 80084b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	69f9      	ldr	r1, [r7, #28]
 80084bc:	6a3a      	ldr	r2, [r7, #32]
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e5      	bne.n	8008496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e00f      	b.n	8008506 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	4013      	ands	r3, r2
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	bf0c      	ite	eq
 80084f6:	2301      	moveq	r3, #1
 80084f8:	2300      	movne	r3, #0
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	461a      	mov	r2, r3
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	429a      	cmp	r2, r3
 8008502:	d09f      	beq.n	8008444 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3740      	adds	r7, #64	; 0x40
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008514:	b0c0      	sub	sp, #256	; 0x100
 8008516:	af00      	add	r7, sp, #0
 8008518:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800851c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852c:	68d9      	ldr	r1, [r3, #12]
 800852e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	ea40 0301 	orr.w	r3, r0, r1
 8008538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800853a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	431a      	orrs	r2, r3
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	431a      	orrs	r2, r3
 8008550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	4313      	orrs	r3, r2
 8008558:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800855c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008568:	f021 010c 	bic.w	r1, r1, #12
 800856c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008576:	430b      	orrs	r3, r1
 8008578:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800857a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858a:	6999      	ldr	r1, [r3, #24]
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	ea40 0301 	orr.w	r3, r0, r1
 8008596:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	4b8f      	ldr	r3, [pc, #572]	; (80087dc <UART_SetConfig+0x2cc>)
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d005      	beq.n	80085b0 <UART_SetConfig+0xa0>
 80085a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	4b8d      	ldr	r3, [pc, #564]	; (80087e0 <UART_SetConfig+0x2d0>)
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d104      	bne.n	80085ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085b0:	f7fe f804 	bl	80065bc <HAL_RCC_GetPCLK2Freq>
 80085b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085b8:	e003      	b.n	80085c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ba:	f7fd ffeb 	bl	8006594 <HAL_RCC_GetPCLK1Freq>
 80085be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085cc:	f040 810c 	bne.w	80087e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085d4:	2200      	movs	r2, #0
 80085d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80085e2:	4622      	mov	r2, r4
 80085e4:	462b      	mov	r3, r5
 80085e6:	1891      	adds	r1, r2, r2
 80085e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80085ea:	415b      	adcs	r3, r3
 80085ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085f2:	4621      	mov	r1, r4
 80085f4:	eb12 0801 	adds.w	r8, r2, r1
 80085f8:	4629      	mov	r1, r5
 80085fa:	eb43 0901 	adc.w	r9, r3, r1
 80085fe:	f04f 0200 	mov.w	r2, #0
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800860a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800860e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008612:	4690      	mov	r8, r2
 8008614:	4699      	mov	r9, r3
 8008616:	4623      	mov	r3, r4
 8008618:	eb18 0303 	adds.w	r3, r8, r3
 800861c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008620:	462b      	mov	r3, r5
 8008622:	eb49 0303 	adc.w	r3, r9, r3
 8008626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800862a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008636:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800863a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800863e:	460b      	mov	r3, r1
 8008640:	18db      	adds	r3, r3, r3
 8008642:	653b      	str	r3, [r7, #80]	; 0x50
 8008644:	4613      	mov	r3, r2
 8008646:	eb42 0303 	adc.w	r3, r2, r3
 800864a:	657b      	str	r3, [r7, #84]	; 0x54
 800864c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008650:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008654:	f7f7 fe24 	bl	80002a0 <__aeabi_uldivmod>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4b61      	ldr	r3, [pc, #388]	; (80087e4 <UART_SetConfig+0x2d4>)
 800865e:	fba3 2302 	umull	r2, r3, r3, r2
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	011c      	lsls	r4, r3, #4
 8008666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800866a:	2200      	movs	r2, #0
 800866c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008670:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008674:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	1891      	adds	r1, r2, r2
 800867e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008680:	415b      	adcs	r3, r3
 8008682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008684:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008688:	4641      	mov	r1, r8
 800868a:	eb12 0a01 	adds.w	sl, r2, r1
 800868e:	4649      	mov	r1, r9
 8008690:	eb43 0b01 	adc.w	fp, r3, r1
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	f04f 0300 	mov.w	r3, #0
 800869c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086a8:	4692      	mov	sl, r2
 80086aa:	469b      	mov	fp, r3
 80086ac:	4643      	mov	r3, r8
 80086ae:	eb1a 0303 	adds.w	r3, sl, r3
 80086b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086b6:	464b      	mov	r3, r9
 80086b8:	eb4b 0303 	adc.w	r3, fp, r3
 80086bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80086d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086d4:	460b      	mov	r3, r1
 80086d6:	18db      	adds	r3, r3, r3
 80086d8:	643b      	str	r3, [r7, #64]	; 0x40
 80086da:	4613      	mov	r3, r2
 80086dc:	eb42 0303 	adc.w	r3, r2, r3
 80086e0:	647b      	str	r3, [r7, #68]	; 0x44
 80086e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086ea:	f7f7 fdd9 	bl	80002a0 <__aeabi_uldivmod>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4611      	mov	r1, r2
 80086f4:	4b3b      	ldr	r3, [pc, #236]	; (80087e4 <UART_SetConfig+0x2d4>)
 80086f6:	fba3 2301 	umull	r2, r3, r3, r1
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	2264      	movs	r2, #100	; 0x64
 80086fe:	fb02 f303 	mul.w	r3, r2, r3
 8008702:	1acb      	subs	r3, r1, r3
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800870a:	4b36      	ldr	r3, [pc, #216]	; (80087e4 <UART_SetConfig+0x2d4>)
 800870c:	fba3 2302 	umull	r2, r3, r3, r2
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008718:	441c      	add	r4, r3
 800871a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800871e:	2200      	movs	r2, #0
 8008720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008724:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008728:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800872c:	4642      	mov	r2, r8
 800872e:	464b      	mov	r3, r9
 8008730:	1891      	adds	r1, r2, r2
 8008732:	63b9      	str	r1, [r7, #56]	; 0x38
 8008734:	415b      	adcs	r3, r3
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800873c:	4641      	mov	r1, r8
 800873e:	1851      	adds	r1, r2, r1
 8008740:	6339      	str	r1, [r7, #48]	; 0x30
 8008742:	4649      	mov	r1, r9
 8008744:	414b      	adcs	r3, r1
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
 8008748:	f04f 0200 	mov.w	r2, #0
 800874c:	f04f 0300 	mov.w	r3, #0
 8008750:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008754:	4659      	mov	r1, fp
 8008756:	00cb      	lsls	r3, r1, #3
 8008758:	4651      	mov	r1, sl
 800875a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800875e:	4651      	mov	r1, sl
 8008760:	00ca      	lsls	r2, r1, #3
 8008762:	4610      	mov	r0, r2
 8008764:	4619      	mov	r1, r3
 8008766:	4603      	mov	r3, r0
 8008768:	4642      	mov	r2, r8
 800876a:	189b      	adds	r3, r3, r2
 800876c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008770:	464b      	mov	r3, r9
 8008772:	460a      	mov	r2, r1
 8008774:	eb42 0303 	adc.w	r3, r2, r3
 8008778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800877c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008788:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800878c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008790:	460b      	mov	r3, r1
 8008792:	18db      	adds	r3, r3, r3
 8008794:	62bb      	str	r3, [r7, #40]	; 0x28
 8008796:	4613      	mov	r3, r2
 8008798:	eb42 0303 	adc.w	r3, r2, r3
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800879e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80087a6:	f7f7 fd7b 	bl	80002a0 <__aeabi_uldivmod>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <UART_SetConfig+0x2d4>)
 80087b0:	fba3 1302 	umull	r1, r3, r3, r2
 80087b4:	095b      	lsrs	r3, r3, #5
 80087b6:	2164      	movs	r1, #100	; 0x64
 80087b8:	fb01 f303 	mul.w	r3, r1, r3
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	3332      	adds	r3, #50	; 0x32
 80087c2:	4a08      	ldr	r2, [pc, #32]	; (80087e4 <UART_SetConfig+0x2d4>)
 80087c4:	fba2 2303 	umull	r2, r3, r2, r3
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	f003 0207 	and.w	r2, r3, #7
 80087ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4422      	add	r2, r4
 80087d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087d8:	e105      	b.n	80089e6 <UART_SetConfig+0x4d6>
 80087da:	bf00      	nop
 80087dc:	40011000 	.word	0x40011000
 80087e0:	40011400 	.word	0x40011400
 80087e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80087f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80087fa:	4642      	mov	r2, r8
 80087fc:	464b      	mov	r3, r9
 80087fe:	1891      	adds	r1, r2, r2
 8008800:	6239      	str	r1, [r7, #32]
 8008802:	415b      	adcs	r3, r3
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
 8008806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800880a:	4641      	mov	r1, r8
 800880c:	1854      	adds	r4, r2, r1
 800880e:	4649      	mov	r1, r9
 8008810:	eb43 0501 	adc.w	r5, r3, r1
 8008814:	f04f 0200 	mov.w	r2, #0
 8008818:	f04f 0300 	mov.w	r3, #0
 800881c:	00eb      	lsls	r3, r5, #3
 800881e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008822:	00e2      	lsls	r2, r4, #3
 8008824:	4614      	mov	r4, r2
 8008826:	461d      	mov	r5, r3
 8008828:	4643      	mov	r3, r8
 800882a:	18e3      	adds	r3, r4, r3
 800882c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008830:	464b      	mov	r3, r9
 8008832:	eb45 0303 	adc.w	r3, r5, r3
 8008836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800883a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008846:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008856:	4629      	mov	r1, r5
 8008858:	008b      	lsls	r3, r1, #2
 800885a:	4621      	mov	r1, r4
 800885c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008860:	4621      	mov	r1, r4
 8008862:	008a      	lsls	r2, r1, #2
 8008864:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008868:	f7f7 fd1a 	bl	80002a0 <__aeabi_uldivmod>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4b60      	ldr	r3, [pc, #384]	; (80089f4 <UART_SetConfig+0x4e4>)
 8008872:	fba3 2302 	umull	r2, r3, r3, r2
 8008876:	095b      	lsrs	r3, r3, #5
 8008878:	011c      	lsls	r4, r3, #4
 800887a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800887e:	2200      	movs	r2, #0
 8008880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008884:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008888:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800888c:	4642      	mov	r2, r8
 800888e:	464b      	mov	r3, r9
 8008890:	1891      	adds	r1, r2, r2
 8008892:	61b9      	str	r1, [r7, #24]
 8008894:	415b      	adcs	r3, r3
 8008896:	61fb      	str	r3, [r7, #28]
 8008898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800889c:	4641      	mov	r1, r8
 800889e:	1851      	adds	r1, r2, r1
 80088a0:	6139      	str	r1, [r7, #16]
 80088a2:	4649      	mov	r1, r9
 80088a4:	414b      	adcs	r3, r1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	f04f 0300 	mov.w	r3, #0
 80088b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088b4:	4659      	mov	r1, fp
 80088b6:	00cb      	lsls	r3, r1, #3
 80088b8:	4651      	mov	r1, sl
 80088ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088be:	4651      	mov	r1, sl
 80088c0:	00ca      	lsls	r2, r1, #3
 80088c2:	4610      	mov	r0, r2
 80088c4:	4619      	mov	r1, r3
 80088c6:	4603      	mov	r3, r0
 80088c8:	4642      	mov	r2, r8
 80088ca:	189b      	adds	r3, r3, r2
 80088cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088d0:	464b      	mov	r3, r9
 80088d2:	460a      	mov	r2, r1
 80088d4:	eb42 0303 	adc.w	r3, r2, r3
 80088d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80088e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80088f4:	4649      	mov	r1, r9
 80088f6:	008b      	lsls	r3, r1, #2
 80088f8:	4641      	mov	r1, r8
 80088fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088fe:	4641      	mov	r1, r8
 8008900:	008a      	lsls	r2, r1, #2
 8008902:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008906:	f7f7 fccb 	bl	80002a0 <__aeabi_uldivmod>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4b39      	ldr	r3, [pc, #228]	; (80089f4 <UART_SetConfig+0x4e4>)
 8008910:	fba3 1302 	umull	r1, r3, r3, r2
 8008914:	095b      	lsrs	r3, r3, #5
 8008916:	2164      	movs	r1, #100	; 0x64
 8008918:	fb01 f303 	mul.w	r3, r1, r3
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	3332      	adds	r3, #50	; 0x32
 8008922:	4a34      	ldr	r2, [pc, #208]	; (80089f4 <UART_SetConfig+0x4e4>)
 8008924:	fba2 2303 	umull	r2, r3, r2, r3
 8008928:	095b      	lsrs	r3, r3, #5
 800892a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800892e:	441c      	add	r4, r3
 8008930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008934:	2200      	movs	r2, #0
 8008936:	673b      	str	r3, [r7, #112]	; 0x70
 8008938:	677a      	str	r2, [r7, #116]	; 0x74
 800893a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800893e:	4642      	mov	r2, r8
 8008940:	464b      	mov	r3, r9
 8008942:	1891      	adds	r1, r2, r2
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	415b      	adcs	r3, r3
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800894e:	4641      	mov	r1, r8
 8008950:	1851      	adds	r1, r2, r1
 8008952:	6039      	str	r1, [r7, #0]
 8008954:	4649      	mov	r1, r9
 8008956:	414b      	adcs	r3, r1
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008966:	4659      	mov	r1, fp
 8008968:	00cb      	lsls	r3, r1, #3
 800896a:	4651      	mov	r1, sl
 800896c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008970:	4651      	mov	r1, sl
 8008972:	00ca      	lsls	r2, r1, #3
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	4603      	mov	r3, r0
 800897a:	4642      	mov	r2, r8
 800897c:	189b      	adds	r3, r3, r2
 800897e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008980:	464b      	mov	r3, r9
 8008982:	460a      	mov	r2, r1
 8008984:	eb42 0303 	adc.w	r3, r2, r3
 8008988:	66fb      	str	r3, [r7, #108]	; 0x6c
 800898a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	663b      	str	r3, [r7, #96]	; 0x60
 8008994:	667a      	str	r2, [r7, #100]	; 0x64
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	f04f 0300 	mov.w	r3, #0
 800899e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80089a2:	4649      	mov	r1, r9
 80089a4:	008b      	lsls	r3, r1, #2
 80089a6:	4641      	mov	r1, r8
 80089a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089ac:	4641      	mov	r1, r8
 80089ae:	008a      	lsls	r2, r1, #2
 80089b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089b4:	f7f7 fc74 	bl	80002a0 <__aeabi_uldivmod>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4b0d      	ldr	r3, [pc, #52]	; (80089f4 <UART_SetConfig+0x4e4>)
 80089be:	fba3 1302 	umull	r1, r3, r3, r2
 80089c2:	095b      	lsrs	r3, r3, #5
 80089c4:	2164      	movs	r1, #100	; 0x64
 80089c6:	fb01 f303 	mul.w	r3, r1, r3
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	3332      	adds	r3, #50	; 0x32
 80089d0:	4a08      	ldr	r2, [pc, #32]	; (80089f4 <UART_SetConfig+0x4e4>)
 80089d2:	fba2 2303 	umull	r2, r3, r2, r3
 80089d6:	095b      	lsrs	r3, r3, #5
 80089d8:	f003 020f 	and.w	r2, r3, #15
 80089dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4422      	add	r2, r4
 80089e4:	609a      	str	r2, [r3, #8]
}
 80089e6:	bf00      	nop
 80089e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80089ec:	46bd      	mov	sp, r7
 80089ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089f2:	bf00      	nop
 80089f4:	51eb851f 	.word	0x51eb851f

080089f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089f8:	b084      	sub	sp, #16
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	f107 001c 	add.w	r0, r7, #28
 8008a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d122      	bne.n	8008a56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d105      	bne.n	8008a4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f001 fbee 	bl	800a22c <USB_CoreReset>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73fb      	strb	r3, [r7, #15]
 8008a54:	e01a      	b.n	8008a8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 fbe2 	bl	800a22c <USB_CoreReset>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8008a7e:	e005      	b.n	8008a8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d10b      	bne.n	8008aaa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f043 0206 	orr.w	r2, r3, #6
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f043 0220 	orr.w	r2, r3, #32
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ab6:	b004      	add	sp, #16
 8008ab8:	4770      	bx	lr
	...

08008abc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d165      	bne.n	8008b9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4a41      	ldr	r2, [pc, #260]	; (8008bd8 <USB_SetTurnaroundTime+0x11c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d906      	bls.n	8008ae6 <USB_SetTurnaroundTime+0x2a>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4a40      	ldr	r2, [pc, #256]	; (8008bdc <USB_SetTurnaroundTime+0x120>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d202      	bcs.n	8008ae6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008ae0:	230f      	movs	r3, #15
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	e062      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	4a3c      	ldr	r2, [pc, #240]	; (8008bdc <USB_SetTurnaroundTime+0x120>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d306      	bcc.n	8008afc <USB_SetTurnaroundTime+0x40>
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4a3b      	ldr	r2, [pc, #236]	; (8008be0 <USB_SetTurnaroundTime+0x124>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d202      	bcs.n	8008afc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008af6:	230e      	movs	r3, #14
 8008af8:	617b      	str	r3, [r7, #20]
 8008afa:	e057      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4a38      	ldr	r2, [pc, #224]	; (8008be0 <USB_SetTurnaroundTime+0x124>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d306      	bcc.n	8008b12 <USB_SetTurnaroundTime+0x56>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4a37      	ldr	r2, [pc, #220]	; (8008be4 <USB_SetTurnaroundTime+0x128>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d202      	bcs.n	8008b12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b0c:	230d      	movs	r3, #13
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e04c      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	4a33      	ldr	r2, [pc, #204]	; (8008be4 <USB_SetTurnaroundTime+0x128>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d306      	bcc.n	8008b28 <USB_SetTurnaroundTime+0x6c>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4a32      	ldr	r2, [pc, #200]	; (8008be8 <USB_SetTurnaroundTime+0x12c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d802      	bhi.n	8008b28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b22:	230c      	movs	r3, #12
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	e041      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	4a2f      	ldr	r2, [pc, #188]	; (8008be8 <USB_SetTurnaroundTime+0x12c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d906      	bls.n	8008b3e <USB_SetTurnaroundTime+0x82>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4a2e      	ldr	r2, [pc, #184]	; (8008bec <USB_SetTurnaroundTime+0x130>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d802      	bhi.n	8008b3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b38:	230b      	movs	r3, #11
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	e036      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	4a2a      	ldr	r2, [pc, #168]	; (8008bec <USB_SetTurnaroundTime+0x130>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d906      	bls.n	8008b54 <USB_SetTurnaroundTime+0x98>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	4a29      	ldr	r2, [pc, #164]	; (8008bf0 <USB_SetTurnaroundTime+0x134>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d802      	bhi.n	8008b54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b4e:	230a      	movs	r3, #10
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e02b      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4a26      	ldr	r2, [pc, #152]	; (8008bf0 <USB_SetTurnaroundTime+0x134>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d906      	bls.n	8008b6a <USB_SetTurnaroundTime+0xae>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	4a25      	ldr	r2, [pc, #148]	; (8008bf4 <USB_SetTurnaroundTime+0x138>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d202      	bcs.n	8008b6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b64:	2309      	movs	r3, #9
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	e020      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4a21      	ldr	r2, [pc, #132]	; (8008bf4 <USB_SetTurnaroundTime+0x138>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d306      	bcc.n	8008b80 <USB_SetTurnaroundTime+0xc4>
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	4a20      	ldr	r2, [pc, #128]	; (8008bf8 <USB_SetTurnaroundTime+0x13c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d802      	bhi.n	8008b80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b7a:	2308      	movs	r3, #8
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e015      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	4a1d      	ldr	r2, [pc, #116]	; (8008bf8 <USB_SetTurnaroundTime+0x13c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d906      	bls.n	8008b96 <USB_SetTurnaroundTime+0xda>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4a1c      	ldr	r2, [pc, #112]	; (8008bfc <USB_SetTurnaroundTime+0x140>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d202      	bcs.n	8008b96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b90:	2307      	movs	r3, #7
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	e00a      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b96:	2306      	movs	r3, #6
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	e007      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d102      	bne.n	8008ba8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ba2:	2309      	movs	r3, #9
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e001      	b.n	8008bac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008ba8:	2309      	movs	r3, #9
 8008baa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	029b      	lsls	r3, r3, #10
 8008bc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	371c      	adds	r7, #28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	00d8acbf 	.word	0x00d8acbf
 8008bdc:	00e4e1c0 	.word	0x00e4e1c0
 8008be0:	00f42400 	.word	0x00f42400
 8008be4:	01067380 	.word	0x01067380
 8008be8:	011a499f 	.word	0x011a499f
 8008bec:	01312cff 	.word	0x01312cff
 8008bf0:	014ca43f 	.word	0x014ca43f
 8008bf4:	016e3600 	.word	0x016e3600
 8008bf8:	01a6ab1f 	.word	0x01a6ab1f
 8008bfc:	01e84800 	.word	0x01e84800

08008c00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f043 0201 	orr.w	r2, r3, #1
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f023 0201 	bic.w	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d115      	bne.n	8008c92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c72:	2001      	movs	r0, #1
 8008c74:	f7f9 f9ce 	bl	8002014 <HAL_Delay>
      ms++;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 fa45 	bl	800a10e <USB_GetMode>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d01e      	beq.n	8008cc8 <USB_SetCurrentMode+0x84>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b31      	cmp	r3, #49	; 0x31
 8008c8e:	d9f0      	bls.n	8008c72 <USB_SetCurrentMode+0x2e>
 8008c90:	e01a      	b.n	8008cc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c92:	78fb      	ldrb	r3, [r7, #3]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d115      	bne.n	8008cc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f7f9 f9b5 	bl	8002014 <HAL_Delay>
      ms++;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3301      	adds	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 fa2c 	bl	800a10e <USB_GetMode>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d005      	beq.n	8008cc8 <USB_SetCurrentMode+0x84>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b31      	cmp	r3, #49	; 0x31
 8008cc0:	d9f0      	bls.n	8008ca4 <USB_SetCurrentMode+0x60>
 8008cc2:	e001      	b.n	8008cc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e005      	b.n	8008cd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b32      	cmp	r3, #50	; 0x32
 8008ccc:	d101      	bne.n	8008cd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e000      	b.n	8008cd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cdc:	b084      	sub	sp, #16
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b086      	sub	sp, #24
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	613b      	str	r3, [r7, #16]
 8008cfa:	e009      	b.n	8008d10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	3340      	adds	r3, #64	; 0x40
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	2200      	movs	r2, #0
 8008d08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2b0e      	cmp	r3, #14
 8008d14:	d9f2      	bls.n	8008cfc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d11c      	bne.n	8008d56 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d2a:	f043 0302 	orr.w	r3, r3, #2
 8008d2e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38
 8008d54:	e00b      	b.n	8008d6e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d74:	461a      	mov	r2, r3
 8008d76:	2300      	movs	r3, #0
 8008d78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d80:	4619      	mov	r1, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d88:	461a      	mov	r2, r3
 8008d8a:	680b      	ldr	r3, [r1, #0]
 8008d8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d10c      	bne.n	8008dae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d104      	bne.n	8008da4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f965 	bl	800906c <USB_SetDevSpeed>
 8008da2:	e008      	b.n	8008db6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008da4:	2101      	movs	r1, #1
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f960 	bl	800906c <USB_SetDevSpeed>
 8008dac:	e003      	b.n	8008db6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dae:	2103      	movs	r1, #3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f95b 	bl	800906c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008db6:	2110      	movs	r1, #16
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f8f3 	bl	8008fa4 <USB_FlushTxFifo>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f91f 	bl	800900c <USB_FlushRxFifo>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dde:	461a      	mov	r2, r3
 8008de0:	2300      	movs	r3, #0
 8008de2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dea:	461a      	mov	r2, r3
 8008dec:	2300      	movs	r3, #0
 8008dee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df6:	461a      	mov	r2, r3
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	e043      	b.n	8008e8a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e18:	d118      	bne.n	8008e4c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	e013      	b.n	8008e5e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e42:	461a      	mov	r2, r3
 8008e44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	e008      	b.n	8008e5e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e58:	461a      	mov	r2, r3
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	3301      	adds	r3, #1
 8008e88:	613b      	str	r3, [r7, #16]
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d3b7      	bcc.n	8008e02 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	e043      	b.n	8008f20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eae:	d118      	bne.n	8008ee2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10a      	bne.n	8008ecc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	e013      	b.n	8008ef4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed8:	461a      	mov	r2, r3
 8008eda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	e008      	b.n	8008ef4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eee:	461a      	mov	r2, r3
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f00:	461a      	mov	r2, r3
 8008f02:	2300      	movs	r3, #0
 8008f04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f12:	461a      	mov	r2, r3
 8008f14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	613b      	str	r3, [r7, #16]
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d3b7      	bcc.n	8008e98 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d105      	bne.n	8008f5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	f043 0210 	orr.w	r2, r3, #16
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699a      	ldr	r2, [r3, #24]
 8008f60:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <USB_DevInit+0x2c4>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	f043 0208 	orr.w	r2, r3, #8
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d107      	bne.n	8008f90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f88:	f043 0304 	orr.w	r3, r3, #4
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f9c:	b004      	add	sp, #16
 8008f9e:	4770      	bx	lr
 8008fa0:	803c3800 	.word	0x803c3800

08008fa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4a13      	ldr	r2, [pc, #76]	; (8009008 <USB_FlushTxFifo+0x64>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d901      	bls.n	8008fc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e01b      	b.n	8008ffc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	daf2      	bge.n	8008fb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	019b      	lsls	r3, r3, #6
 8008fd4:	f043 0220 	orr.w	r2, r3, #32
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	4a08      	ldr	r2, [pc, #32]	; (8009008 <USB_FlushTxFifo+0x64>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d901      	bls.n	8008fee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e006      	b.n	8008ffc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d0f0      	beq.n	8008fdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	00030d40 	.word	0x00030d40

0800900c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3301      	adds	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4a11      	ldr	r2, [pc, #68]	; (8009068 <USB_FlushRxFifo+0x5c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d901      	bls.n	800902a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e018      	b.n	800905c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	daf2      	bge.n	8009018 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2210      	movs	r2, #16
 800903a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3301      	adds	r3, #1
 8009040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4a08      	ldr	r2, [pc, #32]	; (8009068 <USB_FlushRxFifo+0x5c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d901      	bls.n	800904e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e006      	b.n	800905c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	f003 0310 	and.w	r3, r3, #16
 8009056:	2b10      	cmp	r3, #16
 8009058:	d0f0      	beq.n	800903c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	00030d40 	.word	0x00030d40

0800906c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	68f9      	ldr	r1, [r7, #12]
 8009088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800908c:	4313      	orrs	r3, r2
 800908e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800909e:	b480      	push	{r7}
 80090a0:	b087      	sub	sp, #28
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f003 0306 	and.w	r3, r3, #6
 80090b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090be:	2300      	movs	r3, #0
 80090c0:	75fb      	strb	r3, [r7, #23]
 80090c2:	e00a      	b.n	80090da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d002      	beq.n	80090d0 <USB_GetDevSpeed+0x32>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b06      	cmp	r3, #6
 80090ce:	d102      	bne.n	80090d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090d0:	2302      	movs	r3, #2
 80090d2:	75fb      	strb	r3, [r7, #23]
 80090d4:	e001      	b.n	80090da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090d6:	230f      	movs	r3, #15
 80090d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090da:	7dfb      	ldrb	r3, [r7, #23]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	371c      	adds	r7, #28
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d13a      	bne.n	800917a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910a:	69da      	ldr	r2, [r3, #28]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	f003 030f 	and.w	r3, r3, #15
 8009114:	2101      	movs	r1, #1
 8009116:	fa01 f303 	lsl.w	r3, r1, r3
 800911a:	b29b      	uxth	r3, r3
 800911c:	68f9      	ldr	r1, [r7, #12]
 800911e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009122:	4313      	orrs	r3, r2
 8009124:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d155      	bne.n	80091e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	791b      	ldrb	r3, [r3, #4]
 8009156:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009158:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	059b      	lsls	r3, r3, #22
 800915e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009160:	4313      	orrs	r3, r2
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	0151      	lsls	r1, r2, #5
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	440a      	add	r2, r1
 800916a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800916e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	e036      	b.n	80091e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009180:	69da      	ldr	r2, [r3, #28]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	f003 030f 	and.w	r3, r3, #15
 800918a:	2101      	movs	r1, #1
 800918c:	fa01 f303 	lsl.w	r3, r1, r3
 8009190:	041b      	lsls	r3, r3, #16
 8009192:	68f9      	ldr	r1, [r7, #12]
 8009194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009198:	4313      	orrs	r3, r2
 800919a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d11a      	bne.n	80091e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	791b      	ldrb	r3, [r3, #4]
 80091cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091ce:	430b      	orrs	r3, r1
 80091d0:	4313      	orrs	r3, r2
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	0151      	lsls	r1, r2, #5
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	440a      	add	r2, r1
 80091da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
	...

080091f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d161      	bne.n	80092d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800922a:	d11f      	bne.n	800926c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009246:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800924a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	0151      	lsls	r1, r2, #5
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	440a      	add	r2, r1
 8009262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009266:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800926a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	f003 030f 	and.w	r3, r3, #15
 800927c:	2101      	movs	r1, #1
 800927e:	fa01 f303 	lsl.w	r3, r1, r3
 8009282:	b29b      	uxth	r3, r3
 8009284:	43db      	mvns	r3, r3
 8009286:	68f9      	ldr	r1, [r7, #12]
 8009288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800928c:	4013      	ands	r3, r2
 800928e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009296:	69da      	ldr	r2, [r3, #28]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	2101      	movs	r1, #1
 80092a2:	fa01 f303 	lsl.w	r3, r1, r3
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	43db      	mvns	r3, r3
 80092aa:	68f9      	ldr	r1, [r7, #12]
 80092ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092b0:	4013      	ands	r3, r2
 80092b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	015a      	lsls	r2, r3, #5
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	4413      	add	r3, r2
 80092bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	0159      	lsls	r1, r3, #5
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	440b      	add	r3, r1
 80092ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ce:	4619      	mov	r1, r3
 80092d0:	4b35      	ldr	r3, [pc, #212]	; (80093a8 <USB_DeactivateEndpoint+0x1b0>)
 80092d2:	4013      	ands	r3, r2
 80092d4:	600b      	str	r3, [r1, #0]
 80092d6:	e060      	b.n	800939a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ee:	d11f      	bne.n	8009330 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	440a      	add	r2, r1
 8009306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800930a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800930e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	0151      	lsls	r1, r2, #5
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	440a      	add	r2, r1
 8009326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800932a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800932e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	2101      	movs	r1, #1
 8009342:	fa01 f303 	lsl.w	r3, r1, r3
 8009346:	041b      	lsls	r3, r3, #16
 8009348:	43db      	mvns	r3, r3
 800934a:	68f9      	ldr	r1, [r7, #12]
 800934c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009350:	4013      	ands	r3, r2
 8009352:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935a:	69da      	ldr	r2, [r3, #28]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	2101      	movs	r1, #1
 8009366:	fa01 f303 	lsl.w	r3, r1, r3
 800936a:	041b      	lsls	r3, r3, #16
 800936c:	43db      	mvns	r3, r3
 800936e:	68f9      	ldr	r1, [r7, #12]
 8009370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009374:	4013      	ands	r3, r2
 8009376:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	0159      	lsls	r1, r3, #5
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	440b      	add	r3, r1
 800938e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009392:	4619      	mov	r1, r3
 8009394:	4b05      	ldr	r3, [pc, #20]	; (80093ac <USB_DeactivateEndpoint+0x1b4>)
 8009396:	4013      	ands	r3, r2
 8009398:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr
 80093a8:	ec337800 	.word	0xec337800
 80093ac:	eff37800 	.word	0xeff37800

080093b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08a      	sub	sp, #40	; 0x28
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	4613      	mov	r3, r2
 80093bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	f040 815c 	bne.w	800968a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d132      	bne.n	8009440 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	0151      	lsls	r1, r2, #5
 8009410:	69fa      	ldr	r2, [r7, #28]
 8009412:	440a      	add	r2, r1
 8009414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009418:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800941c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	0151      	lsls	r1, r2, #5
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	440a      	add	r2, r1
 8009434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009438:	0cdb      	lsrs	r3, r3, #19
 800943a:	04db      	lsls	r3, r3, #19
 800943c:	6113      	str	r3, [r2, #16]
 800943e:	e074      	b.n	800952a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	69fa      	ldr	r2, [r7, #28]
 8009454:	440a      	add	r2, r1
 8009456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945a:	0cdb      	lsrs	r3, r3, #19
 800945c:	04db      	lsls	r3, r3, #19
 800945e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	0151      	lsls	r1, r2, #5
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	440a      	add	r2, r1
 8009476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800947a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800947e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009482:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009490:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6999      	ldr	r1, [r3, #24]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	440b      	add	r3, r1
 800949c:	1e59      	subs	r1, r3, #1
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80094a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094a8:	4b9d      	ldr	r3, [pc, #628]	; (8009720 <USB_EPStartXfer+0x370>)
 80094aa:	400b      	ands	r3, r1
 80094ac:	69b9      	ldr	r1, [r7, #24]
 80094ae:	0148      	lsls	r0, r1, #5
 80094b0:	69f9      	ldr	r1, [r7, #28]
 80094b2:	4401      	add	r1, r0
 80094b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094b8:	4313      	orrs	r3, r2
 80094ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094d2:	69b9      	ldr	r1, [r7, #24]
 80094d4:	0148      	lsls	r0, r1, #5
 80094d6:	69f9      	ldr	r1, [r7, #28]
 80094d8:	4401      	add	r1, r0
 80094da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094de:	4313      	orrs	r3, r2
 80094e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	791b      	ldrb	r3, [r3, #4]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d11f      	bne.n	800952a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	0151      	lsls	r1, r2, #5
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	440a      	add	r2, r1
 8009500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009504:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009508:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	69fa      	ldr	r2, [r7, #28]
 800951e:	440a      	add	r2, r1
 8009520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009528:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800952a:	79fb      	ldrb	r3, [r7, #7]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d14b      	bne.n	80095c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d009      	beq.n	800954c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009544:	461a      	mov	r2, r3
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	791b      	ldrb	r3, [r3, #4]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d128      	bne.n	80095a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009560:	2b00      	cmp	r3, #0
 8009562:	d110      	bne.n	8009586 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	0151      	lsls	r1, r2, #5
 8009576:	69fa      	ldr	r2, [r7, #28]
 8009578:	440a      	add	r2, r1
 800957a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800957e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	e00f      	b.n	80095a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	0151      	lsls	r1, r2, #5
 8009598:	69fa      	ldr	r2, [r7, #28]
 800959a:	440a      	add	r2, r1
 800959c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	69fa      	ldr	r2, [r7, #28]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095c4:	6013      	str	r3, [r2, #0]
 80095c6:	e133      	b.n	8009830 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	69fa      	ldr	r2, [r7, #28]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	791b      	ldrb	r3, [r3, #4]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d015      	beq.n	800961c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 811b 	beq.w	8009830 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	2101      	movs	r1, #1
 800960c:	fa01 f303 	lsl.w	r3, r1, r3
 8009610:	69f9      	ldr	r1, [r7, #28]
 8009612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009616:	4313      	orrs	r3, r2
 8009618:	634b      	str	r3, [r1, #52]	; 0x34
 800961a:	e109      	b.n	8009830 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009628:	2b00      	cmp	r3, #0
 800962a:	d110      	bne.n	800964e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	0151      	lsls	r1, r2, #5
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	440a      	add	r2, r1
 8009642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009646:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	e00f      	b.n	800966e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	4413      	add	r3, r2
 8009656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	0151      	lsls	r1, r2, #5
 8009660:	69fa      	ldr	r2, [r7, #28]
 8009662:	440a      	add	r2, r1
 8009664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800966c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	6919      	ldr	r1, [r3, #16]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	b298      	uxth	r0, r3
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4603      	mov	r3, r0
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fade 	bl	8009c44 <USB_WritePacket>
 8009688:	e0d2      	b.n	8009830 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	0151      	lsls	r1, r2, #5
 800969c:	69fa      	ldr	r2, [r7, #28]
 800969e:	440a      	add	r2, r1
 80096a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a4:	0cdb      	lsrs	r3, r3, #19
 80096a6:	04db      	lsls	r3, r3, #19
 80096a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	0151      	lsls	r1, r2, #5
 80096bc:	69fa      	ldr	r2, [r7, #28]
 80096be:	440a      	add	r2, r1
 80096c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d126      	bne.n	8009724 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096ec:	69b9      	ldr	r1, [r7, #24]
 80096ee:	0148      	lsls	r0, r1, #5
 80096f0:	69f9      	ldr	r1, [r7, #28]
 80096f2:	4401      	add	r1, r0
 80096f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096f8:	4313      	orrs	r3, r2
 80096fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	0151      	lsls	r1, r2, #5
 800970e:	69fa      	ldr	r2, [r7, #28]
 8009710:	440a      	add	r2, r1
 8009712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009716:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800971a:	6113      	str	r3, [r2, #16]
 800971c:	e03a      	b.n	8009794 <USB_EPStartXfer+0x3e4>
 800971e:	bf00      	nop
 8009720:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	699a      	ldr	r2, [r3, #24]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	4413      	add	r3, r2
 800972e:	1e5a      	subs	r2, r3, #1
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	fbb2 f3f3 	udiv	r3, r2, r3
 8009738:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	8afa      	ldrh	r2, [r7, #22]
 8009740:	fb03 f202 	mul.w	r2, r3, r2
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009754:	691a      	ldr	r2, [r3, #16]
 8009756:	8afb      	ldrh	r3, [r7, #22]
 8009758:	04d9      	lsls	r1, r3, #19
 800975a:	4b38      	ldr	r3, [pc, #224]	; (800983c <USB_EPStartXfer+0x48c>)
 800975c:	400b      	ands	r3, r1
 800975e:	69b9      	ldr	r1, [r7, #24]
 8009760:	0148      	lsls	r0, r1, #5
 8009762:	69f9      	ldr	r1, [r7, #28]
 8009764:	4401      	add	r1, r0
 8009766:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800976a:	4313      	orrs	r3, r2
 800976c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	4413      	add	r3, r2
 8009776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009784:	69b9      	ldr	r1, [r7, #24]
 8009786:	0148      	lsls	r0, r1, #5
 8009788:	69f9      	ldr	r1, [r7, #28]
 800978a:	4401      	add	r1, r0
 800978c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009790:	4313      	orrs	r3, r2
 8009792:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009794:	79fb      	ldrb	r3, [r7, #7]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d10d      	bne.n	80097b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	6919      	ldr	r1, [r3, #16]
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b2:	460a      	mov	r2, r1
 80097b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	791b      	ldrb	r3, [r3, #4]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d128      	bne.n	8009810 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d110      	bne.n	80097f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	69fa      	ldr	r2, [r7, #28]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	e00f      	b.n	8009810 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69ba      	ldr	r2, [r7, #24]
 8009800:	0151      	lsls	r1, r2, #5
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	440a      	add	r2, r1
 8009806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800980a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800980e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	440a      	add	r2, r1
 8009826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800982a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800982e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3720      	adds	r7, #32
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	1ff80000 	.word	0x1ff80000

08009840 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	785b      	ldrb	r3, [r3, #1]
 800985c:	2b01      	cmp	r3, #1
 800985e:	f040 80ce 	bne.w	80099fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d132      	bne.n	80098d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	0151      	lsls	r1, r2, #5
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	440a      	add	r2, r1
 8009880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009884:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009888:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800988c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c8:	0cdb      	lsrs	r3, r3, #19
 80098ca:	04db      	lsls	r3, r3, #19
 80098cc:	6113      	str	r3, [r2, #16]
 80098ce:	e04e      	b.n	800996e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	0151      	lsls	r1, r2, #5
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	440a      	add	r2, r1
 80098e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ea:	0cdb      	lsrs	r3, r3, #19
 80098ec:	04db      	lsls	r3, r3, #19
 80098ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	440a      	add	r2, r1
 8009906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800990a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800990e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009912:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	699a      	ldr	r2, [r3, #24]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	429a      	cmp	r2, r3
 800991e:	d903      	bls.n	8009928 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	68da      	ldr	r2, [r3, #12]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	0151      	lsls	r1, r2, #5
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	440a      	add	r2, r1
 800993e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009942:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009946:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009954:	691a      	ldr	r2, [r3, #16]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800995e:	6939      	ldr	r1, [r7, #16]
 8009960:	0148      	lsls	r0, r1, #5
 8009962:	6979      	ldr	r1, [r7, #20]
 8009964:	4401      	add	r1, r0
 8009966:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800996a:	4313      	orrs	r3, r2
 800996c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d11e      	bne.n	80099b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d009      	beq.n	8009990 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	461a      	mov	r2, r3
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	0151      	lsls	r1, r2, #5
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	440a      	add	r2, r1
 80099a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	e097      	b.n	8009ae2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	0151      	lsls	r1, r2, #5
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	440a      	add	r2, r1
 80099c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 8083 	beq.w	8009ae2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	f003 030f 	and.w	r3, r3, #15
 80099ec:	2101      	movs	r1, #1
 80099ee:	fa01 f303 	lsl.w	r3, r1, r3
 80099f2:	6979      	ldr	r1, [r7, #20]
 80099f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099f8:	4313      	orrs	r3, r2
 80099fa:	634b      	str	r3, [r1, #52]	; 0x34
 80099fc:	e071      	b.n	8009ae2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a18:	0cdb      	lsrs	r3, r3, #19
 8009a1a:	04db      	lsls	r3, r3, #19
 8009a1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	0151      	lsls	r1, r2, #5
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	440a      	add	r2, r1
 8009a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	68da      	ldr	r2, [r3, #12]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	0151      	lsls	r1, r2, #5
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	440a      	add	r2, r1
 8009a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a86:	691a      	ldr	r2, [r3, #16]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	69db      	ldr	r3, [r3, #28]
 8009a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a90:	6939      	ldr	r1, [r7, #16]
 8009a92:	0148      	lsls	r0, r1, #5
 8009a94:	6979      	ldr	r1, [r7, #20]
 8009a96:	4401      	add	r1, r0
 8009a98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d10d      	bne.n	8009ac2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	6919      	ldr	r1, [r3, #16]
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	015a      	lsls	r2, r3, #5
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009abe:	460a      	mov	r2, r1
 8009ac0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	0151      	lsls	r1, r2, #5
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	440a      	add	r2, r1
 8009ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009adc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	371c      	adds	r7, #28
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	785b      	ldrb	r3, [r3, #1]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d14a      	bne.n	8009ba4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b26:	f040 8086 	bne.w	8009c36 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	015a      	lsls	r2, r3, #5
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	7812      	ldrb	r2, [r2, #0]
 8009b3e:	0151      	lsls	r1, r2, #5
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	440a      	add	r2, r1
 8009b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	7812      	ldrb	r2, [r2, #0]
 8009b62:	0151      	lsls	r1, r2, #5
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	440a      	add	r2, r1
 8009b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3301      	adds	r3, #1
 8009b76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d902      	bls.n	8009b88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	75fb      	strb	r3, [r7, #23]
          break;
 8009b86:	e056      	b.n	8009c36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ba0:	d0e7      	beq.n	8009b72 <USB_EPStopXfer+0x82>
 8009ba2:	e048      	b.n	8009c36 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	015a      	lsls	r2, r3, #5
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bbc:	d13b      	bne.n	8009c36 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	7812      	ldrb	r2, [r2, #0]
 8009bd2:	0151      	lsls	r1, r2, #5
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	440a      	add	r2, r1
 8009bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009be0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	7812      	ldrb	r2, [r2, #0]
 8009bf6:	0151      	lsls	r1, r2, #5
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	440a      	add	r2, r1
 8009bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d902      	bls.n	8009c1c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	75fb      	strb	r3, [r7, #23]
          break;
 8009c1a:	e00c      	b.n	8009c36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c34:	d0e7      	beq.n	8009c06 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b089      	sub	sp, #36	; 0x24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	4611      	mov	r1, r2
 8009c50:	461a      	mov	r2, r3
 8009c52:	460b      	mov	r3, r1
 8009c54:	71fb      	strb	r3, [r7, #7]
 8009c56:	4613      	mov	r3, r2
 8009c58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d123      	bne.n	8009cb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c6a:	88bb      	ldrh	r3, [r7, #4]
 8009c6c:	3303      	adds	r3, #3
 8009c6e:	089b      	lsrs	r3, r3, #2
 8009c70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c72:	2300      	movs	r3, #0
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	e018      	b.n	8009caa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	031a      	lsls	r2, r3, #12
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c84:	461a      	mov	r2, r3
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	3301      	adds	r3, #1
 8009c96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	61bb      	str	r3, [r7, #24]
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d3e2      	bcc.n	8009c78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3724      	adds	r7, #36	; 0x24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b08b      	sub	sp, #44	; 0x2c
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	089b      	lsrs	r3, r3, #2
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	f003 0303 	and.w	r3, r3, #3
 8009ce4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	623b      	str	r3, [r7, #32]
 8009cea:	e014      	b.n	8009d16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	3301      	adds	r3, #1
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	3301      	adds	r3, #1
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	3301      	adds	r3, #1
 8009d14:	623b      	str	r3, [r7, #32]
 8009d16:	6a3a      	ldr	r2, [r7, #32]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d3e6      	bcc.n	8009cec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d1e:	8bfb      	ldrh	r3, [r7, #30]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01e      	beq.n	8009d62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f107 0310 	add.w	r3, r7, #16
 8009d34:	6812      	ldr	r2, [r2, #0]
 8009d36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	00db      	lsls	r3, r3, #3
 8009d40:	fa22 f303 	lsr.w	r3, r2, r3
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	701a      	strb	r2, [r3, #0]
      i++;
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	3301      	adds	r3, #1
 8009d54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d56:	8bfb      	ldrh	r3, [r7, #30]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d5c:	8bfb      	ldrh	r3, [r7, #30]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1ea      	bne.n	8009d38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	372c      	adds	r7, #44	; 0x2c
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	785b      	ldrb	r3, [r3, #1]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d12c      	bne.n	8009de6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	db12      	blt.n	8009dc4 <USB_EPSetStall+0x54>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00f      	beq.n	8009dc4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	015a      	lsls	r2, r3, #5
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	0151      	lsls	r1, r2, #5
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	440a      	add	r2, r1
 8009dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009dc2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	0151      	lsls	r1, r2, #5
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	440a      	add	r2, r1
 8009dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	e02b      	b.n	8009e3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	db12      	blt.n	8009e1e <USB_EPSetStall+0xae>
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00f      	beq.n	8009e1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	0151      	lsls	r1, r2, #5
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	440a      	add	r2, r1
 8009e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	015a      	lsls	r2, r3, #5
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	0151      	lsls	r1, r2, #5
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	440a      	add	r2, r1
 8009e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	785b      	ldrb	r3, [r3, #1]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d128      	bne.n	8009eba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	0151      	lsls	r1, r2, #5
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	440a      	add	r2, r1
 8009e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	791b      	ldrb	r3, [r3, #4]
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	d003      	beq.n	8009e98 <USB_EPClearStall+0x4c>
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	791b      	ldrb	r3, [r3, #4]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d138      	bne.n	8009f0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	0151      	lsls	r1, r2, #5
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	440a      	add	r2, r1
 8009eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eb6:	6013      	str	r3, [r2, #0]
 8009eb8:	e027      	b.n	8009f0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	015a      	lsls	r2, r3, #5
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	0151      	lsls	r1, r2, #5
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	440a      	add	r2, r1
 8009ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ed4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ed8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	791b      	ldrb	r3, [r3, #4]
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	d003      	beq.n	8009eea <USB_EPClearStall+0x9e>
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	791b      	ldrb	r3, [r3, #4]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d10f      	bne.n	8009f0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	0151      	lsls	r1, r2, #5
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	440a      	add	r2, r1
 8009f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f4c:	68f9      	ldr	r1, [r7, #12]
 8009f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f52:	4313      	orrs	r3, r2
 8009f54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f7e:	f023 0303 	bic.w	r3, r3, #3
 8009f82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f92:	f023 0302 	bic.w	r3, r3, #2
 8009f96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fc0:	f023 0303 	bic.w	r3, r3, #3
 8009fc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fd4:	f043 0302 	orr.w	r3, r3, #2
 8009fd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a000:	68fb      	ldr	r3, [r7, #12]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a00e:	b480      	push	{r7}
 800a010:	b085      	sub	sp, #20
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	4013      	ands	r3, r2
 800a030:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	0c1b      	lsrs	r3, r3, #16
}
 800a036:	4618      	mov	r0, r3
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a042:	b480      	push	{r7}
 800a044:	b085      	sub	sp, #20
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	4013      	ands	r3, r2
 800a064:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	b29b      	uxth	r3, r3
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a076:	b480      	push	{r7}
 800a078:	b085      	sub	sp, #20
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a086:	78fb      	ldrb	r3, [r7, #3]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b087      	sub	sp, #28
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a0d6:	78fb      	ldrb	r3, [r7, #3]
 800a0d8:	f003 030f 	and.w	r3, r3, #15
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e2:	01db      	lsls	r3, r3, #7
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a0ec:	78fb      	ldrb	r3, [r7, #3]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a100:	68bb      	ldr	r3, [r7, #8]
}
 800a102:	4618      	mov	r0, r3
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	f003 0301 	and.w	r3, r3, #1
}
 800a11e:	4618      	mov	r0, r3
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b085      	sub	sp, #20
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a144:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a148:	f023 0307 	bic.w	r3, r3, #7
 800a14c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a15c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a160:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	460b      	mov	r3, r1
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	333c      	adds	r3, #60	; 0x3c
 800a186:	3304      	adds	r3, #4
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	4a26      	ldr	r2, [pc, #152]	; (800a228 <USB_EP0_OutStart+0xb8>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d90a      	bls.n	800a1aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1a4:	d101      	bne.n	800a1aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e037      	b.n	800a21a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d8:	f043 0318 	orr.w	r3, r3, #24
 800a1dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a1f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a1f2:	7afb      	ldrb	r3, [r7, #11]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d10f      	bne.n	800a218 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1fe:	461a      	mov	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a212:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a216:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	371c      	adds	r7, #28
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	4f54300a 	.word	0x4f54300a

0800a22c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3301      	adds	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4a13      	ldr	r2, [pc, #76]	; (800a290 <USB_CoreReset+0x64>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d901      	bls.n	800a24a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e01b      	b.n	800a282 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	daf2      	bge.n	800a238 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	f043 0201 	orr.w	r2, r3, #1
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3301      	adds	r3, #1
 800a266:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4a09      	ldr	r2, [pc, #36]	; (800a290 <USB_CoreReset+0x64>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d901      	bls.n	800a274 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a270:	2303      	movs	r3, #3
 800a272:	e006      	b.n	800a282 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d0f0      	beq.n	800a262 <USB_CoreReset+0x36>

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	00030d40 	.word	0x00030d40

0800a294 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a2a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a2a4:	f004 ffec 	bl	800f280 <USBD_static_malloc>
 800a2a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d109      	bne.n	800a2c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	32b0      	adds	r2, #176	; 0xb0
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e0d4      	b.n	800a46e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a2c4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f005 f856 	bl	800f37c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	32b0      	adds	r2, #176	; 0xb0
 800a2da:	68f9      	ldr	r1, [r7, #12]
 800a2dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	32b0      	adds	r2, #176	; 0xb0
 800a2ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	7c1b      	ldrb	r3, [r3, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d138      	bne.n	800a36e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a2fc:	4b5e      	ldr	r3, [pc, #376]	; (800a478 <USBD_CDC_Init+0x1e4>)
 800a2fe:	7819      	ldrb	r1, [r3, #0]
 800a300:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a304:	2202      	movs	r2, #2
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f004 fe97 	bl	800f03a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a30c:	4b5a      	ldr	r3, [pc, #360]	; (800a478 <USBD_CDC_Init+0x1e4>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	f003 020f 	and.w	r2, r3, #15
 800a314:	6879      	ldr	r1, [r7, #4]
 800a316:	4613      	mov	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	440b      	add	r3, r1
 800a320:	3324      	adds	r3, #36	; 0x24
 800a322:	2201      	movs	r2, #1
 800a324:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a326:	4b55      	ldr	r3, [pc, #340]	; (800a47c <USBD_CDC_Init+0x1e8>)
 800a328:	7819      	ldrb	r1, [r3, #0]
 800a32a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a32e:	2202      	movs	r2, #2
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f004 fe82 	bl	800f03a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a336:	4b51      	ldr	r3, [pc, #324]	; (800a47c <USBD_CDC_Init+0x1e8>)
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	f003 020f 	and.w	r2, r3, #15
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	440b      	add	r3, r1
 800a34a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a34e:	2201      	movs	r2, #1
 800a350:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a352:	4b4b      	ldr	r3, [pc, #300]	; (800a480 <USBD_CDC_Init+0x1ec>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	f003 020f 	and.w	r2, r3, #15
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	440b      	add	r3, r1
 800a366:	3326      	adds	r3, #38	; 0x26
 800a368:	2210      	movs	r2, #16
 800a36a:	801a      	strh	r2, [r3, #0]
 800a36c:	e035      	b.n	800a3da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a36e:	4b42      	ldr	r3, [pc, #264]	; (800a478 <USBD_CDC_Init+0x1e4>)
 800a370:	7819      	ldrb	r1, [r3, #0]
 800a372:	2340      	movs	r3, #64	; 0x40
 800a374:	2202      	movs	r2, #2
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f004 fe5f 	bl	800f03a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a37c:	4b3e      	ldr	r3, [pc, #248]	; (800a478 <USBD_CDC_Init+0x1e4>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	f003 020f 	and.w	r2, r3, #15
 800a384:	6879      	ldr	r1, [r7, #4]
 800a386:	4613      	mov	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	440b      	add	r3, r1
 800a390:	3324      	adds	r3, #36	; 0x24
 800a392:	2201      	movs	r2, #1
 800a394:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a396:	4b39      	ldr	r3, [pc, #228]	; (800a47c <USBD_CDC_Init+0x1e8>)
 800a398:	7819      	ldrb	r1, [r3, #0]
 800a39a:	2340      	movs	r3, #64	; 0x40
 800a39c:	2202      	movs	r2, #2
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f004 fe4b 	bl	800f03a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a3a4:	4b35      	ldr	r3, [pc, #212]	; (800a47c <USBD_CDC_Init+0x1e8>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	f003 020f 	and.w	r2, r3, #15
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	440b      	add	r3, r1
 800a3b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a3bc:	2201      	movs	r2, #1
 800a3be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a3c0:	4b2f      	ldr	r3, [pc, #188]	; (800a480 <USBD_CDC_Init+0x1ec>)
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	f003 020f 	and.w	r2, r3, #15
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	440b      	add	r3, r1
 800a3d4:	3326      	adds	r3, #38	; 0x26
 800a3d6:	2210      	movs	r2, #16
 800a3d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a3da:	4b29      	ldr	r3, [pc, #164]	; (800a480 <USBD_CDC_Init+0x1ec>)
 800a3dc:	7819      	ldrb	r1, [r3, #0]
 800a3de:	2308      	movs	r3, #8
 800a3e0:	2203      	movs	r2, #3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f004 fe29 	bl	800f03a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a3e8:	4b25      	ldr	r3, [pc, #148]	; (800a480 <USBD_CDC_Init+0x1ec>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	f003 020f 	and.w	r2, r3, #15
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	440b      	add	r3, r1
 800a3fc:	3324      	adds	r3, #36	; 0x24
 800a3fe:	2201      	movs	r2, #1
 800a400:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	33b0      	adds	r3, #176	; 0xb0
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a438:	2302      	movs	r3, #2
 800a43a:	e018      	b.n	800a46e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	7c1b      	ldrb	r3, [r3, #16]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a444:	4b0d      	ldr	r3, [pc, #52]	; (800a47c <USBD_CDC_Init+0x1e8>)
 800a446:	7819      	ldrb	r1, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a44e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f004 fee0 	bl	800f218 <USBD_LL_PrepareReceive>
 800a458:	e008      	b.n	800a46c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a45a:	4b08      	ldr	r3, [pc, #32]	; (800a47c <USBD_CDC_Init+0x1e8>)
 800a45c:	7819      	ldrb	r1, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a464:	2340      	movs	r3, #64	; 0x40
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f004 fed6 	bl	800f218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	200000a3 	.word	0x200000a3
 800a47c:	200000a4 	.word	0x200000a4
 800a480:	200000a5 	.word	0x200000a5

0800a484 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a490:	4b3a      	ldr	r3, [pc, #232]	; (800a57c <USBD_CDC_DeInit+0xf8>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f004 fdf5 	bl	800f086 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a49c:	4b37      	ldr	r3, [pc, #220]	; (800a57c <USBD_CDC_DeInit+0xf8>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	f003 020f 	and.w	r2, r3, #15
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	3324      	adds	r3, #36	; 0x24
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a4b6:	4b32      	ldr	r3, [pc, #200]	; (800a580 <USBD_CDC_DeInit+0xfc>)
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f004 fde2 	bl	800f086 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a4c2:	4b2f      	ldr	r3, [pc, #188]	; (800a580 <USBD_CDC_DeInit+0xfc>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	f003 020f 	and.w	r2, r3, #15
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	440b      	add	r3, r1
 800a4d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a4da:	2200      	movs	r2, #0
 800a4dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a4de:	4b29      	ldr	r3, [pc, #164]	; (800a584 <USBD_CDC_DeInit+0x100>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f004 fdce 	bl	800f086 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a4ea:	4b26      	ldr	r3, [pc, #152]	; (800a584 <USBD_CDC_DeInit+0x100>)
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	f003 020f 	and.w	r2, r3, #15
 800a4f2:	6879      	ldr	r1, [r7, #4]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	440b      	add	r3, r1
 800a4fe:	3324      	adds	r3, #36	; 0x24
 800a500:	2200      	movs	r2, #0
 800a502:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a504:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <USBD_CDC_DeInit+0x100>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	f003 020f 	and.w	r2, r3, #15
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4613      	mov	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	440b      	add	r3, r1
 800a518:	3326      	adds	r3, #38	; 0x26
 800a51a:	2200      	movs	r2, #0
 800a51c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	32b0      	adds	r2, #176	; 0xb0
 800a528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d01f      	beq.n	800a570 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	33b0      	adds	r3, #176	; 0xb0
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	32b0      	adds	r2, #176	; 0xb0
 800a54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a552:	4618      	mov	r0, r3
 800a554:	f004 fea2 	bl	800f29c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	32b0      	adds	r2, #176	; 0xb0
 800a562:	2100      	movs	r1, #0
 800a564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	200000a3 	.word	0x200000a3
 800a580:	200000a4 	.word	0x200000a4
 800a584:	200000a5 	.word	0x200000a5

0800a588 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	32b0      	adds	r2, #176	; 0xb0
 800a59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d101      	bne.n	800a5b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e0bf      	b.n	800a738 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d050      	beq.n	800a666 <USBD_CDC_Setup+0xde>
 800a5c4:	2b20      	cmp	r3, #32
 800a5c6:	f040 80af 	bne.w	800a728 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	88db      	ldrh	r3, [r3, #6]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d03a      	beq.n	800a648 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	b25b      	sxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	da1b      	bge.n	800a614 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	33b0      	adds	r3, #176	; 0xb0
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a5f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	88d2      	ldrh	r2, [r2, #6]
 800a5f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	88db      	ldrh	r3, [r3, #6]
 800a5fe:	2b07      	cmp	r3, #7
 800a600:	bf28      	it	cs
 800a602:	2307      	movcs	r3, #7
 800a604:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	89fa      	ldrh	r2, [r7, #14]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f001 fd43 	bl	800c098 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a612:	e090      	b.n	800a736 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	785a      	ldrb	r2, [r3, #1]
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	88db      	ldrh	r3, [r3, #6]
 800a622:	2b3f      	cmp	r3, #63	; 0x3f
 800a624:	d803      	bhi.n	800a62e <USBD_CDC_Setup+0xa6>
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	88db      	ldrh	r3, [r3, #6]
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	e000      	b.n	800a630 <USBD_CDC_Setup+0xa8>
 800a62e:	2240      	movs	r2, #64	; 0x40
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a636:	6939      	ldr	r1, [r7, #16]
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a63e:	461a      	mov	r2, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f001 fd55 	bl	800c0f0 <USBD_CtlPrepareRx>
      break;
 800a646:	e076      	b.n	800a736 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	33b0      	adds	r3, #176	; 0xb0
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	7850      	ldrb	r0, [r2, #1]
 800a65e:	2200      	movs	r2, #0
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	4798      	blx	r3
      break;
 800a664:	e067      	b.n	800a736 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	785b      	ldrb	r3, [r3, #1]
 800a66a:	2b0b      	cmp	r3, #11
 800a66c:	d851      	bhi.n	800a712 <USBD_CDC_Setup+0x18a>
 800a66e:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <USBD_CDC_Setup+0xec>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a6a5 	.word	0x0800a6a5
 800a678:	0800a721 	.word	0x0800a721
 800a67c:	0800a713 	.word	0x0800a713
 800a680:	0800a713 	.word	0x0800a713
 800a684:	0800a713 	.word	0x0800a713
 800a688:	0800a713 	.word	0x0800a713
 800a68c:	0800a713 	.word	0x0800a713
 800a690:	0800a713 	.word	0x0800a713
 800a694:	0800a713 	.word	0x0800a713
 800a698:	0800a713 	.word	0x0800a713
 800a69c:	0800a6cf 	.word	0x0800a6cf
 800a6a0:	0800a6f9 	.word	0x0800a6f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	d107      	bne.n	800a6c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6b0:	f107 030a 	add.w	r3, r7, #10
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 fced 	bl	800c098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6be:	e032      	b.n	800a726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 fc77 	bl	800bfb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	75fb      	strb	r3, [r7, #23]
          break;
 800a6cc:	e02b      	b.n	800a726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d107      	bne.n	800a6ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a6da:	f107 030d 	add.w	r3, r7, #13
 800a6de:	2201      	movs	r2, #1
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f001 fcd8 	bl	800c098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6e8:	e01d      	b.n	800a726 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f001 fc62 	bl	800bfb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	75fb      	strb	r3, [r7, #23]
          break;
 800a6f6:	e016      	b.n	800a726 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b03      	cmp	r3, #3
 800a702:	d00f      	beq.n	800a724 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f001 fc55 	bl	800bfb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a70c:	2303      	movs	r3, #3
 800a70e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a710:	e008      	b.n	800a724 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f001 fc4e 	bl	800bfb6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a71a:	2303      	movs	r3, #3
 800a71c:	75fb      	strb	r3, [r7, #23]
          break;
 800a71e:	e002      	b.n	800a726 <USBD_CDC_Setup+0x19e>
          break;
 800a720:	bf00      	nop
 800a722:	e008      	b.n	800a736 <USBD_CDC_Setup+0x1ae>
          break;
 800a724:	bf00      	nop
      }
      break;
 800a726:	e006      	b.n	800a736 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f001 fc43 	bl	800bfb6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a730:	2303      	movs	r3, #3
 800a732:	75fb      	strb	r3, [r7, #23]
      break;
 800a734:	bf00      	nop
  }

  return (uint8_t)ret;
 800a736:	7dfb      	ldrb	r3, [r7, #23]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a752:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	32b0      	adds	r2, #176	; 0xb0
 800a75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a766:	2303      	movs	r3, #3
 800a768:	e065      	b.n	800a836 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	32b0      	adds	r2, #176	; 0xb0
 800a774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a778:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	f003 020f 	and.w	r2, r3, #15
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	4613      	mov	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	440b      	add	r3, r1
 800a78c:	3318      	adds	r3, #24
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d02f      	beq.n	800a7f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	f003 020f 	and.w	r2, r3, #15
 800a79a:	6879      	ldr	r1, [r7, #4]
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	440b      	add	r3, r1
 800a7a6:	3318      	adds	r3, #24
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	78fb      	ldrb	r3, [r7, #3]
 800a7ac:	f003 010f 	and.w	r1, r3, #15
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	440b      	add	r3, r1
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4403      	add	r3, r0
 800a7bc:	3348      	adds	r3, #72	; 0x48
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a7c4:	fb01 f303 	mul.w	r3, r1, r3
 800a7c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d112      	bne.n	800a7f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	f003 020f 	and.w	r2, r3, #15
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	440b      	add	r3, r1
 800a7e0:	3318      	adds	r3, #24
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a7e6:	78f9      	ldrb	r1, [r7, #3]
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f004 fcf2 	bl	800f1d6 <USBD_LL_Transmit>
 800a7f2:	e01f      	b.n	800a834 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	33b0      	adds	r3, #176	; 0xb0
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d010      	beq.n	800a834 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	33b0      	adds	r3, #176	; 0xb0
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4413      	add	r3, r2
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	460b      	mov	r3, r1
 800a848:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	32b0      	adds	r2, #176	; 0xb0
 800a854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a858:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	32b0      	adds	r2, #176	; 0xb0
 800a864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e01a      	b.n	800a8a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	4619      	mov	r1, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f004 fcf0 	bl	800f25a <USBD_LL_GetRxDataSize>
 800a87a:	4602      	mov	r2, r0
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	33b0      	adds	r3, #176	; 0xb0
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4413      	add	r3, r2
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	32b0      	adds	r2, #176	; 0xb0
 800a8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e025      	b.n	800a91c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	33b0      	adds	r3, #176	; 0xb0
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d01a      	beq.n	800a91a <USBD_CDC_EP0_RxReady+0x6c>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a8ea:	2bff      	cmp	r3, #255	; 0xff
 800a8ec:	d015      	beq.n	800a91a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	33b0      	adds	r3, #176	; 0xb0
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a906:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a90e:	b292      	uxth	r2, r2
 800a910:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	22ff      	movs	r2, #255	; 0xff
 800a916:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a92c:	2182      	movs	r1, #130	; 0x82
 800a92e:	4818      	ldr	r0, [pc, #96]	; (800a990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a930:	f000 fd09 	bl	800b346 <USBD_GetEpDesc>
 800a934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a936:	2101      	movs	r1, #1
 800a938:	4815      	ldr	r0, [pc, #84]	; (800a990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a93a:	f000 fd04 	bl	800b346 <USBD_GetEpDesc>
 800a93e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a940:	2181      	movs	r1, #129	; 0x81
 800a942:	4813      	ldr	r0, [pc, #76]	; (800a990 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a944:	f000 fcff 	bl	800b346 <USBD_GetEpDesc>
 800a948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	2210      	movs	r2, #16
 800a954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d006      	beq.n	800a96a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	2200      	movs	r2, #0
 800a960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a964:	711a      	strb	r2, [r3, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d006      	beq.n	800a97e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a978:	711a      	strb	r2, [r3, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2243      	movs	r2, #67	; 0x43
 800a982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a984:	4b02      	ldr	r3, [pc, #8]	; (800a990 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20000060 	.word	0x20000060

0800a994 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a99c:	2182      	movs	r1, #130	; 0x82
 800a99e:	4818      	ldr	r0, [pc, #96]	; (800aa00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9a0:	f000 fcd1 	bl	800b346 <USBD_GetEpDesc>
 800a9a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	4815      	ldr	r0, [pc, #84]	; (800aa00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9aa:	f000 fccc 	bl	800b346 <USBD_GetEpDesc>
 800a9ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9b0:	2181      	movs	r1, #129	; 0x81
 800a9b2:	4813      	ldr	r0, [pc, #76]	; (800aa00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9b4:	f000 fcc7 	bl	800b346 <USBD_GetEpDesc>
 800a9b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d002      	beq.n	800a9c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2210      	movs	r2, #16
 800a9c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d006      	beq.n	800a9da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	711a      	strb	r2, [r3, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f042 0202 	orr.w	r2, r2, #2
 800a9d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d006      	beq.n	800a9ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	711a      	strb	r2, [r3, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f042 0202 	orr.w	r2, r2, #2
 800a9ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2243      	movs	r2, #67	; 0x43
 800a9f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9f4:	4b02      	ldr	r3, [pc, #8]	; (800aa00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000060 	.word	0x20000060

0800aa04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa0c:	2182      	movs	r1, #130	; 0x82
 800aa0e:	4818      	ldr	r0, [pc, #96]	; (800aa70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa10:	f000 fc99 	bl	800b346 <USBD_GetEpDesc>
 800aa14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa16:	2101      	movs	r1, #1
 800aa18:	4815      	ldr	r0, [pc, #84]	; (800aa70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa1a:	f000 fc94 	bl	800b346 <USBD_GetEpDesc>
 800aa1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa20:	2181      	movs	r1, #129	; 0x81
 800aa22:	4813      	ldr	r0, [pc, #76]	; (800aa70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa24:	f000 fc8f 	bl	800b346 <USBD_GetEpDesc>
 800aa28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	2210      	movs	r2, #16
 800aa34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d006      	beq.n	800aa4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa44:	711a      	strb	r2, [r3, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d006      	beq.n	800aa5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa58:	711a      	strb	r2, [r3, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2243      	movs	r2, #67	; 0x43
 800aa62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa64:	4b02      	ldr	r3, [pc, #8]	; (800aa70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20000060 	.word	0x20000060

0800aa74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	220a      	movs	r2, #10
 800aa80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa82:	4b03      	ldr	r3, [pc, #12]	; (800aa90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	2000001c 	.word	0x2000001c

0800aa94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e009      	b.n	800aabc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	33b0      	adds	r3, #176	; 0xb0
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	32b0      	adds	r2, #176	; 0xb0
 800aade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e008      	b.n	800ab00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	371c      	adds	r7, #28
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	32b0      	adds	r2, #176	; 0xb0
 800ab20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e004      	b.n	800ab3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
	...

0800ab48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	32b0      	adds	r2, #176	; 0xb0
 800ab5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	32b0      	adds	r2, #176	; 0xb0
 800ab6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e018      	b.n	800aba8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	7c1b      	ldrb	r3, [r3, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10a      	bne.n	800ab94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab7e:	4b0c      	ldr	r3, [pc, #48]	; (800abb0 <USBD_CDC_ReceivePacket+0x68>)
 800ab80:	7819      	ldrb	r1, [r3, #0]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f004 fb43 	bl	800f218 <USBD_LL_PrepareReceive>
 800ab92:	e008      	b.n	800aba6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab94:	4b06      	ldr	r3, [pc, #24]	; (800abb0 <USBD_CDC_ReceivePacket+0x68>)
 800ab96:	7819      	ldrb	r1, [r3, #0]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab9e:	2340      	movs	r3, #64	; 0x40
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f004 fb39 	bl	800f218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	200000a4 	.word	0x200000a4

0800abb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4613      	mov	r3, r2
 800abc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800abc8:	2303      	movs	r3, #3
 800abca:	e01f      	b.n	800ac0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d003      	beq.n	800abf2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	79fa      	ldrb	r2, [r7, #7]
 800abfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f004 f9ad 	bl	800ef60 <USBD_LL_Init>
 800ac06:	4603      	mov	r3, r0
 800ac08:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e025      	b.n	800ac78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	32ae      	adds	r2, #174	; 0xae
 800ac3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00f      	beq.n	800ac68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	32ae      	adds	r2, #174	; 0xae
 800ac52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	f107 020e 	add.w	r2, r7, #14
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4798      	blx	r3
 800ac60:	4602      	mov	r2, r0
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f004 f9bb 	bl	800f004 <USBD_LL_Start>
 800ac8e:	4603      	mov	r3, r0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aca0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	460b      	mov	r3, r1
 800acb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d009      	beq.n	800acdc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	78fa      	ldrb	r2, [r7, #3]
 800acd2:	4611      	mov	r1, r2
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	4798      	blx	r3
 800acd8:	4603      	mov	r3, r0
 800acda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	460b      	mov	r3, r1
 800acf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	78fa      	ldrb	r2, [r7, #3]
 800ad00:	4611      	mov	r1, r2
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	4798      	blx	r3
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f001 f908 	bl	800bf42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ad40:	461a      	mov	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad4e:	f003 031f 	and.w	r3, r3, #31
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d01a      	beq.n	800ad8c <USBD_LL_SetupStage+0x72>
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d822      	bhi.n	800ada0 <USBD_LL_SetupStage+0x86>
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <USBD_LL_SetupStage+0x4a>
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d00a      	beq.n	800ad78 <USBD_LL_SetupStage+0x5e>
 800ad62:	e01d      	b.n	800ada0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fb5f 	bl	800b430 <USBD_StdDevReq>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73fb      	strb	r3, [r7, #15]
      break;
 800ad76:	e020      	b.n	800adba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fbc7 	bl	800b514 <USBD_StdItfReq>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73fb      	strb	r3, [r7, #15]
      break;
 800ad8a:	e016      	b.n	800adba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad92:	4619      	mov	r1, r3
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fc29 	bl	800b5ec <USBD_StdEPReq>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad9e:	e00c      	b.n	800adba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ada6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f004 f988 	bl	800f0c4 <USBD_LL_StallEP>
 800adb4:	4603      	mov	r3, r0
 800adb6:	73fb      	strb	r3, [r7, #15]
      break;
 800adb8:	bf00      	nop
  }

  return ret;
 800adba:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	460b      	mov	r3, r1
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800add6:	7afb      	ldrb	r3, [r7, #11]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d16e      	bne.n	800aeba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ade2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adea:	2b03      	cmp	r3, #3
 800adec:	f040 8098 	bne.w	800af20 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	689a      	ldr	r2, [r3, #8]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d913      	bls.n	800ae24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	689a      	ldr	r2, [r3, #8]
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	1ad2      	subs	r2, r2, r3
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	68da      	ldr	r2, [r3, #12]
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	bf28      	it	cs
 800ae16:	4613      	movcs	r3, r2
 800ae18:	461a      	mov	r2, r3
 800ae1a:	6879      	ldr	r1, [r7, #4]
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f001 f984 	bl	800c12a <USBD_CtlContinueRx>
 800ae22:	e07d      	b.n	800af20 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae2a:	f003 031f 	and.w	r3, r3, #31
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d014      	beq.n	800ae5c <USBD_LL_DataOutStage+0x98>
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d81d      	bhi.n	800ae72 <USBD_LL_DataOutStage+0xae>
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d002      	beq.n	800ae40 <USBD_LL_DataOutStage+0x7c>
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d003      	beq.n	800ae46 <USBD_LL_DataOutStage+0x82>
 800ae3e:	e018      	b.n	800ae72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	75bb      	strb	r3, [r7, #22]
            break;
 800ae44:	e018      	b.n	800ae78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	4619      	mov	r1, r3
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 fa5e 	bl	800b312 <USBD_CoreFindIF>
 800ae56:	4603      	mov	r3, r0
 800ae58:	75bb      	strb	r3, [r7, #22]
            break;
 800ae5a:	e00d      	b.n	800ae78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	4619      	mov	r1, r3
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 fa60 	bl	800b32c <USBD_CoreFindEP>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	75bb      	strb	r3, [r7, #22]
            break;
 800ae70:	e002      	b.n	800ae78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75bb      	strb	r3, [r7, #22]
            break;
 800ae76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ae78:	7dbb      	ldrb	r3, [r7, #22]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d119      	bne.n	800aeb2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d113      	bne.n	800aeb2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ae8a:	7dba      	ldrb	r2, [r7, #22]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	32ae      	adds	r2, #174	; 0xae
 800ae90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00b      	beq.n	800aeb2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ae9a:	7dba      	ldrb	r2, [r7, #22]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aea2:	7dba      	ldrb	r2, [r7, #22]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	32ae      	adds	r2, #174	; 0xae
 800aea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f001 f94a 	bl	800c14c <USBD_CtlSendStatus>
 800aeb8:	e032      	b.n	800af20 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aeba:	7afb      	ldrb	r3, [r7, #11]
 800aebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	4619      	mov	r1, r3
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 fa31 	bl	800b32c <USBD_CoreFindEP>
 800aeca:	4603      	mov	r3, r0
 800aecc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aece:	7dbb      	ldrb	r3, [r7, #22]
 800aed0:	2bff      	cmp	r3, #255	; 0xff
 800aed2:	d025      	beq.n	800af20 <USBD_LL_DataOutStage+0x15c>
 800aed4:	7dbb      	ldrb	r3, [r7, #22]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d122      	bne.n	800af20 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b03      	cmp	r3, #3
 800aee4:	d117      	bne.n	800af16 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aee6:	7dba      	ldrb	r2, [r7, #22]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	32ae      	adds	r2, #174	; 0xae
 800aeec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00f      	beq.n	800af16 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aef6:	7dba      	ldrb	r2, [r7, #22]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aefe:	7dba      	ldrb	r2, [r7, #22]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	32ae      	adds	r2, #174	; 0xae
 800af04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	7afa      	ldrb	r2, [r7, #11]
 800af0c:	4611      	mov	r1, r2
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	4798      	blx	r3
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	e000      	b.n	800af22 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b086      	sub	sp, #24
 800af2e:	af00      	add	r7, sp, #0
 800af30:	60f8      	str	r0, [r7, #12]
 800af32:	460b      	mov	r3, r1
 800af34:	607a      	str	r2, [r7, #4]
 800af36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800af38:	7afb      	ldrb	r3, [r7, #11]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d16f      	bne.n	800b01e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3314      	adds	r3, #20
 800af42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d15a      	bne.n	800b004 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	689a      	ldr	r2, [r3, #8]
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	429a      	cmp	r2, r3
 800af58:	d914      	bls.n	800af84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	689a      	ldr	r2, [r3, #8]
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	1ad2      	subs	r2, r2, r3
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	461a      	mov	r2, r3
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f001 f8ac 	bl	800c0ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af76:	2300      	movs	r3, #0
 800af78:	2200      	movs	r2, #0
 800af7a:	2100      	movs	r1, #0
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f004 f94b 	bl	800f218 <USBD_LL_PrepareReceive>
 800af82:	e03f      	b.n	800b004 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d11c      	bne.n	800afca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800af98:	429a      	cmp	r2, r3
 800af9a:	d316      	bcc.n	800afca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d20f      	bcs.n	800afca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800afaa:	2200      	movs	r2, #0
 800afac:	2100      	movs	r1, #0
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f001 f88d 	bl	800c0ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afbc:	2300      	movs	r3, #0
 800afbe:	2200      	movs	r2, #0
 800afc0:	2100      	movs	r1, #0
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f004 f928 	bl	800f218 <USBD_LL_PrepareReceive>
 800afc8:	e01c      	b.n	800b004 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d10f      	bne.n	800aff6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d009      	beq.n	800aff6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aff6:	2180      	movs	r1, #128	; 0x80
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f004 f863 	bl	800f0c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f001 f8b7 	bl	800c172 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d03a      	beq.n	800b084 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7ff fe42 	bl	800ac98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b01c:	e032      	b.n	800b084 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b01e:	7afb      	ldrb	r3, [r7, #11]
 800b020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b024:	b2db      	uxtb	r3, r3
 800b026:	4619      	mov	r1, r3
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 f97f 	bl	800b32c <USBD_CoreFindEP>
 800b02e:	4603      	mov	r3, r0
 800b030:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b032:	7dfb      	ldrb	r3, [r7, #23]
 800b034:	2bff      	cmp	r3, #255	; 0xff
 800b036:	d025      	beq.n	800b084 <USBD_LL_DataInStage+0x15a>
 800b038:	7dfb      	ldrb	r3, [r7, #23]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d122      	bne.n	800b084 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b03      	cmp	r3, #3
 800b048:	d11c      	bne.n	800b084 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b04a:	7dfa      	ldrb	r2, [r7, #23]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	32ae      	adds	r2, #174	; 0xae
 800b050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d014      	beq.n	800b084 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b05a:	7dfa      	ldrb	r2, [r7, #23]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b062:	7dfa      	ldrb	r2, [r7, #23]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	32ae      	adds	r2, #174	; 0xae
 800b068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	7afa      	ldrb	r2, [r7, #11]
 800b070:	4611      	mov	r1, r2
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	4798      	blx	r3
 800b076:	4603      	mov	r3, r0
 800b078:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b07a:	7dbb      	ldrb	r3, [r7, #22]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b080:	7dbb      	ldrb	r3, [r7, #22]
 800b082:	e000      	b.n	800b086 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d014      	beq.n	800b0f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00e      	beq.n	800b0f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	6852      	ldr	r2, [r2, #4]
 800b0e2:	b2d2      	uxtb	r2, r2
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	4798      	blx	r3
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0f4:	2340      	movs	r3, #64	; 0x40
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f003 ff9d 	bl	800f03a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2240      	movs	r2, #64	; 0x40
 800b10c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b110:	2340      	movs	r3, #64	; 0x40
 800b112:	2200      	movs	r2, #0
 800b114:	2180      	movs	r1, #128	; 0x80
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f003 ff8f 	bl	800f03a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2240      	movs	r2, #64	; 0x40
 800b126:	621a      	str	r2, [r3, #32]

  return ret;
 800b128:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	460b      	mov	r3, r1
 800b13c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	78fa      	ldrb	r2, [r7, #3]
 800b142:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b160:	b2da      	uxtb	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2204      	movs	r2, #4
 800b16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d106      	bne.n	800b1a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d110      	bne.n	800b1e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00b      	beq.n	800b1e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d005      	beq.n	800b1e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	32ae      	adds	r2, #174	; 0xae
 800b204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e01c      	b.n	800b24a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b216:	b2db      	uxtb	r3, r3
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d115      	bne.n	800b248 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	32ae      	adds	r2, #174	; 0xae
 800b226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22a:	6a1b      	ldr	r3, [r3, #32]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00b      	beq.n	800b248 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	32ae      	adds	r2, #174	; 0xae
 800b23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	78fa      	ldrb	r2, [r7, #3]
 800b242:	4611      	mov	r1, r2
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	32ae      	adds	r2, #174	; 0xae
 800b268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b270:	2303      	movs	r3, #3
 800b272:	e01c      	b.n	800b2ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d115      	bne.n	800b2ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	32ae      	adds	r2, #174	; 0xae
 800b28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00b      	beq.n	800b2ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	32ae      	adds	r2, #174	; 0xae
 800b29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a4:	78fa      	ldrb	r2, [r7, #3]
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b083      	sub	sp, #12
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00e      	beq.n	800b308 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	6852      	ldr	r2, [r2, #4]
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	4798      	blx	r3
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b304:	2303      	movs	r3, #3
 800b306:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b308:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b312:	b480      	push	{r7}
 800b314:	b083      	sub	sp, #12
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	460b      	mov	r3, r1
 800b31c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b31e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b338:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	885b      	ldrh	r3, [r3, #2]
 800b362:	b29a      	uxth	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	b29b      	uxth	r3, r3
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d920      	bls.n	800b3b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	b29b      	uxth	r3, r3
 800b374:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b376:	e013      	b.n	800b3a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b378:	f107 030a 	add.w	r3, r7, #10
 800b37c:	4619      	mov	r1, r3
 800b37e:	6978      	ldr	r0, [r7, #20]
 800b380:	f000 f81b 	bl	800b3ba <USBD_GetNextDesc>
 800b384:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	785b      	ldrb	r3, [r3, #1]
 800b38a:	2b05      	cmp	r3, #5
 800b38c:	d108      	bne.n	800b3a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	789b      	ldrb	r3, [r3, #2]
 800b396:	78fa      	ldrb	r2, [r7, #3]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d008      	beq.n	800b3ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b39c:	2300      	movs	r3, #0
 800b39e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	885b      	ldrh	r3, [r3, #2]
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	897b      	ldrh	r3, [r7, #10]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d8e5      	bhi.n	800b378 <USBD_GetEpDesc+0x32>
 800b3ac:	e000      	b.n	800b3b0 <USBD_GetEpDesc+0x6a>
          break;
 800b3ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b3b0:	693b      	ldr	r3, [r7, #16]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b085      	sub	sp, #20
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	881a      	ldrh	r2, [r3, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4413      	add	r3, r2
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	3301      	adds	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b412:	8a3b      	ldrh	r3, [r7, #16]
 800b414:	021b      	lsls	r3, r3, #8
 800b416:	b21a      	sxth	r2, r3
 800b418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	b21b      	sxth	r3, r3
 800b420:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b422:	89fb      	ldrh	r3, [r7, #14]
}
 800b424:	4618      	mov	r0, r3
 800b426:	371c      	adds	r7, #28
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b446:	2b40      	cmp	r3, #64	; 0x40
 800b448:	d005      	beq.n	800b456 <USBD_StdDevReq+0x26>
 800b44a:	2b40      	cmp	r3, #64	; 0x40
 800b44c:	d857      	bhi.n	800b4fe <USBD_StdDevReq+0xce>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00f      	beq.n	800b472 <USBD_StdDevReq+0x42>
 800b452:	2b20      	cmp	r3, #32
 800b454:	d153      	bne.n	800b4fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	32ae      	adds	r2, #174	; 0xae
 800b460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	4798      	blx	r3
 800b46c:	4603      	mov	r3, r0
 800b46e:	73fb      	strb	r3, [r7, #15]
      break;
 800b470:	e04a      	b.n	800b508 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	785b      	ldrb	r3, [r3, #1]
 800b476:	2b09      	cmp	r3, #9
 800b478:	d83b      	bhi.n	800b4f2 <USBD_StdDevReq+0xc2>
 800b47a:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <USBD_StdDevReq+0x50>)
 800b47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b480:	0800b4d5 	.word	0x0800b4d5
 800b484:	0800b4e9 	.word	0x0800b4e9
 800b488:	0800b4f3 	.word	0x0800b4f3
 800b48c:	0800b4df 	.word	0x0800b4df
 800b490:	0800b4f3 	.word	0x0800b4f3
 800b494:	0800b4b3 	.word	0x0800b4b3
 800b498:	0800b4a9 	.word	0x0800b4a9
 800b49c:	0800b4f3 	.word	0x0800b4f3
 800b4a0:	0800b4cb 	.word	0x0800b4cb
 800b4a4:	0800b4bd 	.word	0x0800b4bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fa3c 	bl	800b928 <USBD_GetDescriptor>
          break;
 800b4b0:	e024      	b.n	800b4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fba1 	bl	800bbfc <USBD_SetAddress>
          break;
 800b4ba:	e01f      	b.n	800b4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fbe0 	bl	800bc84 <USBD_SetConfig>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73fb      	strb	r3, [r7, #15]
          break;
 800b4c8:	e018      	b.n	800b4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fc83 	bl	800bdd8 <USBD_GetConfig>
          break;
 800b4d2:	e013      	b.n	800b4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fcb4 	bl	800be44 <USBD_GetStatus>
          break;
 800b4dc:	e00e      	b.n	800b4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fce3 	bl	800beac <USBD_SetFeature>
          break;
 800b4e6:	e009      	b.n	800b4fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fd07 	bl	800befe <USBD_ClrFeature>
          break;
 800b4f0:	e004      	b.n	800b4fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fd5e 	bl	800bfb6 <USBD_CtlError>
          break;
 800b4fa:	bf00      	nop
      }
      break;
 800b4fc:	e004      	b.n	800b508 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b4fe:	6839      	ldr	r1, [r7, #0]
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 fd58 	bl	800bfb6 <USBD_CtlError>
      break;
 800b506:	bf00      	nop
  }

  return ret;
 800b508:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop

0800b514 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b52a:	2b40      	cmp	r3, #64	; 0x40
 800b52c:	d005      	beq.n	800b53a <USBD_StdItfReq+0x26>
 800b52e:	2b40      	cmp	r3, #64	; 0x40
 800b530:	d852      	bhi.n	800b5d8 <USBD_StdItfReq+0xc4>
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <USBD_StdItfReq+0x26>
 800b536:	2b20      	cmp	r3, #32
 800b538:	d14e      	bne.n	800b5d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b540:	b2db      	uxtb	r3, r3
 800b542:	3b01      	subs	r3, #1
 800b544:	2b02      	cmp	r3, #2
 800b546:	d840      	bhi.n	800b5ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	889b      	ldrh	r3, [r3, #4]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d836      	bhi.n	800b5c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	889b      	ldrh	r3, [r3, #4]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7ff fed9 	bl	800b312 <USBD_CoreFindIF>
 800b560:	4603      	mov	r3, r0
 800b562:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	2bff      	cmp	r3, #255	; 0xff
 800b568:	d01d      	beq.n	800b5a6 <USBD_StdItfReq+0x92>
 800b56a:	7bbb      	ldrb	r3, [r7, #14]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d11a      	bne.n	800b5a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b570:	7bba      	ldrb	r2, [r7, #14]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	32ae      	adds	r2, #174	; 0xae
 800b576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00f      	beq.n	800b5a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b580:	7bba      	ldrb	r2, [r7, #14]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b588:	7bba      	ldrb	r2, [r7, #14]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	32ae      	adds	r2, #174	; 0xae
 800b58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	4798      	blx	r3
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b59e:	e004      	b.n	800b5aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5a4:	e001      	b.n	800b5aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	88db      	ldrh	r3, [r3, #6]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d110      	bne.n	800b5d4 <USBD_StdItfReq+0xc0>
 800b5b2:	7bfb      	ldrb	r3, [r7, #15]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10d      	bne.n	800b5d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fdc7 	bl	800c14c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b5be:	e009      	b.n	800b5d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b5c0:	6839      	ldr	r1, [r7, #0]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 fcf7 	bl	800bfb6 <USBD_CtlError>
          break;
 800b5c8:	e004      	b.n	800b5d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fcf2 	bl	800bfb6 <USBD_CtlError>
          break;
 800b5d2:	e000      	b.n	800b5d6 <USBD_StdItfReq+0xc2>
          break;
 800b5d4:	bf00      	nop
      }
      break;
 800b5d6:	e004      	b.n	800b5e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fceb 	bl	800bfb6 <USBD_CtlError>
      break;
 800b5e0:	bf00      	nop
  }

  return ret;
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	889b      	ldrh	r3, [r3, #4]
 800b5fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b608:	2b40      	cmp	r3, #64	; 0x40
 800b60a:	d007      	beq.n	800b61c <USBD_StdEPReq+0x30>
 800b60c:	2b40      	cmp	r3, #64	; 0x40
 800b60e:	f200 817f 	bhi.w	800b910 <USBD_StdEPReq+0x324>
 800b612:	2b00      	cmp	r3, #0
 800b614:	d02a      	beq.n	800b66c <USBD_StdEPReq+0x80>
 800b616:	2b20      	cmp	r3, #32
 800b618:	f040 817a 	bne.w	800b910 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b61c:	7bbb      	ldrb	r3, [r7, #14]
 800b61e:	4619      	mov	r1, r3
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff fe83 	bl	800b32c <USBD_CoreFindEP>
 800b626:	4603      	mov	r3, r0
 800b628:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b62a:	7b7b      	ldrb	r3, [r7, #13]
 800b62c:	2bff      	cmp	r3, #255	; 0xff
 800b62e:	f000 8174 	beq.w	800b91a <USBD_StdEPReq+0x32e>
 800b632:	7b7b      	ldrb	r3, [r7, #13]
 800b634:	2b00      	cmp	r3, #0
 800b636:	f040 8170 	bne.w	800b91a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b63a:	7b7a      	ldrb	r2, [r7, #13]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b642:	7b7a      	ldrb	r2, [r7, #13]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	32ae      	adds	r2, #174	; 0xae
 800b648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 8163 	beq.w	800b91a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b654:	7b7a      	ldrb	r2, [r7, #13]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	32ae      	adds	r2, #174	; 0xae
 800b65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	4798      	blx	r3
 800b666:	4603      	mov	r3, r0
 800b668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b66a:	e156      	b.n	800b91a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	785b      	ldrb	r3, [r3, #1]
 800b670:	2b03      	cmp	r3, #3
 800b672:	d008      	beq.n	800b686 <USBD_StdEPReq+0x9a>
 800b674:	2b03      	cmp	r3, #3
 800b676:	f300 8145 	bgt.w	800b904 <USBD_StdEPReq+0x318>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f000 809b 	beq.w	800b7b6 <USBD_StdEPReq+0x1ca>
 800b680:	2b01      	cmp	r3, #1
 800b682:	d03c      	beq.n	800b6fe <USBD_StdEPReq+0x112>
 800b684:	e13e      	b.n	800b904 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d002      	beq.n	800b698 <USBD_StdEPReq+0xac>
 800b692:	2b03      	cmp	r3, #3
 800b694:	d016      	beq.n	800b6c4 <USBD_StdEPReq+0xd8>
 800b696:	e02c      	b.n	800b6f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b698:	7bbb      	ldrb	r3, [r7, #14]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00d      	beq.n	800b6ba <USBD_StdEPReq+0xce>
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
 800b6a0:	2b80      	cmp	r3, #128	; 0x80
 800b6a2:	d00a      	beq.n	800b6ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6a4:	7bbb      	ldrb	r3, [r7, #14]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f003 fd0b 	bl	800f0c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6ae:	2180      	movs	r1, #128	; 0x80
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f003 fd07 	bl	800f0c4 <USBD_LL_StallEP>
 800b6b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b6b8:	e020      	b.n	800b6fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fc7a 	bl	800bfb6 <USBD_CtlError>
              break;
 800b6c2:	e01b      	b.n	800b6fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	885b      	ldrh	r3, [r3, #2]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10e      	bne.n	800b6ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b6cc:	7bbb      	ldrb	r3, [r7, #14]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00b      	beq.n	800b6ea <USBD_StdEPReq+0xfe>
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	2b80      	cmp	r3, #128	; 0x80
 800b6d6:	d008      	beq.n	800b6ea <USBD_StdEPReq+0xfe>
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	88db      	ldrh	r3, [r3, #6]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d104      	bne.n	800b6ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f003 fced 	bl	800f0c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fd2e 	bl	800c14c <USBD_CtlSendStatus>

              break;
 800b6f0:	e004      	b.n	800b6fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fc5e 	bl	800bfb6 <USBD_CtlError>
              break;
 800b6fa:	bf00      	nop
          }
          break;
 800b6fc:	e107      	b.n	800b90e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b02      	cmp	r3, #2
 800b708:	d002      	beq.n	800b710 <USBD_StdEPReq+0x124>
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	d016      	beq.n	800b73c <USBD_StdEPReq+0x150>
 800b70e:	e04b      	b.n	800b7a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00d      	beq.n	800b732 <USBD_StdEPReq+0x146>
 800b716:	7bbb      	ldrb	r3, [r7, #14]
 800b718:	2b80      	cmp	r3, #128	; 0x80
 800b71a:	d00a      	beq.n	800b732 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f003 fccf 	bl	800f0c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b726:	2180      	movs	r1, #128	; 0x80
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f003 fccb 	bl	800f0c4 <USBD_LL_StallEP>
 800b72e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b730:	e040      	b.n	800b7b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fc3e 	bl	800bfb6 <USBD_CtlError>
              break;
 800b73a:	e03b      	b.n	800b7b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	885b      	ldrh	r3, [r3, #2]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d136      	bne.n	800b7b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d004      	beq.n	800b758 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b74e:	7bbb      	ldrb	r3, [r7, #14]
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f003 fcd5 	bl	800f102 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 fcf7 	bl	800c14c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b75e:	7bbb      	ldrb	r3, [r7, #14]
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7ff fde2 	bl	800b32c <USBD_CoreFindEP>
 800b768:	4603      	mov	r3, r0
 800b76a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b76c:	7b7b      	ldrb	r3, [r7, #13]
 800b76e:	2bff      	cmp	r3, #255	; 0xff
 800b770:	d01f      	beq.n	800b7b2 <USBD_StdEPReq+0x1c6>
 800b772:	7b7b      	ldrb	r3, [r7, #13]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d11c      	bne.n	800b7b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b778:	7b7a      	ldrb	r2, [r7, #13]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b780:	7b7a      	ldrb	r2, [r7, #13]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	32ae      	adds	r2, #174	; 0xae
 800b786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d010      	beq.n	800b7b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b790:	7b7a      	ldrb	r2, [r7, #13]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	32ae      	adds	r2, #174	; 0xae
 800b796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	4798      	blx	r3
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b7a6:	e004      	b.n	800b7b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b7a8:	6839      	ldr	r1, [r7, #0]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fc03 	bl	800bfb6 <USBD_CtlError>
              break;
 800b7b0:	e000      	b.n	800b7b4 <USBD_StdEPReq+0x1c8>
              break;
 800b7b2:	bf00      	nop
          }
          break;
 800b7b4:	e0ab      	b.n	800b90e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	d002      	beq.n	800b7c8 <USBD_StdEPReq+0x1dc>
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d032      	beq.n	800b82c <USBD_StdEPReq+0x240>
 800b7c6:	e097      	b.n	800b8f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7c8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d007      	beq.n	800b7de <USBD_StdEPReq+0x1f2>
 800b7ce:	7bbb      	ldrb	r3, [r7, #14]
 800b7d0:	2b80      	cmp	r3, #128	; 0x80
 800b7d2:	d004      	beq.n	800b7de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fbed 	bl	800bfb6 <USBD_CtlError>
                break;
 800b7dc:	e091      	b.n	800b902 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	da0b      	bge.n	800b7fe <USBD_StdEPReq+0x212>
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
 800b7e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	3310      	adds	r3, #16
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	e00b      	b.n	800b816 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7fe:	7bbb      	ldrb	r3, [r7, #14]
 800b800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b804:	4613      	mov	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	4413      	add	r3, r2
 800b814:	3304      	adds	r3, #4
 800b816:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	2202      	movs	r2, #2
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fc37 	bl	800c098 <USBD_CtlSendData>
              break;
 800b82a:	e06a      	b.n	800b902 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b82c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b830:	2b00      	cmp	r3, #0
 800b832:	da11      	bge.n	800b858 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b834:	7bbb      	ldrb	r3, [r7, #14]
 800b836:	f003 020f 	and.w	r2, r3, #15
 800b83a:	6879      	ldr	r1, [r7, #4]
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	440b      	add	r3, r1
 800b846:	3324      	adds	r3, #36	; 0x24
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d117      	bne.n	800b87e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b84e:	6839      	ldr	r1, [r7, #0]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fbb0 	bl	800bfb6 <USBD_CtlError>
                  break;
 800b856:	e054      	b.n	800b902 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	f003 020f 	and.w	r2, r3, #15
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	4613      	mov	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	440b      	add	r3, r1
 800b86a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b86e:	881b      	ldrh	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d104      	bne.n	800b87e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b874:	6839      	ldr	r1, [r7, #0]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fb9d 	bl	800bfb6 <USBD_CtlError>
                  break;
 800b87c:	e041      	b.n	800b902 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b87e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b882:	2b00      	cmp	r3, #0
 800b884:	da0b      	bge.n	800b89e <USBD_StdEPReq+0x2b2>
 800b886:	7bbb      	ldrb	r3, [r7, #14]
 800b888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b88c:	4613      	mov	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4413      	add	r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	3310      	adds	r3, #16
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	4413      	add	r3, r2
 800b89a:	3304      	adds	r3, #4
 800b89c:	e00b      	b.n	800b8b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b89e:	7bbb      	ldrb	r3, [r7, #14]
 800b8a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <USBD_StdEPReq+0x2d8>
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	2b80      	cmp	r3, #128	; 0x80
 800b8c2:	d103      	bne.n	800b8cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	e00e      	b.n	800b8ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b8cc:	7bbb      	ldrb	r3, [r7, #14]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f003 fc35 	bl	800f140 <USBD_LL_IsStallEP>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d003      	beq.n	800b8e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	601a      	str	r2, [r3, #0]
 800b8e2:	e002      	b.n	800b8ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	2202      	movs	r2, #2
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fbd1 	bl	800c098 <USBD_CtlSendData>
              break;
 800b8f6:	e004      	b.n	800b902 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fb5b 	bl	800bfb6 <USBD_CtlError>
              break;
 800b900:	bf00      	nop
          }
          break;
 800b902:	e004      	b.n	800b90e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fb55 	bl	800bfb6 <USBD_CtlError>
          break;
 800b90c:	bf00      	nop
      }
      break;
 800b90e:	e005      	b.n	800b91c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fb4f 	bl	800bfb6 <USBD_CtlError>
      break;
 800b918:	e000      	b.n	800b91c <USBD_StdEPReq+0x330>
      break;
 800b91a:	bf00      	nop
  }

  return ret;
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b932:	2300      	movs	r3, #0
 800b934:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	885b      	ldrh	r3, [r3, #2]
 800b942:	0a1b      	lsrs	r3, r3, #8
 800b944:	b29b      	uxth	r3, r3
 800b946:	3b01      	subs	r3, #1
 800b948:	2b06      	cmp	r3, #6
 800b94a:	f200 8128 	bhi.w	800bb9e <USBD_GetDescriptor+0x276>
 800b94e:	a201      	add	r2, pc, #4	; (adr r2, 800b954 <USBD_GetDescriptor+0x2c>)
 800b950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b954:	0800b971 	.word	0x0800b971
 800b958:	0800b989 	.word	0x0800b989
 800b95c:	0800b9c9 	.word	0x0800b9c9
 800b960:	0800bb9f 	.word	0x0800bb9f
 800b964:	0800bb9f 	.word	0x0800bb9f
 800b968:	0800bb3f 	.word	0x0800bb3f
 800b96c:	0800bb6b 	.word	0x0800bb6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	7c12      	ldrb	r2, [r2, #16]
 800b97c:	f107 0108 	add.w	r1, r7, #8
 800b980:	4610      	mov	r0, r2
 800b982:	4798      	blx	r3
 800b984:	60f8      	str	r0, [r7, #12]
      break;
 800b986:	e112      	b.n	800bbae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	7c1b      	ldrb	r3, [r3, #16]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10d      	bne.n	800b9ac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b998:	f107 0208 	add.w	r2, r7, #8
 800b99c:	4610      	mov	r0, r2
 800b99e:	4798      	blx	r3
 800b9a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b9aa:	e100      	b.n	800bbae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b4:	f107 0208 	add.w	r2, r7, #8
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	4798      	blx	r3
 800b9bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	701a      	strb	r2, [r3, #0]
      break;
 800b9c6:	e0f2      	b.n	800bbae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	885b      	ldrh	r3, [r3, #2]
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b05      	cmp	r3, #5
 800b9d0:	f200 80ac 	bhi.w	800bb2c <USBD_GetDescriptor+0x204>
 800b9d4:	a201      	add	r2, pc, #4	; (adr r2, 800b9dc <USBD_GetDescriptor+0xb4>)
 800b9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9da:	bf00      	nop
 800b9dc:	0800b9f5 	.word	0x0800b9f5
 800b9e0:	0800ba29 	.word	0x0800ba29
 800b9e4:	0800ba5d 	.word	0x0800ba5d
 800b9e8:	0800ba91 	.word	0x0800ba91
 800b9ec:	0800bac5 	.word	0x0800bac5
 800b9f0:	0800baf9 	.word	0x0800baf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00b      	beq.n	800ba18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	7c12      	ldrb	r2, [r2, #16]
 800ba0c:	f107 0108 	add.w	r1, r7, #8
 800ba10:	4610      	mov	r0, r2
 800ba12:	4798      	blx	r3
 800ba14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba16:	e091      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 facb 	bl	800bfb6 <USBD_CtlError>
            err++;
 800ba20:	7afb      	ldrb	r3, [r7, #11]
 800ba22:	3301      	adds	r3, #1
 800ba24:	72fb      	strb	r3, [r7, #11]
          break;
 800ba26:	e089      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00b      	beq.n	800ba4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	7c12      	ldrb	r2, [r2, #16]
 800ba40:	f107 0108 	add.w	r1, r7, #8
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba4a:	e077      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fab1 	bl	800bfb6 <USBD_CtlError>
            err++;
 800ba54:	7afb      	ldrb	r3, [r7, #11]
 800ba56:	3301      	adds	r3, #1
 800ba58:	72fb      	strb	r3, [r7, #11]
          break;
 800ba5a:	e06f      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00b      	beq.n	800ba80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	7c12      	ldrb	r2, [r2, #16]
 800ba74:	f107 0108 	add.w	r1, r7, #8
 800ba78:	4610      	mov	r0, r2
 800ba7a:	4798      	blx	r3
 800ba7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba7e:	e05d      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fa97 	bl	800bfb6 <USBD_CtlError>
            err++;
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba8e:	e055      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00b      	beq.n	800bab4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	7c12      	ldrb	r2, [r2, #16]
 800baa8:	f107 0108 	add.w	r1, r7, #8
 800baac:	4610      	mov	r0, r2
 800baae:	4798      	blx	r3
 800bab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bab2:	e043      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa7d 	bl	800bfb6 <USBD_CtlError>
            err++;
 800babc:	7afb      	ldrb	r3, [r7, #11]
 800babe:	3301      	adds	r3, #1
 800bac0:	72fb      	strb	r3, [r7, #11]
          break;
 800bac2:	e03b      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00b      	beq.n	800bae8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	7c12      	ldrb	r2, [r2, #16]
 800badc:	f107 0108 	add.w	r1, r7, #8
 800bae0:	4610      	mov	r0, r2
 800bae2:	4798      	blx	r3
 800bae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bae6:	e029      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fa63 	bl	800bfb6 <USBD_CtlError>
            err++;
 800baf0:	7afb      	ldrb	r3, [r7, #11]
 800baf2:	3301      	adds	r3, #1
 800baf4:	72fb      	strb	r3, [r7, #11]
          break;
 800baf6:	e021      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00b      	beq.n	800bb1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	7c12      	ldrb	r2, [r2, #16]
 800bb10:	f107 0108 	add.w	r1, r7, #8
 800bb14:	4610      	mov	r0, r2
 800bb16:	4798      	blx	r3
 800bb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb1a:	e00f      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fa49 	bl	800bfb6 <USBD_CtlError>
            err++;
 800bb24:	7afb      	ldrb	r3, [r7, #11]
 800bb26:	3301      	adds	r3, #1
 800bb28:	72fb      	strb	r3, [r7, #11]
          break;
 800bb2a:	e007      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fa41 	bl	800bfb6 <USBD_CtlError>
          err++;
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	3301      	adds	r3, #1
 800bb38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bb3a:	bf00      	nop
      }
      break;
 800bb3c:	e037      	b.n	800bbae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7c1b      	ldrb	r3, [r3, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d109      	bne.n	800bb5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4e:	f107 0208 	add.w	r2, r7, #8
 800bb52:	4610      	mov	r0, r2
 800bb54:	4798      	blx	r3
 800bb56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb58:	e029      	b.n	800bbae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fa2a 	bl	800bfb6 <USBD_CtlError>
        err++;
 800bb62:	7afb      	ldrb	r3, [r7, #11]
 800bb64:	3301      	adds	r3, #1
 800bb66:	72fb      	strb	r3, [r7, #11]
      break;
 800bb68:	e021      	b.n	800bbae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	7c1b      	ldrb	r3, [r3, #16]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10d      	bne.n	800bb8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7a:	f107 0208 	add.w	r2, r7, #8
 800bb7e:	4610      	mov	r0, r2
 800bb80:	4798      	blx	r3
 800bb82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3301      	adds	r3, #1
 800bb88:	2207      	movs	r2, #7
 800bb8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb8c:	e00f      	b.n	800bbae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fa10 	bl	800bfb6 <USBD_CtlError>
        err++;
 800bb96:	7afb      	ldrb	r3, [r7, #11]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	72fb      	strb	r3, [r7, #11]
      break;
 800bb9c:	e007      	b.n	800bbae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fa08 	bl	800bfb6 <USBD_CtlError>
      err++;
 800bba6:	7afb      	ldrb	r3, [r7, #11]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	72fb      	strb	r3, [r7, #11]
      break;
 800bbac:	bf00      	nop
  }

  if (err != 0U)
 800bbae:	7afb      	ldrb	r3, [r7, #11]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d11e      	bne.n	800bbf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	88db      	ldrh	r3, [r3, #6]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d016      	beq.n	800bbea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bbbc:	893b      	ldrh	r3, [r7, #8]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00e      	beq.n	800bbe0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	88da      	ldrh	r2, [r3, #6]
 800bbc6:	893b      	ldrh	r3, [r7, #8]
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	bf28      	it	cs
 800bbcc:	4613      	movcs	r3, r2
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bbd2:	893b      	ldrh	r3, [r7, #8]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	68f9      	ldr	r1, [r7, #12]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fa5d 	bl	800c098 <USBD_CtlSendData>
 800bbde:	e009      	b.n	800bbf4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f9e7 	bl	800bfb6 <USBD_CtlError>
 800bbe8:	e004      	b.n	800bbf4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 faae 	bl	800c14c <USBD_CtlSendStatus>
 800bbf0:	e000      	b.n	800bbf4 <USBD_GetDescriptor+0x2cc>
    return;
 800bbf2:	bf00      	nop
  }
}
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop

0800bbfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	889b      	ldrh	r3, [r3, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d131      	bne.n	800bc72 <USBD_SetAddress+0x76>
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	88db      	ldrh	r3, [r3, #6]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d12d      	bne.n	800bc72 <USBD_SetAddress+0x76>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	885b      	ldrh	r3, [r3, #2]
 800bc1a:	2b7f      	cmp	r3, #127	; 0x7f
 800bc1c:	d829      	bhi.n	800bc72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	885b      	ldrh	r3, [r3, #2]
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d104      	bne.n	800bc40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f9bc 	bl	800bfb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc3e:	e01d      	b.n	800bc7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	7bfa      	ldrb	r2, [r7, #15]
 800bc44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f003 faa3 	bl	800f198 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fa7a 	bl	800c14c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d004      	beq.n	800bc68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2202      	movs	r2, #2
 800bc62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc66:	e009      	b.n	800bc7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc70:	e004      	b.n	800bc7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f99e 	bl	800bfb6 <USBD_CtlError>
  }
}
 800bc7a:	bf00      	nop
 800bc7c:	bf00      	nop
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	885b      	ldrh	r3, [r3, #2]
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	4b4e      	ldr	r3, [pc, #312]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bc9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bc9c:	4b4d      	ldr	r3, [pc, #308]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d905      	bls.n	800bcb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f985 	bl	800bfb6 <USBD_CtlError>
    return USBD_FAIL;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e08c      	b.n	800bdca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d002      	beq.n	800bcc2 <USBD_SetConfig+0x3e>
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d029      	beq.n	800bd14 <USBD_SetConfig+0x90>
 800bcc0:	e075      	b.n	800bdae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bcc2:	4b44      	ldr	r3, [pc, #272]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d020      	beq.n	800bd0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bcca:	4b42      	ldr	r3, [pc, #264]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bcd4:	4b3f      	ldr	r3, [pc, #252]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7fe ffe7 	bl	800acae <USBD_SetClassConfig>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d008      	beq.n	800bcfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bcea:	6839      	ldr	r1, [r7, #0]
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f962 	bl	800bfb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bcfa:	e065      	b.n	800bdc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fa25 	bl	800c14c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2203      	movs	r2, #3
 800bd06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bd0a:	e05d      	b.n	800bdc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fa1d 	bl	800c14c <USBD_CtlSendStatus>
      break;
 800bd12:	e059      	b.n	800bdc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bd14:	4b2f      	ldr	r3, [pc, #188]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d112      	bne.n	800bd42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bd24:	4b2b      	ldr	r3, [pc, #172]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd2e:	4b29      	ldr	r3, [pc, #164]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7fe ffd6 	bl	800ace6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fa06 	bl	800c14c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd40:	e042      	b.n	800bdc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bd42:	4b24      	ldr	r3, [pc, #144]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d02a      	beq.n	800bda6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7fe ffc4 	bl	800ace6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bd5e:	4b1d      	ldr	r3, [pc, #116]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd68:	4b1a      	ldr	r3, [pc, #104]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7fe ff9d 	bl	800acae <USBD_SetClassConfig>
 800bd74:	4603      	mov	r3, r0
 800bd76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00f      	beq.n	800bd9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 f918 	bl	800bfb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7fe ffa9 	bl	800ace6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2202      	movs	r2, #2
 800bd98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bd9c:	e014      	b.n	800bdc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f9d4 	bl	800c14c <USBD_CtlSendStatus>
      break;
 800bda4:	e010      	b.n	800bdc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f9d0 	bl	800c14c <USBD_CtlSendStatus>
      break;
 800bdac:	e00c      	b.n	800bdc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 f900 	bl	800bfb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdb6:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <USBD_SetConfig+0x150>)
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f7fe ff92 	bl	800ace6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc6:	bf00      	nop
  }

  return ret;
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	2000076c 	.word	0x2000076c

0800bdd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	88db      	ldrh	r3, [r3, #6]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d004      	beq.n	800bdf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bdea:	6839      	ldr	r1, [r7, #0]
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f8e2 	bl	800bfb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bdf2:	e023      	b.n	800be3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	dc02      	bgt.n	800be06 <USBD_GetConfig+0x2e>
 800be00:	2b00      	cmp	r3, #0
 800be02:	dc03      	bgt.n	800be0c <USBD_GetConfig+0x34>
 800be04:	e015      	b.n	800be32 <USBD_GetConfig+0x5a>
 800be06:	2b03      	cmp	r3, #3
 800be08:	d00b      	beq.n	800be22 <USBD_GetConfig+0x4a>
 800be0a:	e012      	b.n	800be32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	3308      	adds	r3, #8
 800be16:	2201      	movs	r2, #1
 800be18:	4619      	mov	r1, r3
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f93c 	bl	800c098 <USBD_CtlSendData>
        break;
 800be20:	e00c      	b.n	800be3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3304      	adds	r3, #4
 800be26:	2201      	movs	r2, #1
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f934 	bl	800c098 <USBD_CtlSendData>
        break;
 800be30:	e004      	b.n	800be3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f8be 	bl	800bfb6 <USBD_CtlError>
        break;
 800be3a:	bf00      	nop
}
 800be3c:	bf00      	nop
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be54:	b2db      	uxtb	r3, r3
 800be56:	3b01      	subs	r3, #1
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d81e      	bhi.n	800be9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	88db      	ldrh	r3, [r3, #6]
 800be60:	2b02      	cmp	r3, #2
 800be62:	d004      	beq.n	800be6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f8a5 	bl	800bfb6 <USBD_CtlError>
        break;
 800be6c:	e01a      	b.n	800bea4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d005      	beq.n	800be8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	f043 0202 	orr.w	r2, r3, #2
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	330c      	adds	r3, #12
 800be8e:	2202      	movs	r2, #2
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f900 	bl	800c098 <USBD_CtlSendData>
      break;
 800be98:	e004      	b.n	800bea4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f88a 	bl	800bfb6 <USBD_CtlError>
      break;
 800bea2:	bf00      	nop
  }
}
 800bea4:	bf00      	nop
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	885b      	ldrh	r3, [r3, #2]
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d107      	bne.n	800bece <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f940 	bl	800c14c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800becc:	e013      	b.n	800bef6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	885b      	ldrh	r3, [r3, #2]
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d10b      	bne.n	800beee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	889b      	ldrh	r3, [r3, #4]
 800beda:	0a1b      	lsrs	r3, r3, #8
 800bedc:	b29b      	uxth	r3, r3
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f930 	bl	800c14c <USBD_CtlSendStatus>
}
 800beec:	e003      	b.n	800bef6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 f860 	bl	800bfb6 <USBD_CtlError>
}
 800bef6:	bf00      	nop
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	3b01      	subs	r3, #1
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d80b      	bhi.n	800bf2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	885b      	ldrh	r3, [r3, #2]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d10c      	bne.n	800bf38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f910 	bl	800c14c <USBD_CtlSendStatus>
      }
      break;
 800bf2c:	e004      	b.n	800bf38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f840 	bl	800bfb6 <USBD_CtlError>
      break;
 800bf36:	e000      	b.n	800bf3a <USBD_ClrFeature+0x3c>
      break;
 800bf38:	bf00      	nop
  }
}
 800bf3a:	bf00      	nop
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b084      	sub	sp, #16
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	781a      	ldrb	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	781a      	ldrb	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f7ff fa41 	bl	800b3f4 <SWAPBYTE>
 800bf72:	4603      	mov	r3, r0
 800bf74:	461a      	mov	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	3301      	adds	r3, #1
 800bf84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f7ff fa34 	bl	800b3f4 <SWAPBYTE>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	461a      	mov	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	3301      	adds	r3, #1
 800bf98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f7ff fa27 	bl	800b3f4 <SWAPBYTE>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	80da      	strh	r2, [r3, #6]
}
 800bfae:	bf00      	nop
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b082      	sub	sp, #8
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfc0:	2180      	movs	r1, #128	; 0x80
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f003 f87e 	bl	800f0c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bfc8:	2100      	movs	r1, #0
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f003 f87a 	bl	800f0c4 <USBD_LL_StallEP>
}
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d036      	beq.n	800c05c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bff2:	6938      	ldr	r0, [r7, #16]
 800bff4:	f000 f836 	bl	800c064 <USBD_GetLen>
 800bff8:	4603      	mov	r3, r0
 800bffa:	3301      	adds	r3, #1
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	b29a      	uxth	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	4413      	add	r3, r2
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	7812      	ldrb	r2, [r2, #0]
 800c010:	701a      	strb	r2, [r3, #0]
  idx++;
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	3301      	adds	r3, #1
 800c016:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c018:	7dfb      	ldrb	r3, [r7, #23]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	4413      	add	r3, r2
 800c01e:	2203      	movs	r2, #3
 800c020:	701a      	strb	r2, [r3, #0]
  idx++;
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	3301      	adds	r3, #1
 800c026:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c028:	e013      	b.n	800c052 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c02a:	7dfb      	ldrb	r3, [r7, #23]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	4413      	add	r3, r2
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	7812      	ldrb	r2, [r2, #0]
 800c034:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	3301      	adds	r3, #1
 800c03a:	613b      	str	r3, [r7, #16]
    idx++;
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
 800c03e:	3301      	adds	r3, #1
 800c040:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	4413      	add	r3, r2
 800c048:	2200      	movs	r2, #0
 800c04a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c04c:	7dfb      	ldrb	r3, [r7, #23]
 800c04e:	3301      	adds	r3, #1
 800c050:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e7      	bne.n	800c02a <USBD_GetString+0x52>
 800c05a:	e000      	b.n	800c05e <USBD_GetString+0x86>
    return;
 800c05c:	bf00      	nop
  }
}
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c074:	e005      	b.n	800c082 <USBD_GetLen+0x1e>
  {
    len++;
 800c076:	7bfb      	ldrb	r3, [r7, #15]
 800c078:	3301      	adds	r3, #1
 800c07a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	3301      	adds	r3, #1
 800c080:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1f5      	bne.n	800c076 <USBD_GetLen+0x12>
  }

  return len;
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	2100      	movs	r1, #0
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f003 f889 	bl	800f1d6 <USBD_LL_Transmit>

  return USBD_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b084      	sub	sp, #16
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	60f8      	str	r0, [r7, #12]
 800c0d6:	60b9      	str	r1, [r7, #8]
 800c0d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	2100      	movs	r1, #0
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f003 f878 	bl	800f1d6 <USBD_LL_Transmit>

  return USBD_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2203      	movs	r2, #3
 800c100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	2100      	movs	r1, #0
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f003 f87c 	bl	800f218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	60f8      	str	r0, [r7, #12]
 800c132:	60b9      	str	r1, [r7, #8]
 800c134:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	2100      	movs	r1, #0
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f003 f86b 	bl	800f218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2204      	movs	r2, #4
 800c158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c15c:	2300      	movs	r3, #0
 800c15e:	2200      	movs	r2, #0
 800c160:	2100      	movs	r1, #0
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f003 f837 	bl	800f1d6 <USBD_LL_Transmit>

  return USBD_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b082      	sub	sp, #8
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2205      	movs	r2, #5
 800c17e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c182:	2300      	movs	r3, #0
 800c184:	2200      	movs	r2, #0
 800c186:	2100      	movs	r1, #0
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f003 f845 	bl	800f218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	4603      	mov	r3, r0
 800c1a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c1a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1aa:	2b84      	cmp	r3, #132	; 0x84
 800c1ac:	d005      	beq.n	800c1ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c1ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	3303      	adds	r3, #3
 800c1b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3714      	adds	r7, #20
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1ce:	f3ef 8305 	mrs	r3, IPSR
 800c1d2:	607b      	str	r3, [r7, #4]
  return(result);
 800c1d4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	bf14      	ite	ne
 800c1da:	2301      	movne	r3, #1
 800c1dc:	2300      	moveq	r3, #0
 800c1de:	b2db      	uxtb	r3, r3
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c1f0:	f001 f926 	bl	800d440 <vTaskStartScheduler>
  
  return osOK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c1fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1fc:	b089      	sub	sp, #36	; 0x24
 800c1fe:	af04      	add	r7, sp, #16
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d020      	beq.n	800c24e <osThreadCreate+0x54>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d01c      	beq.n	800c24e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685c      	ldr	r4, [r3, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681d      	ldr	r5, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	691e      	ldr	r6, [r3, #16]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff ffb6 	bl	800c198 <makeFreeRtosPriority>
 800c22c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c236:	9202      	str	r2, [sp, #8]
 800c238:	9301      	str	r3, [sp, #4]
 800c23a:	9100      	str	r1, [sp, #0]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	4632      	mov	r2, r6
 800c240:	4629      	mov	r1, r5
 800c242:	4620      	mov	r0, r4
 800c244:	f000 ff1e 	bl	800d084 <xTaskCreateStatic>
 800c248:	4603      	mov	r3, r0
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	e01c      	b.n	800c288 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685c      	ldr	r4, [r3, #4]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c25a:	b29e      	uxth	r6, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff ff98 	bl	800c198 <makeFreeRtosPriority>
 800c268:	4602      	mov	r2, r0
 800c26a:	f107 030c 	add.w	r3, r7, #12
 800c26e:	9301      	str	r3, [sp, #4]
 800c270:	9200      	str	r2, [sp, #0]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	4632      	mov	r2, r6
 800c276:	4629      	mov	r1, r5
 800c278:	4620      	mov	r0, r4
 800c27a:	f000 ff60 	bl	800d13e <xTaskCreate>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b01      	cmp	r3, #1
 800c282:	d001      	beq.n	800c288 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c284:	2300      	movs	r3, #0
 800c286:	e000      	b.n	800c28a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c288:	68fb      	ldr	r3, [r7, #12]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3714      	adds	r7, #20
 800c28e:	46bd      	mov	sp, r7
 800c290:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c292 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b084      	sub	sp, #16
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d001      	beq.n	800c2a8 <osDelay+0x16>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	e000      	b.n	800c2aa <osDelay+0x18>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f001 f894 	bl	800d3d8 <vTaskDelay>
  
  return osOK;
 800c2b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b086      	sub	sp, #24
 800c2be:	af02      	add	r7, sp, #8
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00f      	beq.n	800c2ec <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d10a      	bne.n	800c2e8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	2203      	movs	r2, #3
 800c2d8:	9200      	str	r2, [sp, #0]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2100      	movs	r1, #0
 800c2de:	2001      	movs	r0, #1
 800c2e0:	f000 f9be 	bl	800c660 <xQueueGenericCreateStatic>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	e016      	b.n	800c316 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	e014      	b.n	800c316 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d110      	bne.n	800c314 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	f000 fa2a 	bl	800c750 <xQueueGenericCreate>
 800c2fc:	60f8      	str	r0, [r7, #12]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d005      	beq.n	800c310 <osSemaphoreCreate+0x56>
 800c304:	2300      	movs	r3, #0
 800c306:	2200      	movs	r2, #0
 800c308:	2100      	movs	r1, #0
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f000 fa7a 	bl	800c804 <xQueueGenericSend>
      return sema;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	e000      	b.n	800c316 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c314:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c32a:	2300      	movs	r3, #0
 800c32c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c334:	2380      	movs	r3, #128	; 0x80
 800c336:	e03a      	b.n	800c3ae <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c342:	d103      	bne.n	800c34c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c344:	f04f 33ff 	mov.w	r3, #4294967295
 800c348:	60fb      	str	r3, [r7, #12]
 800c34a:	e009      	b.n	800c360 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d006      	beq.n	800c360 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d101      	bne.n	800c360 <osSemaphoreWait+0x40>
      ticks = 1;
 800c35c:	2301      	movs	r3, #1
 800c35e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c360:	f7ff ff32 	bl	800c1c8 <inHandlerMode>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d017      	beq.n	800c39a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c36a:	f107 0308 	add.w	r3, r7, #8
 800c36e:	461a      	mov	r2, r3
 800c370:	2100      	movs	r1, #0
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fcde 	bl	800cd34 <xQueueReceiveFromISR>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d001      	beq.n	800c382 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c37e:	23ff      	movs	r3, #255	; 0xff
 800c380:	e015      	b.n	800c3ae <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d011      	beq.n	800c3ac <osSemaphoreWait+0x8c>
 800c388:	4b0b      	ldr	r3, [pc, #44]	; (800c3b8 <osSemaphoreWait+0x98>)
 800c38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	e008      	b.n	800c3ac <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c39a:	68f9      	ldr	r1, [r7, #12]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fbbd 	bl	800cb1c <xQueueSemaphoreTake>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d001      	beq.n	800c3ac <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c3a8:	23ff      	movs	r3, #255	; 0xff
 800c3aa:	e000      	b.n	800c3ae <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	e000ed04 	.word	0xe000ed04

0800c3bc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c3cc:	f7ff fefc 	bl	800c1c8 <inHandlerMode>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d016      	beq.n	800c404 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c3d6:	f107 0308 	add.w	r3, r7, #8
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fb0f 	bl	800ca00 <xQueueGiveFromISR>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d001      	beq.n	800c3ec <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c3e8:	23ff      	movs	r3, #255	; 0xff
 800c3ea:	e017      	b.n	800c41c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d013      	beq.n	800c41a <osSemaphoreRelease+0x5e>
 800c3f2:	4b0c      	ldr	r3, [pc, #48]	; (800c424 <osSemaphoreRelease+0x68>)
 800c3f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f8:	601a      	str	r2, [r3, #0]
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	e00a      	b.n	800c41a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c404:	2300      	movs	r3, #0
 800c406:	2200      	movs	r2, #0
 800c408:	2100      	movs	r1, #0
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f9fa 	bl	800c804 <xQueueGenericSend>
 800c410:	4603      	mov	r3, r0
 800c412:	2b01      	cmp	r3, #1
 800c414:	d001      	beq.n	800c41a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c416:	23ff      	movs	r3, #255	; 0xff
 800c418:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c41a:	68fb      	ldr	r3, [r7, #12]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	e000ed04 	.word	0xe000ed04

0800c428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f103 0208 	add.w	r2, r3, #8
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f04f 32ff 	mov.w	r2, #4294967295
 800c440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f103 0208 	add.w	r2, r3, #8
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f103 0208 	add.w	r2, r3, #8
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c45c:	bf00      	nop
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c476:	bf00      	nop
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c482:	b480      	push	{r7}
 800c484:	b085      	sub	sp, #20
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	683a      	ldr	r2, [r7, #0]
 800c4a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	1c5a      	adds	r2, r3, #1
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	601a      	str	r2, [r3, #0]
}
 800c4be:	bf00      	nop
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr

0800c4ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4ca:	b480      	push	{r7}
 800c4cc:	b085      	sub	sp, #20
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
 800c4d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e0:	d103      	bne.n	800c4ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	60fb      	str	r3, [r7, #12]
 800c4e8:	e00c      	b.n	800c504 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	60fb      	str	r3, [r7, #12]
 800c4f0:	e002      	b.n	800c4f8 <vListInsert+0x2e>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	60fb      	str	r3, [r7, #12]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	429a      	cmp	r2, r3
 800c502:	d2f6      	bcs.n	800c4f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	601a      	str	r2, [r3, #0]
}
 800c530:	bf00      	nop
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	6892      	ldr	r2, [r2, #8]
 800c552:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	6852      	ldr	r2, [r2, #4]
 800c55c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	429a      	cmp	r2, r3
 800c566:	d103      	bne.n	800c570 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	689a      	ldr	r2, [r3, #8]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	1e5a      	subs	r2, r3, #1
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c5ba:	f001 fea3 	bl	800e304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5c6:	68f9      	ldr	r1, [r7, #12]
 800c5c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c5ca:	fb01 f303 	mul.w	r3, r1, r3
 800c5ce:	441a      	add	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	68f9      	ldr	r1, [r7, #12]
 800c5ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c5f0:	fb01 f303 	mul.w	r3, r1, r3
 800c5f4:	441a      	add	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	22ff      	movs	r2, #255	; 0xff
 800c5fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	22ff      	movs	r2, #255	; 0xff
 800c606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d114      	bne.n	800c63a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d01a      	beq.n	800c64e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3310      	adds	r3, #16
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 f961 	bl	800d8e4 <xTaskRemoveFromEventList>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d012      	beq.n	800c64e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c628:	4b0c      	ldr	r3, [pc, #48]	; (800c65c <xQueueGenericReset+0xcc>)
 800c62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c62e:	601a      	str	r2, [r3, #0]
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	e009      	b.n	800c64e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3310      	adds	r3, #16
 800c63e:	4618      	mov	r0, r3
 800c640:	f7ff fef2 	bl	800c428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3324      	adds	r3, #36	; 0x24
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff feed 	bl	800c428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c64e:	f001 fe89 	bl	800e364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c652:	2301      	movs	r3, #1
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	e000ed04 	.word	0xe000ed04

0800c660 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c660:	b580      	push	{r7, lr}
 800c662:	b08e      	sub	sp, #56	; 0x38
 800c664:	af02      	add	r7, sp, #8
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10a      	bne.n	800c68a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c686:	bf00      	nop
 800c688:	e7fe      	b.n	800c688 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10a      	bne.n	800c6a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <xQueueGenericCreateStatic+0x52>
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <xQueueGenericCreateStatic+0x56>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e000      	b.n	800c6b8 <xQueueGenericCreateStatic+0x58>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10a      	bne.n	800c6d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	623b      	str	r3, [r7, #32]
}
 800c6ce:	bf00      	nop
 800c6d0:	e7fe      	b.n	800c6d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d102      	bne.n	800c6de <xQueueGenericCreateStatic+0x7e>
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d101      	bne.n	800c6e2 <xQueueGenericCreateStatic+0x82>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e000      	b.n	800c6e4 <xQueueGenericCreateStatic+0x84>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	61fb      	str	r3, [r7, #28]
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c6fe:	2348      	movs	r3, #72	; 0x48
 800c700:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2b48      	cmp	r3, #72	; 0x48
 800c706:	d00a      	beq.n	800c71e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	61bb      	str	r3, [r7, #24]
}
 800c71a:	bf00      	nop
 800c71c:	e7fe      	b.n	800c71c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c71e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00d      	beq.n	800c746 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72c:	2201      	movs	r2, #1
 800c72e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c732:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	4613      	mov	r3, r2
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	68b9      	ldr	r1, [r7, #8]
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f000 f83f 	bl	800c7c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c748:	4618      	mov	r0, r3
 800c74a:	3730      	adds	r7, #48	; 0x30
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08a      	sub	sp, #40	; 0x28
 800c754:	af02      	add	r7, sp, #8
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	4613      	mov	r3, r2
 800c75c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10a      	bne.n	800c77a <xQueueGenericCreate+0x2a>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	613b      	str	r3, [r7, #16]
}
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	fb02 f303 	mul.w	r3, r2, r3
 800c782:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	3348      	adds	r3, #72	; 0x48
 800c788:	4618      	mov	r0, r3
 800c78a:	f001 fedd 	bl	800e548 <pvPortMalloc>
 800c78e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d011      	beq.n	800c7ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	3348      	adds	r3, #72	; 0x48
 800c79e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7a8:	79fa      	ldrb	r2, [r7, #7]
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	697a      	ldr	r2, [r7, #20]
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f000 f805 	bl	800c7c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7ba:	69bb      	ldr	r3, [r7, #24]
	}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3720      	adds	r7, #32
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d103      	bne.n	800c7e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	69ba      	ldr	r2, [r7, #24]
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	e002      	b.n	800c7e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c7f2:	2101      	movs	r1, #1
 800c7f4:	69b8      	ldr	r0, [r7, #24]
 800c7f6:	f7ff fecb 	bl	800c590 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c7fa:	bf00      	nop
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
	...

0800c804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b08e      	sub	sp, #56	; 0x38
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c812:	2300      	movs	r3, #0
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10a      	bne.n	800c836 <xQueueGenericSend+0x32>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d103      	bne.n	800c844 <xQueueGenericSend+0x40>
 800c83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c840:	2b00      	cmp	r3, #0
 800c842:	d101      	bne.n	800c848 <xQueueGenericSend+0x44>
 800c844:	2301      	movs	r3, #1
 800c846:	e000      	b.n	800c84a <xQueueGenericSend+0x46>
 800c848:	2300      	movs	r3, #0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10a      	bne.n	800c864 <xQueueGenericSend+0x60>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c860:	bf00      	nop
 800c862:	e7fe      	b.n	800c862 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	2b02      	cmp	r3, #2
 800c868:	d103      	bne.n	800c872 <xQueueGenericSend+0x6e>
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d101      	bne.n	800c876 <xQueueGenericSend+0x72>
 800c872:	2301      	movs	r3, #1
 800c874:	e000      	b.n	800c878 <xQueueGenericSend+0x74>
 800c876:	2300      	movs	r3, #0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10a      	bne.n	800c892 <xQueueGenericSend+0x8e>
	__asm volatile
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	623b      	str	r3, [r7, #32]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c892:	f001 f9e7 	bl	800dc64 <xTaskGetSchedulerState>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d102      	bne.n	800c8a2 <xQueueGenericSend+0x9e>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <xQueueGenericSend+0xa2>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e000      	b.n	800c8a8 <xQueueGenericSend+0xa4>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <xQueueGenericSend+0xbe>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	61fb      	str	r3, [r7, #28]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8c2:	f001 fd1f 	bl	800e304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d302      	bcc.n	800c8d8 <xQueueGenericSend+0xd4>
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d129      	bne.n	800c92c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8d8:	683a      	ldr	r2, [r7, #0]
 800c8da:	68b9      	ldr	r1, [r7, #8]
 800c8dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8de:	f000 fac1 	bl	800ce64 <prvCopyDataToQueue>
 800c8e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d010      	beq.n	800c90e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ee:	3324      	adds	r3, #36	; 0x24
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 fff7 	bl	800d8e4 <xTaskRemoveFromEventList>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d013      	beq.n	800c924 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c8fc:	4b3f      	ldr	r3, [pc, #252]	; (800c9fc <xQueueGenericSend+0x1f8>)
 800c8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	e00a      	b.n	800c924 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c910:	2b00      	cmp	r3, #0
 800c912:	d007      	beq.n	800c924 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c914:	4b39      	ldr	r3, [pc, #228]	; (800c9fc <xQueueGenericSend+0x1f8>)
 800c916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c91a:	601a      	str	r2, [r3, #0]
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c924:	f001 fd1e 	bl	800e364 <vPortExitCritical>
				return pdPASS;
 800c928:	2301      	movs	r3, #1
 800c92a:	e063      	b.n	800c9f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d103      	bne.n	800c93a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c932:	f001 fd17 	bl	800e364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c936:	2300      	movs	r3, #0
 800c938:	e05c      	b.n	800c9f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d106      	bne.n	800c94e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c940:	f107 0314 	add.w	r3, r7, #20
 800c944:	4618      	mov	r0, r3
 800c946:	f001 f82f 	bl	800d9a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c94a:	2301      	movs	r3, #1
 800c94c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c94e:	f001 fd09 	bl	800e364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c952:	f000 fddf 	bl	800d514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c956:	f001 fcd5 	bl	800e304 <vPortEnterCritical>
 800c95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c960:	b25b      	sxtb	r3, r3
 800c962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c966:	d103      	bne.n	800c970 <xQueueGenericSend+0x16c>
 800c968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c976:	b25b      	sxtb	r3, r3
 800c978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97c:	d103      	bne.n	800c986 <xQueueGenericSend+0x182>
 800c97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c980:	2200      	movs	r2, #0
 800c982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c986:	f001 fced 	bl	800e364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c98a:	1d3a      	adds	r2, r7, #4
 800c98c:	f107 0314 	add.w	r3, r7, #20
 800c990:	4611      	mov	r1, r2
 800c992:	4618      	mov	r0, r3
 800c994:	f001 f81e 	bl	800d9d4 <xTaskCheckForTimeOut>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d124      	bne.n	800c9e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c99e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9a0:	f000 fb58 	bl	800d054 <prvIsQueueFull>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d018      	beq.n	800c9dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ac:	3310      	adds	r3, #16
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 ff72 	bl	800d89c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c9b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9ba:	f000 fae3 	bl	800cf84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c9be:	f000 fdb7 	bl	800d530 <xTaskResumeAll>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f47f af7c 	bne.w	800c8c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c9ca:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <xQueueGenericSend+0x1f8>)
 800c9cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9d0:	601a      	str	r2, [r3, #0]
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	e772      	b.n	800c8c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c9dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9de:	f000 fad1 	bl	800cf84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9e2:	f000 fda5 	bl	800d530 <xTaskResumeAll>
 800c9e6:	e76c      	b.n	800c8c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c9e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9ea:	f000 facb 	bl	800cf84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9ee:	f000 fd9f 	bl	800d530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c9f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3738      	adds	r7, #56	; 0x38
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	e000ed04 	.word	0xe000ed04

0800ca00 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08e      	sub	sp, #56	; 0x38
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10a      	bne.n	800ca2a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	623b      	str	r3, [r7, #32]
}
 800ca26:	bf00      	nop
 800ca28:	e7fe      	b.n	800ca28 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00a      	beq.n	800ca48 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	61fb      	str	r3, [r7, #28]
}
 800ca44:	bf00      	nop
 800ca46:	e7fe      	b.n	800ca46 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d103      	bne.n	800ca58 <xQueueGiveFromISR+0x58>
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <xQueueGiveFromISR+0x5c>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e000      	b.n	800ca5e <xQueueGiveFromISR+0x5e>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d10a      	bne.n	800ca78 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca66:	f383 8811 	msr	BASEPRI, r3
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	61bb      	str	r3, [r7, #24]
}
 800ca74:	bf00      	nop
 800ca76:	e7fe      	b.n	800ca76 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca78:	f001 fd26 	bl	800e4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ca7c:	f3ef 8211 	mrs	r2, BASEPRI
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	617a      	str	r2, [r7, #20]
 800ca92:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ca94:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca96:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d22b      	bcs.n	800cb00 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800caa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800caae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800caba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac2:	d112      	bne.n	800caea <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d016      	beq.n	800cafa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	3324      	adds	r3, #36	; 0x24
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 ff07 	bl	800d8e4 <xTaskRemoveFromEventList>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00e      	beq.n	800cafa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00b      	beq.n	800cafa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2201      	movs	r2, #1
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	e007      	b.n	800cafa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800caea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caee:	3301      	adds	r3, #1
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	b25a      	sxtb	r2, r3
 800caf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cafa:	2301      	movs	r3, #1
 800cafc:	637b      	str	r3, [r7, #52]	; 0x34
 800cafe:	e001      	b.n	800cb04 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb00:	2300      	movs	r3, #0
 800cb02:	637b      	str	r3, [r7, #52]	; 0x34
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cb0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3738      	adds	r7, #56	; 0x38
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
	...

0800cb1c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b08e      	sub	sp, #56	; 0x38
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb26:	2300      	movs	r3, #0
 800cb28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	623b      	str	r3, [r7, #32]
}
 800cb4a:	bf00      	nop
 800cb4c:	e7fe      	b.n	800cb4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00a      	beq.n	800cb6c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	61fb      	str	r3, [r7, #28]
}
 800cb68:	bf00      	nop
 800cb6a:	e7fe      	b.n	800cb6a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb6c:	f001 f87a 	bl	800dc64 <xTaskGetSchedulerState>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d102      	bne.n	800cb7c <xQueueSemaphoreTake+0x60>
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <xQueueSemaphoreTake+0x64>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e000      	b.n	800cb82 <xQueueSemaphoreTake+0x66>
 800cb80:	2300      	movs	r3, #0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10a      	bne.n	800cb9c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8a:	f383 8811 	msr	BASEPRI, r3
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	61bb      	str	r3, [r7, #24]
}
 800cb98:	bf00      	nop
 800cb9a:	e7fe      	b.n	800cb9a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb9c:	f001 fbb2 	bl	800e304 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d024      	beq.n	800cbf6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbae:	1e5a      	subs	r2, r3, #1
 800cbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d104      	bne.n	800cbc6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbbc:	f001 f9fa 	bl	800dfb4 <pvTaskIncrementMutexHeldCount>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00f      	beq.n	800cbee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd0:	3310      	adds	r3, #16
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 fe86 	bl	800d8e4 <xTaskRemoveFromEventList>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d007      	beq.n	800cbee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cbde:	4b54      	ldr	r3, [pc, #336]	; (800cd30 <xQueueSemaphoreTake+0x214>)
 800cbe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbee:	f001 fbb9 	bl	800e364 <vPortExitCritical>
				return pdPASS;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e097      	b.n	800cd26 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d111      	bne.n	800cc20 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00a      	beq.n	800cc18 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	617b      	str	r3, [r7, #20]
}
 800cc14:	bf00      	nop
 800cc16:	e7fe      	b.n	800cc16 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc18:	f001 fba4 	bl	800e364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	e082      	b.n	800cd26 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 febc 	bl	800d9a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc30:	2301      	movs	r3, #1
 800cc32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc34:	f001 fb96 	bl	800e364 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc38:	f000 fc6c 	bl	800d514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc3c:	f001 fb62 	bl	800e304 <vPortEnterCritical>
 800cc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc46:	b25b      	sxtb	r3, r3
 800cc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc4c:	d103      	bne.n	800cc56 <xQueueSemaphoreTake+0x13a>
 800cc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc5c:	b25b      	sxtb	r3, r3
 800cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc62:	d103      	bne.n	800cc6c <xQueueSemaphoreTake+0x150>
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc6c:	f001 fb7a 	bl	800e364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc70:	463a      	mov	r2, r7
 800cc72:	f107 030c 	add.w	r3, r7, #12
 800cc76:	4611      	mov	r1, r2
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 feab 	bl	800d9d4 <xTaskCheckForTimeOut>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d132      	bne.n	800ccea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc86:	f000 f9cf 	bl	800d028 <prvIsQueueEmpty>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d026      	beq.n	800ccde <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d109      	bne.n	800ccac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cc98:	f001 fb34 	bl	800e304 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 fffd 	bl	800dca0 <xTaskPriorityInherit>
 800cca6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cca8:	f001 fb5c 	bl	800e364 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ccac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccae:	3324      	adds	r3, #36	; 0x24
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 fdf1 	bl	800d89c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ccba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccbc:	f000 f962 	bl	800cf84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccc0:	f000 fc36 	bl	800d530 <xTaskResumeAll>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f47f af68 	bne.w	800cb9c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cccc:	4b18      	ldr	r3, [pc, #96]	; (800cd30 <xQueueSemaphoreTake+0x214>)
 800ccce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	e75e      	b.n	800cb9c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ccde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cce0:	f000 f950 	bl	800cf84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cce4:	f000 fc24 	bl	800d530 <xTaskResumeAll>
 800cce8:	e758      	b.n	800cb9c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ccea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccec:	f000 f94a 	bl	800cf84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccf0:	f000 fc1e 	bl	800d530 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccf6:	f000 f997 	bl	800d028 <prvIsQueueEmpty>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f43f af4d 	beq.w	800cb9c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00d      	beq.n	800cd24 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cd08:	f001 fafc 	bl	800e304 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd0e:	f000 f891 	bl	800ce34 <prvGetDisinheritPriorityAfterTimeout>
 800cd12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f001 f8bc 	bl	800de98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd20:	f001 fb20 	bl	800e364 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3738      	adds	r7, #56	; 0x38
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	e000ed04 	.word	0xe000ed04

0800cd34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08e      	sub	sp, #56	; 0x38
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10a      	bne.n	800cd60 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	623b      	str	r3, [r7, #32]
}
 800cd5c:	bf00      	nop
 800cd5e:	e7fe      	b.n	800cd5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d103      	bne.n	800cd6e <xQueueReceiveFromISR+0x3a>
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <xQueueReceiveFromISR+0x3e>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e000      	b.n	800cd74 <xQueueReceiveFromISR+0x40>
 800cd72:	2300      	movs	r3, #0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10a      	bne.n	800cd8e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	61fb      	str	r3, [r7, #28]
}
 800cd8a:	bf00      	nop
 800cd8c:	e7fe      	b.n	800cd8c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd8e:	f001 fb9b 	bl	800e4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800cd92:	f3ef 8211 	mrs	r2, BASEPRI
 800cd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	61ba      	str	r2, [r7, #24]
 800cda8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cdaa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d02f      	beq.n	800ce1a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdc4:	68b9      	ldr	r1, [r7, #8]
 800cdc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdc8:	f000 f8b6 	bl	800cf38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	1e5a      	subs	r2, r3, #1
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cdd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cddc:	d112      	bne.n	800ce04 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d016      	beq.n	800ce14 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	3310      	adds	r3, #16
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 fd7a 	bl	800d8e4 <xTaskRemoveFromEventList>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00e      	beq.n	800ce14 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00b      	beq.n	800ce14 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	601a      	str	r2, [r3, #0]
 800ce02:	e007      	b.n	800ce14 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce08:	3301      	adds	r3, #1
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	b25a      	sxtb	r2, r3
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce14:	2301      	movs	r3, #1
 800ce16:	637b      	str	r3, [r7, #52]	; 0x34
 800ce18:	e001      	b.n	800ce1e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce20:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	f383 8811 	msr	BASEPRI, r3
}
 800ce28:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3738      	adds	r7, #56	; 0x38
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d006      	beq.n	800ce52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f1c3 0307 	rsb	r3, r3, #7
 800ce4e:	60fb      	str	r3, [r7, #12]
 800ce50:	e001      	b.n	800ce56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ce52:	2300      	movs	r3, #0
 800ce54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ce56:	68fb      	ldr	r3, [r7, #12]
	}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce70:	2300      	movs	r3, #0
 800ce72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10d      	bne.n	800ce9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d14d      	bne.n	800cf26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f000 ff7c 	bl	800dd8c <xTaskPriorityDisinherit>
 800ce94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	609a      	str	r2, [r3, #8]
 800ce9c:	e043      	b.n	800cf26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d119      	bne.n	800ced8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6858      	ldr	r0, [r3, #4]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceac:	461a      	mov	r2, r3
 800ceae:	68b9      	ldr	r1, [r7, #8]
 800ceb0:	f002 fa56 	bl	800f360 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cebc:	441a      	add	r2, r3
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	685a      	ldr	r2, [r3, #4]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d32b      	bcc.n	800cf26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	605a      	str	r2, [r3, #4]
 800ced6:	e026      	b.n	800cf26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	68d8      	ldr	r0, [r3, #12]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee0:	461a      	mov	r2, r3
 800cee2:	68b9      	ldr	r1, [r7, #8]
 800cee4:	f002 fa3c 	bl	800f360 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef0:	425b      	negs	r3, r3
 800cef2:	441a      	add	r2, r3
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d207      	bcs.n	800cf14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	689a      	ldr	r2, [r3, #8]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0c:	425b      	negs	r3, r3
 800cf0e:	441a      	add	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	d105      	bne.n	800cf26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	1c5a      	adds	r2, r3, #1
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf2e:	697b      	ldr	r3, [r7, #20]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3718      	adds	r7, #24
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d018      	beq.n	800cf7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	68da      	ldr	r2, [r3, #12]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf52:	441a      	add	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	68da      	ldr	r2, [r3, #12]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d303      	bcc.n	800cf6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68d9      	ldr	r1, [r3, #12]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf74:	461a      	mov	r2, r3
 800cf76:	6838      	ldr	r0, [r7, #0]
 800cf78:	f002 f9f2 	bl	800f360 <memcpy>
	}
}
 800cf7c:	bf00      	nop
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf8c:	f001 f9ba 	bl	800e304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf98:	e011      	b.n	800cfbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d012      	beq.n	800cfc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	3324      	adds	r3, #36	; 0x24
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 fc9c 	bl	800d8e4 <xTaskRemoveFromEventList>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfb2:	f000 fd71 	bl	800da98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfb6:	7bfb      	ldrb	r3, [r7, #15]
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	dce9      	bgt.n	800cf9a <prvUnlockQueue+0x16>
 800cfc6:	e000      	b.n	800cfca <prvUnlockQueue+0x46>
					break;
 800cfc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	22ff      	movs	r2, #255	; 0xff
 800cfce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cfd2:	f001 f9c7 	bl	800e364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cfd6:	f001 f995 	bl	800e304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfe2:	e011      	b.n	800d008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d012      	beq.n	800d012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	3310      	adds	r3, #16
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 fc77 	bl	800d8e4 <xTaskRemoveFromEventList>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cffc:	f000 fd4c 	bl	800da98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	3b01      	subs	r3, #1
 800d004:	b2db      	uxtb	r3, r3
 800d006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	dce9      	bgt.n	800cfe4 <prvUnlockQueue+0x60>
 800d010:	e000      	b.n	800d014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	22ff      	movs	r2, #255	; 0xff
 800d018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d01c:	f001 f9a2 	bl	800e364 <vPortExitCritical>
}
 800d020:	bf00      	nop
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d030:	f001 f968 	bl	800e304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d102      	bne.n	800d042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d03c:	2301      	movs	r3, #1
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	e001      	b.n	800d046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d042:	2300      	movs	r3, #0
 800d044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d046:	f001 f98d 	bl	800e364 <vPortExitCritical>

	return xReturn;
 800d04a:	68fb      	ldr	r3, [r7, #12]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d05c:	f001 f952 	bl	800e304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d068:	429a      	cmp	r2, r3
 800d06a:	d102      	bne.n	800d072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d06c:	2301      	movs	r3, #1
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	e001      	b.n	800d076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d072:	2300      	movs	r3, #0
 800d074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d076:	f001 f975 	bl	800e364 <vPortExitCritical>

	return xReturn;
 800d07a:	68fb      	ldr	r3, [r7, #12]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d084:	b580      	push	{r7, lr}
 800d086:	b08e      	sub	sp, #56	; 0x38
 800d088:	af04      	add	r7, sp, #16
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d094:	2b00      	cmp	r3, #0
 800d096:	d10a      	bne.n	800d0ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800d098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09c:	f383 8811 	msr	BASEPRI, r3
 800d0a0:	f3bf 8f6f 	isb	sy
 800d0a4:	f3bf 8f4f 	dsb	sy
 800d0a8:	623b      	str	r3, [r7, #32]
}
 800d0aa:	bf00      	nop
 800d0ac:	e7fe      	b.n	800d0ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10a      	bne.n	800d0ca <xTaskCreateStatic+0x46>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	61fb      	str	r3, [r7, #28]
}
 800d0c6:	bf00      	nop
 800d0c8:	e7fe      	b.n	800d0c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d0ca:	23b4      	movs	r3, #180	; 0xb4
 800d0cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	2bb4      	cmp	r3, #180	; 0xb4
 800d0d2:	d00a      	beq.n	800d0ea <xTaskCreateStatic+0x66>
	__asm volatile
 800d0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	61bb      	str	r3, [r7, #24]
}
 800d0e6:	bf00      	nop
 800d0e8:	e7fe      	b.n	800d0e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d01e      	beq.n	800d130 <xTaskCreateStatic+0xac>
 800d0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01b      	beq.n	800d130 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d100:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	2202      	movs	r2, #2
 800d106:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d10a:	2300      	movs	r3, #0
 800d10c:	9303      	str	r3, [sp, #12]
 800d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d110:	9302      	str	r3, [sp, #8]
 800d112:	f107 0314 	add.w	r3, r7, #20
 800d116:	9301      	str	r3, [sp, #4]
 800d118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	68b9      	ldr	r1, [r7, #8]
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f000 f850 	bl	800d1c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d12a:	f000 f8eb 	bl	800d304 <prvAddNewTaskToReadyList>
 800d12e:	e001      	b.n	800d134 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d130:	2300      	movs	r3, #0
 800d132:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d134:	697b      	ldr	r3, [r7, #20]
	}
 800d136:	4618      	mov	r0, r3
 800d138:	3728      	adds	r7, #40	; 0x28
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b08c      	sub	sp, #48	; 0x30
 800d142:	af04      	add	r7, sp, #16
 800d144:	60f8      	str	r0, [r7, #12]
 800d146:	60b9      	str	r1, [r7, #8]
 800d148:	603b      	str	r3, [r7, #0]
 800d14a:	4613      	mov	r3, r2
 800d14c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d14e:	88fb      	ldrh	r3, [r7, #6]
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4618      	mov	r0, r3
 800d154:	f001 f9f8 	bl	800e548 <pvPortMalloc>
 800d158:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00e      	beq.n	800d17e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d160:	20b4      	movs	r0, #180	; 0xb4
 800d162:	f001 f9f1 	bl	800e548 <pvPortMalloc>
 800d166:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d003      	beq.n	800d176 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	697a      	ldr	r2, [r7, #20]
 800d172:	631a      	str	r2, [r3, #48]	; 0x30
 800d174:	e005      	b.n	800d182 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d176:	6978      	ldr	r0, [r7, #20]
 800d178:	f001 fab2 	bl	800e6e0 <vPortFree>
 800d17c:	e001      	b.n	800d182 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d17e:	2300      	movs	r3, #0
 800d180:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d017      	beq.n	800d1b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d190:	88fa      	ldrh	r2, [r7, #6]
 800d192:	2300      	movs	r3, #0
 800d194:	9303      	str	r3, [sp, #12]
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	9302      	str	r3, [sp, #8]
 800d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19c:	9301      	str	r3, [sp, #4]
 800d19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a0:	9300      	str	r3, [sp, #0]
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	68b9      	ldr	r1, [r7, #8]
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f000 f80e 	bl	800d1c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1ac:	69f8      	ldr	r0, [r7, #28]
 800d1ae:	f000 f8a9 	bl	800d304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	61bb      	str	r3, [r7, #24]
 800d1b6:	e002      	b.n	800d1be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d1be:	69bb      	ldr	r3, [r7, #24]
	}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3720      	adds	r7, #32
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b088      	sub	sp, #32
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
 800d1d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4413      	add	r3, r2
 800d1e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	f023 0307 	bic.w	r3, r3, #7
 800d1ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00a      	beq.n	800d210 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	617b      	str	r3, [r7, #20]
}
 800d20c:	bf00      	nop
 800d20e:	e7fe      	b.n	800d20e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d01f      	beq.n	800d256 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d216:	2300      	movs	r3, #0
 800d218:	61fb      	str	r3, [r7, #28]
 800d21a:	e012      	b.n	800d242 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	4413      	add	r3, r2
 800d222:	7819      	ldrb	r1, [r3, #0]
 800d224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	4413      	add	r3, r2
 800d22a:	3334      	adds	r3, #52	; 0x34
 800d22c:	460a      	mov	r2, r1
 800d22e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	4413      	add	r3, r2
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d006      	beq.n	800d24a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	3301      	adds	r3, #1
 800d240:	61fb      	str	r3, [r7, #28]
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	2b0f      	cmp	r3, #15
 800d246:	d9e9      	bls.n	800d21c <prvInitialiseNewTask+0x54>
 800d248:	e000      	b.n	800d24c <prvInitialiseNewTask+0x84>
			{
				break;
 800d24a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24e:	2200      	movs	r2, #0
 800d250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d254:	e003      	b.n	800d25e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d258:	2200      	movs	r2, #0
 800d25a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d260:	2b06      	cmp	r3, #6
 800d262:	d901      	bls.n	800d268 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d264:	2306      	movs	r3, #6
 800d266:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d26c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d272:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	2200      	movs	r2, #0
 800d278:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27c:	3304      	adds	r3, #4
 800d27e:	4618      	mov	r0, r3
 800d280:	f7ff f8f2 	bl	800c468 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	3318      	adds	r3, #24
 800d288:	4618      	mov	r0, r3
 800d28a:	f7ff f8ed 	bl	800c468 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d292:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	f1c3 0207 	rsb	r2, r3, #7
 800d29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	334c      	adds	r3, #76	; 0x4c
 800d2b8:	2260      	movs	r2, #96	; 0x60
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f002 f85d 	bl	800f37c <memset>
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	4a0c      	ldr	r2, [pc, #48]	; (800d2f8 <prvInitialiseNewTask+0x130>)
 800d2c6:	651a      	str	r2, [r3, #80]	; 0x50
 800d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ca:	4a0c      	ldr	r2, [pc, #48]	; (800d2fc <prvInitialiseNewTask+0x134>)
 800d2cc:	655a      	str	r2, [r3, #84]	; 0x54
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	4a0b      	ldr	r2, [pc, #44]	; (800d300 <prvInitialiseNewTask+0x138>)
 800d2d2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d2d4:	683a      	ldr	r2, [r7, #0]
 800d2d6:	68f9      	ldr	r1, [r7, #12]
 800d2d8:	69b8      	ldr	r0, [r7, #24]
 800d2da:	f000 fee5 	bl	800e0a8 <pxPortInitialiseStack>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2f0:	bf00      	nop
 800d2f2:	3720      	adds	r7, #32
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	0800ff74 	.word	0x0800ff74
 800d2fc:	0800ff94 	.word	0x0800ff94
 800d300:	0800ff54 	.word	0x0800ff54

0800d304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d30c:	f000 fffa 	bl	800e304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d310:	4b2a      	ldr	r3, [pc, #168]	; (800d3bc <prvAddNewTaskToReadyList+0xb8>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3301      	adds	r3, #1
 800d316:	4a29      	ldr	r2, [pc, #164]	; (800d3bc <prvAddNewTaskToReadyList+0xb8>)
 800d318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d31a:	4b29      	ldr	r3, [pc, #164]	; (800d3c0 <prvAddNewTaskToReadyList+0xbc>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d109      	bne.n	800d336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d322:	4a27      	ldr	r2, [pc, #156]	; (800d3c0 <prvAddNewTaskToReadyList+0xbc>)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d328:	4b24      	ldr	r3, [pc, #144]	; (800d3bc <prvAddNewTaskToReadyList+0xb8>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d110      	bne.n	800d352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d330:	f000 fbd6 	bl	800dae0 <prvInitialiseTaskLists>
 800d334:	e00d      	b.n	800d352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d336:	4b23      	ldr	r3, [pc, #140]	; (800d3c4 <prvAddNewTaskToReadyList+0xc0>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d109      	bne.n	800d352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d33e:	4b20      	ldr	r3, [pc, #128]	; (800d3c0 <prvAddNewTaskToReadyList+0xbc>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d348:	429a      	cmp	r2, r3
 800d34a:	d802      	bhi.n	800d352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d34c:	4a1c      	ldr	r2, [pc, #112]	; (800d3c0 <prvAddNewTaskToReadyList+0xbc>)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d352:	4b1d      	ldr	r3, [pc, #116]	; (800d3c8 <prvAddNewTaskToReadyList+0xc4>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3301      	adds	r3, #1
 800d358:	4a1b      	ldr	r2, [pc, #108]	; (800d3c8 <prvAddNewTaskToReadyList+0xc4>)
 800d35a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d360:	2201      	movs	r2, #1
 800d362:	409a      	lsls	r2, r3
 800d364:	4b19      	ldr	r3, [pc, #100]	; (800d3cc <prvAddNewTaskToReadyList+0xc8>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4313      	orrs	r3, r2
 800d36a:	4a18      	ldr	r2, [pc, #96]	; (800d3cc <prvAddNewTaskToReadyList+0xc8>)
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d372:	4613      	mov	r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	4413      	add	r3, r2
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4a15      	ldr	r2, [pc, #84]	; (800d3d0 <prvAddNewTaskToReadyList+0xcc>)
 800d37c:	441a      	add	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3304      	adds	r3, #4
 800d382:	4619      	mov	r1, r3
 800d384:	4610      	mov	r0, r2
 800d386:	f7ff f87c 	bl	800c482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d38a:	f000 ffeb 	bl	800e364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d38e:	4b0d      	ldr	r3, [pc, #52]	; (800d3c4 <prvAddNewTaskToReadyList+0xc0>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00e      	beq.n	800d3b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d396:	4b0a      	ldr	r3, [pc, #40]	; (800d3c0 <prvAddNewTaskToReadyList+0xbc>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d207      	bcs.n	800d3b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d3a4:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <prvAddNewTaskToReadyList+0xd0>)
 800d3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3aa:	601a      	str	r2, [r3, #0]
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3b4:	bf00      	nop
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	20000870 	.word	0x20000870
 800d3c0:	20000770 	.word	0x20000770
 800d3c4:	2000087c 	.word	0x2000087c
 800d3c8:	2000088c 	.word	0x2000088c
 800d3cc:	20000878 	.word	0x20000878
 800d3d0:	20000774 	.word	0x20000774
 800d3d4:	e000ed04 	.word	0xe000ed04

0800d3d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d017      	beq.n	800d41a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d3ea:	4b13      	ldr	r3, [pc, #76]	; (800d438 <vTaskDelay+0x60>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00a      	beq.n	800d408 <vTaskDelay+0x30>
	__asm volatile
 800d3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	60bb      	str	r3, [r7, #8]
}
 800d404:	bf00      	nop
 800d406:	e7fe      	b.n	800d406 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d408:	f000 f884 	bl	800d514 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d40c:	2100      	movs	r1, #0
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fde4 	bl	800dfdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d414:	f000 f88c 	bl	800d530 <xTaskResumeAll>
 800d418:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d107      	bne.n	800d430 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d420:	4b06      	ldr	r3, [pc, #24]	; (800d43c <vTaskDelay+0x64>)
 800d422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d430:	bf00      	nop
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	20000898 	.word	0x20000898
 800d43c:	e000ed04 	.word	0xe000ed04

0800d440 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b08a      	sub	sp, #40	; 0x28
 800d444:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d446:	2300      	movs	r3, #0
 800d448:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d44a:	2300      	movs	r3, #0
 800d44c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d44e:	463a      	mov	r2, r7
 800d450:	1d39      	adds	r1, r7, #4
 800d452:	f107 0308 	add.w	r3, r7, #8
 800d456:	4618      	mov	r0, r3
 800d458:	f7f3 fb36 	bl	8000ac8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d45c:	6839      	ldr	r1, [r7, #0]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68ba      	ldr	r2, [r7, #8]
 800d462:	9202      	str	r2, [sp, #8]
 800d464:	9301      	str	r3, [sp, #4]
 800d466:	2300      	movs	r3, #0
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	2300      	movs	r3, #0
 800d46c:	460a      	mov	r2, r1
 800d46e:	4921      	ldr	r1, [pc, #132]	; (800d4f4 <vTaskStartScheduler+0xb4>)
 800d470:	4821      	ldr	r0, [pc, #132]	; (800d4f8 <vTaskStartScheduler+0xb8>)
 800d472:	f7ff fe07 	bl	800d084 <xTaskCreateStatic>
 800d476:	4603      	mov	r3, r0
 800d478:	4a20      	ldr	r2, [pc, #128]	; (800d4fc <vTaskStartScheduler+0xbc>)
 800d47a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d47c:	4b1f      	ldr	r3, [pc, #124]	; (800d4fc <vTaskStartScheduler+0xbc>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d484:	2301      	movs	r3, #1
 800d486:	617b      	str	r3, [r7, #20]
 800d488:	e001      	b.n	800d48e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d48a:	2300      	movs	r3, #0
 800d48c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d11b      	bne.n	800d4cc <vTaskStartScheduler+0x8c>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	613b      	str	r3, [r7, #16]
}
 800d4a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d4a8:	4b15      	ldr	r3, [pc, #84]	; (800d500 <vTaskStartScheduler+0xc0>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	334c      	adds	r3, #76	; 0x4c
 800d4ae:	4a15      	ldr	r2, [pc, #84]	; (800d504 <vTaskStartScheduler+0xc4>)
 800d4b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d4b2:	4b15      	ldr	r3, [pc, #84]	; (800d508 <vTaskStartScheduler+0xc8>)
 800d4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d4ba:	4b14      	ldr	r3, [pc, #80]	; (800d50c <vTaskStartScheduler+0xcc>)
 800d4bc:	2201      	movs	r2, #1
 800d4be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d4c0:	4b13      	ldr	r3, [pc, #76]	; (800d510 <vTaskStartScheduler+0xd0>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d4c6:	f000 fe7b 	bl	800e1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d4ca:	e00e      	b.n	800d4ea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d2:	d10a      	bne.n	800d4ea <vTaskStartScheduler+0xaa>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d8:	f383 8811 	msr	BASEPRI, r3
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	60fb      	str	r3, [r7, #12]
}
 800d4e6:	bf00      	nop
 800d4e8:	e7fe      	b.n	800d4e8 <vTaskStartScheduler+0xa8>
}
 800d4ea:	bf00      	nop
 800d4ec:	3718      	adds	r7, #24
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	0800feec 	.word	0x0800feec
 800d4f8:	0800dab1 	.word	0x0800dab1
 800d4fc:	20000894 	.word	0x20000894
 800d500:	20000770 	.word	0x20000770
 800d504:	20000110 	.word	0x20000110
 800d508:	20000890 	.word	0x20000890
 800d50c:	2000087c 	.word	0x2000087c
 800d510:	20000874 	.word	0x20000874

0800d514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d514:	b480      	push	{r7}
 800d516:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d518:	4b04      	ldr	r3, [pc, #16]	; (800d52c <vTaskSuspendAll+0x18>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3301      	adds	r3, #1
 800d51e:	4a03      	ldr	r2, [pc, #12]	; (800d52c <vTaskSuspendAll+0x18>)
 800d520:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d522:	bf00      	nop
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	20000898 	.word	0x20000898

0800d530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d536:	2300      	movs	r3, #0
 800d538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d53e:	4b41      	ldr	r3, [pc, #260]	; (800d644 <xTaskResumeAll+0x114>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d10a      	bne.n	800d55c <xTaskResumeAll+0x2c>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	603b      	str	r3, [r7, #0]
}
 800d558:	bf00      	nop
 800d55a:	e7fe      	b.n	800d55a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d55c:	f000 fed2 	bl	800e304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d560:	4b38      	ldr	r3, [pc, #224]	; (800d644 <xTaskResumeAll+0x114>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	3b01      	subs	r3, #1
 800d566:	4a37      	ldr	r2, [pc, #220]	; (800d644 <xTaskResumeAll+0x114>)
 800d568:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d56a:	4b36      	ldr	r3, [pc, #216]	; (800d644 <xTaskResumeAll+0x114>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d161      	bne.n	800d636 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d572:	4b35      	ldr	r3, [pc, #212]	; (800d648 <xTaskResumeAll+0x118>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d05d      	beq.n	800d636 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d57a:	e02e      	b.n	800d5da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d57c:	4b33      	ldr	r3, [pc, #204]	; (800d64c <xTaskResumeAll+0x11c>)
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	3318      	adds	r3, #24
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fe ffd7 	bl	800c53c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	3304      	adds	r3, #4
 800d592:	4618      	mov	r0, r3
 800d594:	f7fe ffd2 	bl	800c53c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59c:	2201      	movs	r2, #1
 800d59e:	409a      	lsls	r2, r3
 800d5a0:	4b2b      	ldr	r3, [pc, #172]	; (800d650 <xTaskResumeAll+0x120>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	4a2a      	ldr	r2, [pc, #168]	; (800d650 <xTaskResumeAll+0x120>)
 800d5a8:	6013      	str	r3, [r2, #0]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	4413      	add	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4a27      	ldr	r2, [pc, #156]	; (800d654 <xTaskResumeAll+0x124>)
 800d5b8:	441a      	add	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	3304      	adds	r3, #4
 800d5be:	4619      	mov	r1, r3
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	f7fe ff5e 	bl	800c482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ca:	4b23      	ldr	r3, [pc, #140]	; (800d658 <xTaskResumeAll+0x128>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d302      	bcc.n	800d5da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d5d4:	4b21      	ldr	r3, [pc, #132]	; (800d65c <xTaskResumeAll+0x12c>)
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5da:	4b1c      	ldr	r3, [pc, #112]	; (800d64c <xTaskResumeAll+0x11c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1cc      	bne.n	800d57c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d5e8:	f000 fb1c 	bl	800dc24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d5ec:	4b1c      	ldr	r3, [pc, #112]	; (800d660 <xTaskResumeAll+0x130>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d010      	beq.n	800d61a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d5f8:	f000 f836 	bl	800d668 <xTaskIncrementTick>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d002      	beq.n	800d608 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d602:	4b16      	ldr	r3, [pc, #88]	; (800d65c <xTaskResumeAll+0x12c>)
 800d604:	2201      	movs	r2, #1
 800d606:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	3b01      	subs	r3, #1
 800d60c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1f1      	bne.n	800d5f8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d614:	4b12      	ldr	r3, [pc, #72]	; (800d660 <xTaskResumeAll+0x130>)
 800d616:	2200      	movs	r2, #0
 800d618:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d61a:	4b10      	ldr	r3, [pc, #64]	; (800d65c <xTaskResumeAll+0x12c>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d009      	beq.n	800d636 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d622:	2301      	movs	r3, #1
 800d624:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d626:	4b0f      	ldr	r3, [pc, #60]	; (800d664 <xTaskResumeAll+0x134>)
 800d628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d62c:	601a      	str	r2, [r3, #0]
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d636:	f000 fe95 	bl	800e364 <vPortExitCritical>

	return xAlreadyYielded;
 800d63a:	68bb      	ldr	r3, [r7, #8]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	20000898 	.word	0x20000898
 800d648:	20000870 	.word	0x20000870
 800d64c:	20000830 	.word	0x20000830
 800d650:	20000878 	.word	0x20000878
 800d654:	20000774 	.word	0x20000774
 800d658:	20000770 	.word	0x20000770
 800d65c:	20000884 	.word	0x20000884
 800d660:	20000880 	.word	0x20000880
 800d664:	e000ed04 	.word	0xe000ed04

0800d668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d66e:	2300      	movs	r3, #0
 800d670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d672:	4b4e      	ldr	r3, [pc, #312]	; (800d7ac <xTaskIncrementTick+0x144>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	f040 808e 	bne.w	800d798 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d67c:	4b4c      	ldr	r3, [pc, #304]	; (800d7b0 <xTaskIncrementTick+0x148>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3301      	adds	r3, #1
 800d682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d684:	4a4a      	ldr	r2, [pc, #296]	; (800d7b0 <xTaskIncrementTick+0x148>)
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d120      	bne.n	800d6d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d690:	4b48      	ldr	r3, [pc, #288]	; (800d7b4 <xTaskIncrementTick+0x14c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00a      	beq.n	800d6b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69e:	f383 8811 	msr	BASEPRI, r3
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	f3bf 8f4f 	dsb	sy
 800d6aa:	603b      	str	r3, [r7, #0]
}
 800d6ac:	bf00      	nop
 800d6ae:	e7fe      	b.n	800d6ae <xTaskIncrementTick+0x46>
 800d6b0:	4b40      	ldr	r3, [pc, #256]	; (800d7b4 <xTaskIncrementTick+0x14c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	60fb      	str	r3, [r7, #12]
 800d6b6:	4b40      	ldr	r3, [pc, #256]	; (800d7b8 <xTaskIncrementTick+0x150>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a3e      	ldr	r2, [pc, #248]	; (800d7b4 <xTaskIncrementTick+0x14c>)
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	4a3e      	ldr	r2, [pc, #248]	; (800d7b8 <xTaskIncrementTick+0x150>)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6013      	str	r3, [r2, #0]
 800d6c4:	4b3d      	ldr	r3, [pc, #244]	; (800d7bc <xTaskIncrementTick+0x154>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	4a3c      	ldr	r2, [pc, #240]	; (800d7bc <xTaskIncrementTick+0x154>)
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	f000 faa9 	bl	800dc24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6d2:	4b3b      	ldr	r3, [pc, #236]	; (800d7c0 <xTaskIncrementTick+0x158>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	693a      	ldr	r2, [r7, #16]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d348      	bcc.n	800d76e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6dc:	4b35      	ldr	r3, [pc, #212]	; (800d7b4 <xTaskIncrementTick+0x14c>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d104      	bne.n	800d6f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6e6:	4b36      	ldr	r3, [pc, #216]	; (800d7c0 <xTaskIncrementTick+0x158>)
 800d6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ec:	601a      	str	r2, [r3, #0]
					break;
 800d6ee:	e03e      	b.n	800d76e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6f0:	4b30      	ldr	r3, [pc, #192]	; (800d7b4 <xTaskIncrementTick+0x14c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	429a      	cmp	r2, r3
 800d706:	d203      	bcs.n	800d710 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d708:	4a2d      	ldr	r2, [pc, #180]	; (800d7c0 <xTaskIncrementTick+0x158>)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d70e:	e02e      	b.n	800d76e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	3304      	adds	r3, #4
 800d714:	4618      	mov	r0, r3
 800d716:	f7fe ff11 	bl	800c53c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d004      	beq.n	800d72c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	3318      	adds	r3, #24
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe ff08 	bl	800c53c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d730:	2201      	movs	r2, #1
 800d732:	409a      	lsls	r2, r3
 800d734:	4b23      	ldr	r3, [pc, #140]	; (800d7c4 <xTaskIncrementTick+0x15c>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4313      	orrs	r3, r2
 800d73a:	4a22      	ldr	r2, [pc, #136]	; (800d7c4 <xTaskIncrementTick+0x15c>)
 800d73c:	6013      	str	r3, [r2, #0]
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d742:	4613      	mov	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4a1f      	ldr	r2, [pc, #124]	; (800d7c8 <xTaskIncrementTick+0x160>)
 800d74c:	441a      	add	r2, r3
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	3304      	adds	r3, #4
 800d752:	4619      	mov	r1, r3
 800d754:	4610      	mov	r0, r2
 800d756:	f7fe fe94 	bl	800c482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75e:	4b1b      	ldr	r3, [pc, #108]	; (800d7cc <xTaskIncrementTick+0x164>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d764:	429a      	cmp	r2, r3
 800d766:	d3b9      	bcc.n	800d6dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d768:	2301      	movs	r3, #1
 800d76a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d76c:	e7b6      	b.n	800d6dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d76e:	4b17      	ldr	r3, [pc, #92]	; (800d7cc <xTaskIncrementTick+0x164>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d774:	4914      	ldr	r1, [pc, #80]	; (800d7c8 <xTaskIncrementTick+0x160>)
 800d776:	4613      	mov	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4413      	add	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	440b      	add	r3, r1
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d901      	bls.n	800d78a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d786:	2301      	movs	r3, #1
 800d788:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d78a:	4b11      	ldr	r3, [pc, #68]	; (800d7d0 <xTaskIncrementTick+0x168>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d007      	beq.n	800d7a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d792:	2301      	movs	r3, #1
 800d794:	617b      	str	r3, [r7, #20]
 800d796:	e004      	b.n	800d7a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d798:	4b0e      	ldr	r3, [pc, #56]	; (800d7d4 <xTaskIncrementTick+0x16c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3301      	adds	r3, #1
 800d79e:	4a0d      	ldr	r2, [pc, #52]	; (800d7d4 <xTaskIncrementTick+0x16c>)
 800d7a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d7a2:	697b      	ldr	r3, [r7, #20]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3718      	adds	r7, #24
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	20000898 	.word	0x20000898
 800d7b0:	20000874 	.word	0x20000874
 800d7b4:	20000828 	.word	0x20000828
 800d7b8:	2000082c 	.word	0x2000082c
 800d7bc:	20000888 	.word	0x20000888
 800d7c0:	20000890 	.word	0x20000890
 800d7c4:	20000878 	.word	0x20000878
 800d7c8:	20000774 	.word	0x20000774
 800d7cc:	20000770 	.word	0x20000770
 800d7d0:	20000884 	.word	0x20000884
 800d7d4:	20000880 	.word	0x20000880

0800d7d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b087      	sub	sp, #28
 800d7dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d7de:	4b29      	ldr	r3, [pc, #164]	; (800d884 <vTaskSwitchContext+0xac>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d003      	beq.n	800d7ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d7e6:	4b28      	ldr	r3, [pc, #160]	; (800d888 <vTaskSwitchContext+0xb0>)
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7ec:	e044      	b.n	800d878 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d7ee:	4b26      	ldr	r3, [pc, #152]	; (800d888 <vTaskSwitchContext+0xb0>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f4:	4b25      	ldr	r3, [pc, #148]	; (800d88c <vTaskSwitchContext+0xb4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	fab3 f383 	clz	r3, r3
 800d800:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d802:	7afb      	ldrb	r3, [r7, #11]
 800d804:	f1c3 031f 	rsb	r3, r3, #31
 800d808:	617b      	str	r3, [r7, #20]
 800d80a:	4921      	ldr	r1, [pc, #132]	; (800d890 <vTaskSwitchContext+0xb8>)
 800d80c:	697a      	ldr	r2, [r7, #20]
 800d80e:	4613      	mov	r3, r2
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4413      	add	r3, r2
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	440b      	add	r3, r1
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10a      	bne.n	800d834 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	607b      	str	r3, [r7, #4]
}
 800d830:	bf00      	nop
 800d832:	e7fe      	b.n	800d832 <vTaskSwitchContext+0x5a>
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	4613      	mov	r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4413      	add	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4a14      	ldr	r2, [pc, #80]	; (800d890 <vTaskSwitchContext+0xb8>)
 800d840:	4413      	add	r3, r2
 800d842:	613b      	str	r3, [r7, #16]
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	685a      	ldr	r2, [r3, #4]
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	605a      	str	r2, [r3, #4]
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	3308      	adds	r3, #8
 800d856:	429a      	cmp	r2, r3
 800d858:	d104      	bne.n	800d864 <vTaskSwitchContext+0x8c>
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	685a      	ldr	r2, [r3, #4]
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	605a      	str	r2, [r3, #4]
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	4a0a      	ldr	r2, [pc, #40]	; (800d894 <vTaskSwitchContext+0xbc>)
 800d86c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d86e:	4b09      	ldr	r3, [pc, #36]	; (800d894 <vTaskSwitchContext+0xbc>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	334c      	adds	r3, #76	; 0x4c
 800d874:	4a08      	ldr	r2, [pc, #32]	; (800d898 <vTaskSwitchContext+0xc0>)
 800d876:	6013      	str	r3, [r2, #0]
}
 800d878:	bf00      	nop
 800d87a:	371c      	adds	r7, #28
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	20000898 	.word	0x20000898
 800d888:	20000884 	.word	0x20000884
 800d88c:	20000878 	.word	0x20000878
 800d890:	20000774 	.word	0x20000774
 800d894:	20000770 	.word	0x20000770
 800d898:	20000110 	.word	0x20000110

0800d89c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	60fb      	str	r3, [r7, #12]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8c2:	4b07      	ldr	r3, [pc, #28]	; (800d8e0 <vTaskPlaceOnEventList+0x44>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3318      	adds	r3, #24
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7fe fdfd 	bl	800c4ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	6838      	ldr	r0, [r7, #0]
 800d8d4:	f000 fb82 	bl	800dfdc <prvAddCurrentTaskToDelayedList>
}
 800d8d8:	bf00      	nop
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	20000770 	.word	0x20000770

0800d8e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b086      	sub	sp, #24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10a      	bne.n	800d910 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	60fb      	str	r3, [r7, #12]
}
 800d90c:	bf00      	nop
 800d90e:	e7fe      	b.n	800d90e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	3318      	adds	r3, #24
 800d914:	4618      	mov	r0, r3
 800d916:	f7fe fe11 	bl	800c53c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d91a:	4b1d      	ldr	r3, [pc, #116]	; (800d990 <xTaskRemoveFromEventList+0xac>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d11c      	bne.n	800d95c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	3304      	adds	r3, #4
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe fe08 	bl	800c53c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d930:	2201      	movs	r2, #1
 800d932:	409a      	lsls	r2, r3
 800d934:	4b17      	ldr	r3, [pc, #92]	; (800d994 <xTaskRemoveFromEventList+0xb0>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4313      	orrs	r3, r2
 800d93a:	4a16      	ldr	r2, [pc, #88]	; (800d994 <xTaskRemoveFromEventList+0xb0>)
 800d93c:	6013      	str	r3, [r2, #0]
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d942:	4613      	mov	r3, r2
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	4413      	add	r3, r2
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	4a13      	ldr	r2, [pc, #76]	; (800d998 <xTaskRemoveFromEventList+0xb4>)
 800d94c:	441a      	add	r2, r3
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	3304      	adds	r3, #4
 800d952:	4619      	mov	r1, r3
 800d954:	4610      	mov	r0, r2
 800d956:	f7fe fd94 	bl	800c482 <vListInsertEnd>
 800d95a:	e005      	b.n	800d968 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	3318      	adds	r3, #24
 800d960:	4619      	mov	r1, r3
 800d962:	480e      	ldr	r0, [pc, #56]	; (800d99c <xTaskRemoveFromEventList+0xb8>)
 800d964:	f7fe fd8d 	bl	800c482 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d96c:	4b0c      	ldr	r3, [pc, #48]	; (800d9a0 <xTaskRemoveFromEventList+0xbc>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d972:	429a      	cmp	r2, r3
 800d974:	d905      	bls.n	800d982 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d976:	2301      	movs	r3, #1
 800d978:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d97a:	4b0a      	ldr	r3, [pc, #40]	; (800d9a4 <xTaskRemoveFromEventList+0xc0>)
 800d97c:	2201      	movs	r2, #1
 800d97e:	601a      	str	r2, [r3, #0]
 800d980:	e001      	b.n	800d986 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d982:	2300      	movs	r3, #0
 800d984:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d986:	697b      	ldr	r3, [r7, #20]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3718      	adds	r7, #24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	20000898 	.word	0x20000898
 800d994:	20000878 	.word	0x20000878
 800d998:	20000774 	.word	0x20000774
 800d99c:	20000830 	.word	0x20000830
 800d9a0:	20000770 	.word	0x20000770
 800d9a4:	20000884 	.word	0x20000884

0800d9a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9b0:	4b06      	ldr	r3, [pc, #24]	; (800d9cc <vTaskInternalSetTimeOutState+0x24>)
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9b8:	4b05      	ldr	r3, [pc, #20]	; (800d9d0 <vTaskInternalSetTimeOutState+0x28>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	605a      	str	r2, [r3, #4]
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	20000888 	.word	0x20000888
 800d9d0:	20000874 	.word	0x20000874

0800d9d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b088      	sub	sp, #32
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10a      	bne.n	800d9fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	613b      	str	r3, [r7, #16]
}
 800d9f6:	bf00      	nop
 800d9f8:	e7fe      	b.n	800d9f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10a      	bne.n	800da16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800da00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	60fb      	str	r3, [r7, #12]
}
 800da12:	bf00      	nop
 800da14:	e7fe      	b.n	800da14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800da16:	f000 fc75 	bl	800e304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da1a:	4b1d      	ldr	r3, [pc, #116]	; (800da90 <xTaskCheckForTimeOut+0xbc>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	69ba      	ldr	r2, [r7, #24]
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da32:	d102      	bne.n	800da3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da34:	2300      	movs	r3, #0
 800da36:	61fb      	str	r3, [r7, #28]
 800da38:	e023      	b.n	800da82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	4b15      	ldr	r3, [pc, #84]	; (800da94 <xTaskCheckForTimeOut+0xc0>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	429a      	cmp	r2, r3
 800da44:	d007      	beq.n	800da56 <xTaskCheckForTimeOut+0x82>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	69ba      	ldr	r2, [r7, #24]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d302      	bcc.n	800da56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da50:	2301      	movs	r3, #1
 800da52:	61fb      	str	r3, [r7, #28]
 800da54:	e015      	b.n	800da82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	697a      	ldr	r2, [r7, #20]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d20b      	bcs.n	800da78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	1ad2      	subs	r2, r2, r3
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff ff9b 	bl	800d9a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da72:	2300      	movs	r3, #0
 800da74:	61fb      	str	r3, [r7, #28]
 800da76:	e004      	b.n	800da82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	2200      	movs	r2, #0
 800da7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800da7e:	2301      	movs	r3, #1
 800da80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800da82:	f000 fc6f 	bl	800e364 <vPortExitCritical>

	return xReturn;
 800da86:	69fb      	ldr	r3, [r7, #28]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3720      	adds	r7, #32
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	20000874 	.word	0x20000874
 800da94:	20000888 	.word	0x20000888

0800da98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800da98:	b480      	push	{r7}
 800da9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800da9c:	4b03      	ldr	r3, [pc, #12]	; (800daac <vTaskMissedYield+0x14>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	601a      	str	r2, [r3, #0]
}
 800daa2:	bf00      	nop
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr
 800daac:	20000884 	.word	0x20000884

0800dab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dab8:	f000 f852 	bl	800db60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dabc:	4b06      	ldr	r3, [pc, #24]	; (800dad8 <prvIdleTask+0x28>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d9f9      	bls.n	800dab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dac4:	4b05      	ldr	r3, [pc, #20]	; (800dadc <prvIdleTask+0x2c>)
 800dac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daca:	601a      	str	r2, [r3, #0]
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dad4:	e7f0      	b.n	800dab8 <prvIdleTask+0x8>
 800dad6:	bf00      	nop
 800dad8:	20000774 	.word	0x20000774
 800dadc:	e000ed04 	.word	0xe000ed04

0800dae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dae6:	2300      	movs	r3, #0
 800dae8:	607b      	str	r3, [r7, #4]
 800daea:	e00c      	b.n	800db06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	4613      	mov	r3, r2
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	4413      	add	r3, r2
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4a12      	ldr	r2, [pc, #72]	; (800db40 <prvInitialiseTaskLists+0x60>)
 800daf8:	4413      	add	r3, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fe fc94 	bl	800c428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3301      	adds	r3, #1
 800db04:	607b      	str	r3, [r7, #4]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b06      	cmp	r3, #6
 800db0a:	d9ef      	bls.n	800daec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db0c:	480d      	ldr	r0, [pc, #52]	; (800db44 <prvInitialiseTaskLists+0x64>)
 800db0e:	f7fe fc8b 	bl	800c428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db12:	480d      	ldr	r0, [pc, #52]	; (800db48 <prvInitialiseTaskLists+0x68>)
 800db14:	f7fe fc88 	bl	800c428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db18:	480c      	ldr	r0, [pc, #48]	; (800db4c <prvInitialiseTaskLists+0x6c>)
 800db1a:	f7fe fc85 	bl	800c428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db1e:	480c      	ldr	r0, [pc, #48]	; (800db50 <prvInitialiseTaskLists+0x70>)
 800db20:	f7fe fc82 	bl	800c428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db24:	480b      	ldr	r0, [pc, #44]	; (800db54 <prvInitialiseTaskLists+0x74>)
 800db26:	f7fe fc7f 	bl	800c428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db2a:	4b0b      	ldr	r3, [pc, #44]	; (800db58 <prvInitialiseTaskLists+0x78>)
 800db2c:	4a05      	ldr	r2, [pc, #20]	; (800db44 <prvInitialiseTaskLists+0x64>)
 800db2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db30:	4b0a      	ldr	r3, [pc, #40]	; (800db5c <prvInitialiseTaskLists+0x7c>)
 800db32:	4a05      	ldr	r2, [pc, #20]	; (800db48 <prvInitialiseTaskLists+0x68>)
 800db34:	601a      	str	r2, [r3, #0]
}
 800db36:	bf00      	nop
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	20000774 	.word	0x20000774
 800db44:	20000800 	.word	0x20000800
 800db48:	20000814 	.word	0x20000814
 800db4c:	20000830 	.word	0x20000830
 800db50:	20000844 	.word	0x20000844
 800db54:	2000085c 	.word	0x2000085c
 800db58:	20000828 	.word	0x20000828
 800db5c:	2000082c 	.word	0x2000082c

0800db60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db66:	e019      	b.n	800db9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db68:	f000 fbcc 	bl	800e304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db6c:	4b10      	ldr	r3, [pc, #64]	; (800dbb0 <prvCheckTasksWaitingTermination+0x50>)
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	3304      	adds	r3, #4
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fe fcdf 	bl	800c53c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800db7e:	4b0d      	ldr	r3, [pc, #52]	; (800dbb4 <prvCheckTasksWaitingTermination+0x54>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	3b01      	subs	r3, #1
 800db84:	4a0b      	ldr	r2, [pc, #44]	; (800dbb4 <prvCheckTasksWaitingTermination+0x54>)
 800db86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800db88:	4b0b      	ldr	r3, [pc, #44]	; (800dbb8 <prvCheckTasksWaitingTermination+0x58>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	3b01      	subs	r3, #1
 800db8e:	4a0a      	ldr	r2, [pc, #40]	; (800dbb8 <prvCheckTasksWaitingTermination+0x58>)
 800db90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800db92:	f000 fbe7 	bl	800e364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 f810 	bl	800dbbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db9c:	4b06      	ldr	r3, [pc, #24]	; (800dbb8 <prvCheckTasksWaitingTermination+0x58>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1e1      	bne.n	800db68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dba4:	bf00      	nop
 800dba6:	bf00      	nop
 800dba8:	3708      	adds	r7, #8
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	20000844 	.word	0x20000844
 800dbb4:	20000870 	.word	0x20000870
 800dbb8:	20000858 	.word	0x20000858

0800dbbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	334c      	adds	r3, #76	; 0x4c
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f001 fc81 	bl	800f4d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d108      	bne.n	800dbea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 fd7f 	bl	800e6e0 <vPortFree>
				vPortFree( pxTCB );
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 fd7c 	bl	800e6e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dbe8:	e018      	b.n	800dc1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d103      	bne.n	800dbfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f000 fd73 	bl	800e6e0 <vPortFree>
	}
 800dbfa:	e00f      	b.n	800dc1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d00a      	beq.n	800dc1c <prvDeleteTCB+0x60>
	__asm volatile
 800dc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	60fb      	str	r3, [r7, #12]
}
 800dc18:	bf00      	nop
 800dc1a:	e7fe      	b.n	800dc1a <prvDeleteTCB+0x5e>
	}
 800dc1c:	bf00      	nop
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc2a:	4b0c      	ldr	r3, [pc, #48]	; (800dc5c <prvResetNextTaskUnblockTime+0x38>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d104      	bne.n	800dc3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc34:	4b0a      	ldr	r3, [pc, #40]	; (800dc60 <prvResetNextTaskUnblockTime+0x3c>)
 800dc36:	f04f 32ff 	mov.w	r2, #4294967295
 800dc3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc3c:	e008      	b.n	800dc50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc3e:	4b07      	ldr	r3, [pc, #28]	; (800dc5c <prvResetNextTaskUnblockTime+0x38>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	4a04      	ldr	r2, [pc, #16]	; (800dc60 <prvResetNextTaskUnblockTime+0x3c>)
 800dc4e:	6013      	str	r3, [r2, #0]
}
 800dc50:	bf00      	nop
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr
 800dc5c:	20000828 	.word	0x20000828
 800dc60:	20000890 	.word	0x20000890

0800dc64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc6a:	4b0b      	ldr	r3, [pc, #44]	; (800dc98 <xTaskGetSchedulerState+0x34>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d102      	bne.n	800dc78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dc72:	2301      	movs	r3, #1
 800dc74:	607b      	str	r3, [r7, #4]
 800dc76:	e008      	b.n	800dc8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc78:	4b08      	ldr	r3, [pc, #32]	; (800dc9c <xTaskGetSchedulerState+0x38>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d102      	bne.n	800dc86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dc80:	2302      	movs	r3, #2
 800dc82:	607b      	str	r3, [r7, #4]
 800dc84:	e001      	b.n	800dc8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dc86:	2300      	movs	r3, #0
 800dc88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dc8a:	687b      	ldr	r3, [r7, #4]
	}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr
 800dc98:	2000087c 	.word	0x2000087c
 800dc9c:	20000898 	.word	0x20000898

0800dca0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dcac:	2300      	movs	r3, #0
 800dcae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d05e      	beq.n	800dd74 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcba:	4b31      	ldr	r3, [pc, #196]	; (800dd80 <xTaskPriorityInherit+0xe0>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d24e      	bcs.n	800dd62 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	db06      	blt.n	800dcda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dccc:	4b2c      	ldr	r3, [pc, #176]	; (800dd80 <xTaskPriorityInherit+0xe0>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd2:	f1c3 0207 	rsb	r2, r3, #7
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	6959      	ldr	r1, [r3, #20]
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce2:	4613      	mov	r3, r2
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	4413      	add	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4a26      	ldr	r2, [pc, #152]	; (800dd84 <xTaskPriorityInherit+0xe4>)
 800dcec:	4413      	add	r3, r2
 800dcee:	4299      	cmp	r1, r3
 800dcf0:	d12f      	bne.n	800dd52 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fc20 	bl	800c53c <uxListRemove>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10a      	bne.n	800dd18 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd06:	2201      	movs	r2, #1
 800dd08:	fa02 f303 	lsl.w	r3, r2, r3
 800dd0c:	43da      	mvns	r2, r3
 800dd0e:	4b1e      	ldr	r3, [pc, #120]	; (800dd88 <xTaskPriorityInherit+0xe8>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4013      	ands	r3, r2
 800dd14:	4a1c      	ldr	r2, [pc, #112]	; (800dd88 <xTaskPriorityInherit+0xe8>)
 800dd16:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd18:	4b19      	ldr	r3, [pc, #100]	; (800dd80 <xTaskPriorityInherit+0xe0>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd26:	2201      	movs	r2, #1
 800dd28:	409a      	lsls	r2, r3
 800dd2a:	4b17      	ldr	r3, [pc, #92]	; (800dd88 <xTaskPriorityInherit+0xe8>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	4a15      	ldr	r2, [pc, #84]	; (800dd88 <xTaskPriorityInherit+0xe8>)
 800dd32:	6013      	str	r3, [r2, #0]
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd38:	4613      	mov	r3, r2
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4413      	add	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4a10      	ldr	r2, [pc, #64]	; (800dd84 <xTaskPriorityInherit+0xe4>)
 800dd42:	441a      	add	r2, r3
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	3304      	adds	r3, #4
 800dd48:	4619      	mov	r1, r3
 800dd4a:	4610      	mov	r0, r2
 800dd4c:	f7fe fb99 	bl	800c482 <vListInsertEnd>
 800dd50:	e004      	b.n	800dd5c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd52:	4b0b      	ldr	r3, [pc, #44]	; (800dd80 <xTaskPriorityInherit+0xe0>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	e008      	b.n	800dd74 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd66:	4b06      	ldr	r3, [pc, #24]	; (800dd80 <xTaskPriorityInherit+0xe0>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d201      	bcs.n	800dd74 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dd70:	2301      	movs	r3, #1
 800dd72:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd74:	68fb      	ldr	r3, [r7, #12]
	}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	20000770 	.word	0x20000770
 800dd84:	20000774 	.word	0x20000774
 800dd88:	20000878 	.word	0x20000878

0800dd8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d06e      	beq.n	800de80 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dda2:	4b3a      	ldr	r3, [pc, #232]	; (800de8c <xTaskPriorityDisinherit+0x100>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	693a      	ldr	r2, [r7, #16]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d00a      	beq.n	800ddc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	60fb      	str	r3, [r7, #12]
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10a      	bne.n	800dde0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ddca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddce:	f383 8811 	msr	BASEPRI, r3
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	60bb      	str	r3, [r7, #8]
}
 800dddc:	bf00      	nop
 800ddde:	e7fe      	b.n	800ddde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dde4:	1e5a      	subs	r2, r3, #1
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d044      	beq.n	800de80 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d140      	bne.n	800de80 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	3304      	adds	r3, #4
 800de02:	4618      	mov	r0, r3
 800de04:	f7fe fb9a 	bl	800c53c <uxListRemove>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d115      	bne.n	800de3a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de12:	491f      	ldr	r1, [pc, #124]	; (800de90 <xTaskPriorityDisinherit+0x104>)
 800de14:	4613      	mov	r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4413      	add	r3, r2
 800de1a:	009b      	lsls	r3, r3, #2
 800de1c:	440b      	add	r3, r1
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d10a      	bne.n	800de3a <xTaskPriorityDisinherit+0xae>
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de28:	2201      	movs	r2, #1
 800de2a:	fa02 f303 	lsl.w	r3, r2, r3
 800de2e:	43da      	mvns	r2, r3
 800de30:	4b18      	ldr	r3, [pc, #96]	; (800de94 <xTaskPriorityDisinherit+0x108>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4013      	ands	r3, r2
 800de36:	4a17      	ldr	r2, [pc, #92]	; (800de94 <xTaskPriorityDisinherit+0x108>)
 800de38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de46:	f1c3 0207 	rsb	r2, r3, #7
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de52:	2201      	movs	r2, #1
 800de54:	409a      	lsls	r2, r3
 800de56:	4b0f      	ldr	r3, [pc, #60]	; (800de94 <xTaskPriorityDisinherit+0x108>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	4a0d      	ldr	r2, [pc, #52]	; (800de94 <xTaskPriorityDisinherit+0x108>)
 800de5e:	6013      	str	r3, [r2, #0]
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de64:	4613      	mov	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	4a08      	ldr	r2, [pc, #32]	; (800de90 <xTaskPriorityDisinherit+0x104>)
 800de6e:	441a      	add	r2, r3
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	3304      	adds	r3, #4
 800de74:	4619      	mov	r1, r3
 800de76:	4610      	mov	r0, r2
 800de78:	f7fe fb03 	bl	800c482 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de7c:	2301      	movs	r3, #1
 800de7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de80:	697b      	ldr	r3, [r7, #20]
	}
 800de82:	4618      	mov	r0, r3
 800de84:	3718      	adds	r7, #24
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20000770 	.word	0x20000770
 800de90:	20000774 	.word	0x20000774
 800de94:	20000878 	.word	0x20000878

0800de98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dea6:	2301      	movs	r3, #1
 800dea8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d077      	beq.n	800dfa0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10a      	bne.n	800dece <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800deb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	60fb      	str	r3, [r7, #12]
}
 800deca:	bf00      	nop
 800decc:	e7fe      	b.n	800decc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d902      	bls.n	800dede <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	61fb      	str	r3, [r7, #28]
 800dedc:	e002      	b.n	800dee4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dee2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee8:	69fa      	ldr	r2, [r7, #28]
 800deea:	429a      	cmp	r2, r3
 800deec:	d058      	beq.n	800dfa0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800def2:	697a      	ldr	r2, [r7, #20]
 800def4:	429a      	cmp	r2, r3
 800def6:	d153      	bne.n	800dfa0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800def8:	4b2b      	ldr	r3, [pc, #172]	; (800dfa8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	69ba      	ldr	r2, [r7, #24]
 800defe:	429a      	cmp	r2, r3
 800df00:	d10a      	bne.n	800df18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800df02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df06:	f383 8811 	msr	BASEPRI, r3
 800df0a:	f3bf 8f6f 	isb	sy
 800df0e:	f3bf 8f4f 	dsb	sy
 800df12:	60bb      	str	r3, [r7, #8]
}
 800df14:	bf00      	nop
 800df16:	e7fe      	b.n	800df16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	69fa      	ldr	r2, [r7, #28]
 800df22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	db04      	blt.n	800df36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	f1c3 0207 	rsb	r2, r3, #7
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	6959      	ldr	r1, [r3, #20]
 800df3a:	693a      	ldr	r2, [r7, #16]
 800df3c:	4613      	mov	r3, r2
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	4413      	add	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4a19      	ldr	r2, [pc, #100]	; (800dfac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800df46:	4413      	add	r3, r2
 800df48:	4299      	cmp	r1, r3
 800df4a:	d129      	bne.n	800dfa0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	3304      	adds	r3, #4
 800df50:	4618      	mov	r0, r3
 800df52:	f7fe faf3 	bl	800c53c <uxListRemove>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10a      	bne.n	800df72 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df60:	2201      	movs	r2, #1
 800df62:	fa02 f303 	lsl.w	r3, r2, r3
 800df66:	43da      	mvns	r2, r3
 800df68:	4b11      	ldr	r3, [pc, #68]	; (800dfb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4013      	ands	r3, r2
 800df6e:	4a10      	ldr	r2, [pc, #64]	; (800dfb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df70:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df76:	2201      	movs	r2, #1
 800df78:	409a      	lsls	r2, r3
 800df7a:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4313      	orrs	r3, r2
 800df80:	4a0b      	ldr	r2, [pc, #44]	; (800dfb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800df82:	6013      	str	r3, [r2, #0]
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df88:	4613      	mov	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	4413      	add	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4a06      	ldr	r2, [pc, #24]	; (800dfac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800df92:	441a      	add	r2, r3
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	3304      	adds	r3, #4
 800df98:	4619      	mov	r1, r3
 800df9a:	4610      	mov	r0, r2
 800df9c:	f7fe fa71 	bl	800c482 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfa0:	bf00      	nop
 800dfa2:	3720      	adds	r7, #32
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	20000770 	.word	0x20000770
 800dfac:	20000774 	.word	0x20000774
 800dfb0:	20000878 	.word	0x20000878

0800dfb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dfb4:	b480      	push	{r7}
 800dfb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dfb8:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d004      	beq.n	800dfca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dfc0:	4b05      	ldr	r3, [pc, #20]	; (800dfd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfc6:	3201      	adds	r2, #1
 800dfc8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800dfca:	4b03      	ldr	r3, [pc, #12]	; (800dfd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
	}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr
 800dfd8:	20000770 	.word	0x20000770

0800dfdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dfe6:	4b29      	ldr	r3, [pc, #164]	; (800e08c <prvAddCurrentTaskToDelayedList+0xb0>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfec:	4b28      	ldr	r3, [pc, #160]	; (800e090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	3304      	adds	r3, #4
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7fe faa2 	bl	800c53c <uxListRemove>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10b      	bne.n	800e016 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dffe:	4b24      	ldr	r3, [pc, #144]	; (800e090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e004:	2201      	movs	r2, #1
 800e006:	fa02 f303 	lsl.w	r3, r2, r3
 800e00a:	43da      	mvns	r2, r3
 800e00c:	4b21      	ldr	r3, [pc, #132]	; (800e094 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4013      	ands	r3, r2
 800e012:	4a20      	ldr	r2, [pc, #128]	; (800e094 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e014:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e01c:	d10a      	bne.n	800e034 <prvAddCurrentTaskToDelayedList+0x58>
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d007      	beq.n	800e034 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e024:	4b1a      	ldr	r3, [pc, #104]	; (800e090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	3304      	adds	r3, #4
 800e02a:	4619      	mov	r1, r3
 800e02c:	481a      	ldr	r0, [pc, #104]	; (800e098 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e02e:	f7fe fa28 	bl	800c482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e032:	e026      	b.n	800e082 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e034:	68fa      	ldr	r2, [r7, #12]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4413      	add	r3, r2
 800e03a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e03c:	4b14      	ldr	r3, [pc, #80]	; (800e090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	68ba      	ldr	r2, [r7, #8]
 800e042:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e044:	68ba      	ldr	r2, [r7, #8]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d209      	bcs.n	800e060 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e04c:	4b13      	ldr	r3, [pc, #76]	; (800e09c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	4b0f      	ldr	r3, [pc, #60]	; (800e090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	3304      	adds	r3, #4
 800e056:	4619      	mov	r1, r3
 800e058:	4610      	mov	r0, r2
 800e05a:	f7fe fa36 	bl	800c4ca <vListInsert>
}
 800e05e:	e010      	b.n	800e082 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e060:	4b0f      	ldr	r3, [pc, #60]	; (800e0a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	4b0a      	ldr	r3, [pc, #40]	; (800e090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3304      	adds	r3, #4
 800e06a:	4619      	mov	r1, r3
 800e06c:	4610      	mov	r0, r2
 800e06e:	f7fe fa2c 	bl	800c4ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e072:	4b0c      	ldr	r3, [pc, #48]	; (800e0a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d202      	bcs.n	800e082 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e07c:	4a09      	ldr	r2, [pc, #36]	; (800e0a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	6013      	str	r3, [r2, #0]
}
 800e082:	bf00      	nop
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	20000874 	.word	0x20000874
 800e090:	20000770 	.word	0x20000770
 800e094:	20000878 	.word	0x20000878
 800e098:	2000085c 	.word	0x2000085c
 800e09c:	2000082c 	.word	0x2000082c
 800e0a0:	20000828 	.word	0x20000828
 800e0a4:	20000890 	.word	0x20000890

0800e0a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	3b04      	subs	r3, #4
 800e0b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e0c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	3b04      	subs	r3, #4
 800e0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	f023 0201 	bic.w	r2, r3, #1
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	3b04      	subs	r3, #4
 800e0d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e0d8:	4a0c      	ldr	r2, [pc, #48]	; (800e10c <pxPortInitialiseStack+0x64>)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	3b14      	subs	r3, #20
 800e0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3b04      	subs	r3, #4
 800e0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f06f 0202 	mvn.w	r2, #2
 800e0f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	3b20      	subs	r3, #32
 800e0fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
}
 800e100:	4618      	mov	r0, r3
 800e102:	3714      	adds	r7, #20
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	0800e111 	.word	0x0800e111

0800e110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e116:	2300      	movs	r3, #0
 800e118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e11a:	4b12      	ldr	r3, [pc, #72]	; (800e164 <prvTaskExitError+0x54>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e122:	d00a      	beq.n	800e13a <prvTaskExitError+0x2a>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	60fb      	str	r3, [r7, #12]
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <prvTaskExitError+0x28>
	__asm volatile
 800e13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13e:	f383 8811 	msr	BASEPRI, r3
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	f3bf 8f4f 	dsb	sy
 800e14a:	60bb      	str	r3, [r7, #8]
}
 800e14c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e14e:	bf00      	nop
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d0fc      	beq.n	800e150 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e156:	bf00      	nop
 800e158:	bf00      	nop
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr
 800e164:	200000a8 	.word	0x200000a8
	...

0800e170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e170:	4b07      	ldr	r3, [pc, #28]	; (800e190 <pxCurrentTCBConst2>)
 800e172:	6819      	ldr	r1, [r3, #0]
 800e174:	6808      	ldr	r0, [r1, #0]
 800e176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17a:	f380 8809 	msr	PSP, r0
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	f04f 0000 	mov.w	r0, #0
 800e186:	f380 8811 	msr	BASEPRI, r0
 800e18a:	4770      	bx	lr
 800e18c:	f3af 8000 	nop.w

0800e190 <pxCurrentTCBConst2>:
 800e190:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop

0800e198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e198:	4808      	ldr	r0, [pc, #32]	; (800e1bc <prvPortStartFirstTask+0x24>)
 800e19a:	6800      	ldr	r0, [r0, #0]
 800e19c:	6800      	ldr	r0, [r0, #0]
 800e19e:	f380 8808 	msr	MSP, r0
 800e1a2:	f04f 0000 	mov.w	r0, #0
 800e1a6:	f380 8814 	msr	CONTROL, r0
 800e1aa:	b662      	cpsie	i
 800e1ac:	b661      	cpsie	f
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	df00      	svc	0
 800e1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1ba:	bf00      	nop
 800e1bc:	e000ed08 	.word	0xe000ed08

0800e1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e1c6:	4b46      	ldr	r3, [pc, #280]	; (800e2e0 <xPortStartScheduler+0x120>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a46      	ldr	r2, [pc, #280]	; (800e2e4 <xPortStartScheduler+0x124>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d10a      	bne.n	800e1e6 <xPortStartScheduler+0x26>
	__asm volatile
 800e1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	613b      	str	r3, [r7, #16]
}
 800e1e2:	bf00      	nop
 800e1e4:	e7fe      	b.n	800e1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e1e6:	4b3e      	ldr	r3, [pc, #248]	; (800e2e0 <xPortStartScheduler+0x120>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a3f      	ldr	r2, [pc, #252]	; (800e2e8 <xPortStartScheduler+0x128>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d10a      	bne.n	800e206 <xPortStartScheduler+0x46>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	60fb      	str	r3, [r7, #12]
}
 800e202:	bf00      	nop
 800e204:	e7fe      	b.n	800e204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e206:	4b39      	ldr	r3, [pc, #228]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	22ff      	movs	r2, #255	; 0xff
 800e216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e220:	78fb      	ldrb	r3, [r7, #3]
 800e222:	b2db      	uxtb	r3, r3
 800e224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	4b31      	ldr	r3, [pc, #196]	; (800e2f0 <xPortStartScheduler+0x130>)
 800e22c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e22e:	4b31      	ldr	r3, [pc, #196]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e230:	2207      	movs	r2, #7
 800e232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e234:	e009      	b.n	800e24a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e236:	4b2f      	ldr	r3, [pc, #188]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3b01      	subs	r3, #1
 800e23c:	4a2d      	ldr	r2, [pc, #180]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e23e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	b2db      	uxtb	r3, r3
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	b2db      	uxtb	r3, r3
 800e248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e24a:	78fb      	ldrb	r3, [r7, #3]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e252:	2b80      	cmp	r3, #128	; 0x80
 800e254:	d0ef      	beq.n	800e236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e256:	4b27      	ldr	r3, [pc, #156]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f1c3 0307 	rsb	r3, r3, #7
 800e25e:	2b04      	cmp	r3, #4
 800e260:	d00a      	beq.n	800e278 <xPortStartScheduler+0xb8>
	__asm volatile
 800e262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	60bb      	str	r3, [r7, #8]
}
 800e274:	bf00      	nop
 800e276:	e7fe      	b.n	800e276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e278:	4b1e      	ldr	r3, [pc, #120]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	021b      	lsls	r3, r3, #8
 800e27e:	4a1d      	ldr	r2, [pc, #116]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e282:	4b1c      	ldr	r3, [pc, #112]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e28a:	4a1a      	ldr	r2, [pc, #104]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e28c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	b2da      	uxtb	r2, r3
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e296:	4b18      	ldr	r3, [pc, #96]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a17      	ldr	r2, [pc, #92]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e29c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e2a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2a2:	4b15      	ldr	r3, [pc, #84]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a14      	ldr	r2, [pc, #80]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e2a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e2ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2ae:	f000 f8dd 	bl	800e46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2b2:	4b12      	ldr	r3, [pc, #72]	; (800e2fc <xPortStartScheduler+0x13c>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2b8:	f000 f8fc 	bl	800e4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2bc:	4b10      	ldr	r3, [pc, #64]	; (800e300 <xPortStartScheduler+0x140>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a0f      	ldr	r2, [pc, #60]	; (800e300 <xPortStartScheduler+0x140>)
 800e2c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e2c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e2c8:	f7ff ff66 	bl	800e198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e2cc:	f7ff fa84 	bl	800d7d8 <vTaskSwitchContext>
	prvTaskExitError();
 800e2d0:	f7ff ff1e 	bl	800e110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e2d4:	2300      	movs	r3, #0
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3718      	adds	r7, #24
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	e000ed00 	.word	0xe000ed00
 800e2e4:	410fc271 	.word	0x410fc271
 800e2e8:	410fc270 	.word	0x410fc270
 800e2ec:	e000e400 	.word	0xe000e400
 800e2f0:	2000089c 	.word	0x2000089c
 800e2f4:	200008a0 	.word	0x200008a0
 800e2f8:	e000ed20 	.word	0xe000ed20
 800e2fc:	200000a8 	.word	0x200000a8
 800e300:	e000ef34 	.word	0xe000ef34

0800e304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
	__asm volatile
 800e30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	607b      	str	r3, [r7, #4]
}
 800e31c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <vPortEnterCritical+0x58>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3301      	adds	r3, #1
 800e324:	4a0d      	ldr	r2, [pc, #52]	; (800e35c <vPortEnterCritical+0x58>)
 800e326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e328:	4b0c      	ldr	r3, [pc, #48]	; (800e35c <vPortEnterCritical+0x58>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d10f      	bne.n	800e350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e330:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <vPortEnterCritical+0x5c>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00a      	beq.n	800e350 <vPortEnterCritical+0x4c>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	603b      	str	r3, [r7, #0]
}
 800e34c:	bf00      	nop
 800e34e:	e7fe      	b.n	800e34e <vPortEnterCritical+0x4a>
	}
}
 800e350:	bf00      	nop
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr
 800e35c:	200000a8 	.word	0x200000a8
 800e360:	e000ed04 	.word	0xe000ed04

0800e364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e36a:	4b12      	ldr	r3, [pc, #72]	; (800e3b4 <vPortExitCritical+0x50>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d10a      	bne.n	800e388 <vPortExitCritical+0x24>
	__asm volatile
 800e372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	607b      	str	r3, [r7, #4]
}
 800e384:	bf00      	nop
 800e386:	e7fe      	b.n	800e386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e388:	4b0a      	ldr	r3, [pc, #40]	; (800e3b4 <vPortExitCritical+0x50>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	4a09      	ldr	r2, [pc, #36]	; (800e3b4 <vPortExitCritical+0x50>)
 800e390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e392:	4b08      	ldr	r3, [pc, #32]	; (800e3b4 <vPortExitCritical+0x50>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d105      	bne.n	800e3a6 <vPortExitCritical+0x42>
 800e39a:	2300      	movs	r3, #0
 800e39c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	f383 8811 	msr	BASEPRI, r3
}
 800e3a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3a6:	bf00      	nop
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	200000a8 	.word	0x200000a8
	...

0800e3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e3c0:	f3ef 8009 	mrs	r0, PSP
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	4b15      	ldr	r3, [pc, #84]	; (800e420 <pxCurrentTCBConst>)
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	f01e 0f10 	tst.w	lr, #16
 800e3d0:	bf08      	it	eq
 800e3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3da:	6010      	str	r0, [r2, #0]
 800e3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e3e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e3e4:	f380 8811 	msr	BASEPRI, r0
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	f7ff f9f2 	bl	800d7d8 <vTaskSwitchContext>
 800e3f4:	f04f 0000 	mov.w	r0, #0
 800e3f8:	f380 8811 	msr	BASEPRI, r0
 800e3fc:	bc09      	pop	{r0, r3}
 800e3fe:	6819      	ldr	r1, [r3, #0]
 800e400:	6808      	ldr	r0, [r1, #0]
 800e402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e406:	f01e 0f10 	tst.w	lr, #16
 800e40a:	bf08      	it	eq
 800e40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e410:	f380 8809 	msr	PSP, r0
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	f3af 8000 	nop.w

0800e420 <pxCurrentTCBConst>:
 800e420:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop

0800e428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
	__asm volatile
 800e42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	607b      	str	r3, [r7, #4]
}
 800e440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e442:	f7ff f911 	bl	800d668 <xTaskIncrementTick>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d003      	beq.n	800e454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e44c:	4b06      	ldr	r3, [pc, #24]	; (800e468 <SysTick_Handler+0x40>)
 800e44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	2300      	movs	r3, #0
 800e456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	f383 8811 	msr	BASEPRI, r3
}
 800e45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e460:	bf00      	nop
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	e000ed04 	.word	0xe000ed04

0800e46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e46c:	b480      	push	{r7}
 800e46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e470:	4b0b      	ldr	r3, [pc, #44]	; (800e4a0 <vPortSetupTimerInterrupt+0x34>)
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e476:	4b0b      	ldr	r3, [pc, #44]	; (800e4a4 <vPortSetupTimerInterrupt+0x38>)
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e47c:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <vPortSetupTimerInterrupt+0x3c>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4a0a      	ldr	r2, [pc, #40]	; (800e4ac <vPortSetupTimerInterrupt+0x40>)
 800e482:	fba2 2303 	umull	r2, r3, r2, r3
 800e486:	099b      	lsrs	r3, r3, #6
 800e488:	4a09      	ldr	r2, [pc, #36]	; (800e4b0 <vPortSetupTimerInterrupt+0x44>)
 800e48a:	3b01      	subs	r3, #1
 800e48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e48e:	4b04      	ldr	r3, [pc, #16]	; (800e4a0 <vPortSetupTimerInterrupt+0x34>)
 800e490:	2207      	movs	r2, #7
 800e492:	601a      	str	r2, [r3, #0]
}
 800e494:	bf00      	nop
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	e000e010 	.word	0xe000e010
 800e4a4:	e000e018 	.word	0xe000e018
 800e4a8:	2000000c 	.word	0x2000000c
 800e4ac:	10624dd3 	.word	0x10624dd3
 800e4b0:	e000e014 	.word	0xe000e014

0800e4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e4c4 <vPortEnableVFP+0x10>
 800e4b8:	6801      	ldr	r1, [r0, #0]
 800e4ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e4be:	6001      	str	r1, [r0, #0]
 800e4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e4c2:	bf00      	nop
 800e4c4:	e000ed88 	.word	0xe000ed88

0800e4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e4ce:	f3ef 8305 	mrs	r3, IPSR
 800e4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2b0f      	cmp	r3, #15
 800e4d8:	d914      	bls.n	800e504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e4da:	4a17      	ldr	r2, [pc, #92]	; (800e538 <vPortValidateInterruptPriority+0x70>)
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	4413      	add	r3, r2
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e4e4:	4b15      	ldr	r3, [pc, #84]	; (800e53c <vPortValidateInterruptPriority+0x74>)
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	7afa      	ldrb	r2, [r7, #11]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d20a      	bcs.n	800e504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	607b      	str	r3, [r7, #4]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e504:	4b0e      	ldr	r3, [pc, #56]	; (800e540 <vPortValidateInterruptPriority+0x78>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e50c:	4b0d      	ldr	r3, [pc, #52]	; (800e544 <vPortValidateInterruptPriority+0x7c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	429a      	cmp	r2, r3
 800e512:	d90a      	bls.n	800e52a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	603b      	str	r3, [r7, #0]
}
 800e526:	bf00      	nop
 800e528:	e7fe      	b.n	800e528 <vPortValidateInterruptPriority+0x60>
	}
 800e52a:	bf00      	nop
 800e52c:	3714      	adds	r7, #20
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	e000e3f0 	.word	0xe000e3f0
 800e53c:	2000089c 	.word	0x2000089c
 800e540:	e000ed0c 	.word	0xe000ed0c
 800e544:	200008a0 	.word	0x200008a0

0800e548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b08a      	sub	sp, #40	; 0x28
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e550:	2300      	movs	r3, #0
 800e552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e554:	f7fe ffde 	bl	800d514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e558:	4b5b      	ldr	r3, [pc, #364]	; (800e6c8 <pvPortMalloc+0x180>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d101      	bne.n	800e564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e560:	f000 f920 	bl	800e7a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e564:	4b59      	ldr	r3, [pc, #356]	; (800e6cc <pvPortMalloc+0x184>)
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4013      	ands	r3, r2
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f040 8093 	bne.w	800e698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d01d      	beq.n	800e5b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e578:	2208      	movs	r2, #8
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4413      	add	r3, r2
 800e57e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f003 0307 	and.w	r3, r3, #7
 800e586:	2b00      	cmp	r3, #0
 800e588:	d014      	beq.n	800e5b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f023 0307 	bic.w	r3, r3, #7
 800e590:	3308      	adds	r3, #8
 800e592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f003 0307 	and.w	r3, r3, #7
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00a      	beq.n	800e5b4 <pvPortMalloc+0x6c>
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	617b      	str	r3, [r7, #20]
}
 800e5b0:	bf00      	nop
 800e5b2:	e7fe      	b.n	800e5b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d06e      	beq.n	800e698 <pvPortMalloc+0x150>
 800e5ba:	4b45      	ldr	r3, [pc, #276]	; (800e6d0 <pvPortMalloc+0x188>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d869      	bhi.n	800e698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5c4:	4b43      	ldr	r3, [pc, #268]	; (800e6d4 <pvPortMalloc+0x18c>)
 800e5c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e5c8:	4b42      	ldr	r3, [pc, #264]	; (800e6d4 <pvPortMalloc+0x18c>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5ce:	e004      	b.n	800e5da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d903      	bls.n	800e5ec <pvPortMalloc+0xa4>
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1f1      	bne.n	800e5d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e5ec:	4b36      	ldr	r3, [pc, #216]	; (800e6c8 <pvPortMalloc+0x180>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d050      	beq.n	800e698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5f6:	6a3b      	ldr	r3, [r7, #32]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2208      	movs	r2, #8
 800e5fc:	4413      	add	r3, r2
 800e5fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	6a3b      	ldr	r3, [r7, #32]
 800e606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	1ad2      	subs	r2, r2, r3
 800e610:	2308      	movs	r3, #8
 800e612:	005b      	lsls	r3, r3, #1
 800e614:	429a      	cmp	r2, r3
 800e616:	d91f      	bls.n	800e658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4413      	add	r3, r2
 800e61e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	f003 0307 	and.w	r3, r3, #7
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00a      	beq.n	800e640 <pvPortMalloc+0xf8>
	__asm volatile
 800e62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	613b      	str	r3, [r7, #16]
}
 800e63c:	bf00      	nop
 800e63e:	e7fe      	b.n	800e63e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	685a      	ldr	r2, [r3, #4]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	1ad2      	subs	r2, r2, r3
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e652:	69b8      	ldr	r0, [r7, #24]
 800e654:	f000 f908 	bl	800e868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e658:	4b1d      	ldr	r3, [pc, #116]	; (800e6d0 <pvPortMalloc+0x188>)
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	4a1b      	ldr	r2, [pc, #108]	; (800e6d0 <pvPortMalloc+0x188>)
 800e664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e666:	4b1a      	ldr	r3, [pc, #104]	; (800e6d0 <pvPortMalloc+0x188>)
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	4b1b      	ldr	r3, [pc, #108]	; (800e6d8 <pvPortMalloc+0x190>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d203      	bcs.n	800e67a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e672:	4b17      	ldr	r3, [pc, #92]	; (800e6d0 <pvPortMalloc+0x188>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a18      	ldr	r2, [pc, #96]	; (800e6d8 <pvPortMalloc+0x190>)
 800e678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	685a      	ldr	r2, [r3, #4]
 800e67e:	4b13      	ldr	r3, [pc, #76]	; (800e6cc <pvPortMalloc+0x184>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	431a      	orrs	r2, r3
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68a:	2200      	movs	r2, #0
 800e68c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e68e:	4b13      	ldr	r3, [pc, #76]	; (800e6dc <pvPortMalloc+0x194>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3301      	adds	r3, #1
 800e694:	4a11      	ldr	r2, [pc, #68]	; (800e6dc <pvPortMalloc+0x194>)
 800e696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e698:	f7fe ff4a 	bl	800d530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	f003 0307 	and.w	r3, r3, #7
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00a      	beq.n	800e6bc <pvPortMalloc+0x174>
	__asm volatile
 800e6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	60fb      	str	r3, [r7, #12]
}
 800e6b8:	bf00      	nop
 800e6ba:	e7fe      	b.n	800e6ba <pvPortMalloc+0x172>
	return pvReturn;
 800e6bc:	69fb      	ldr	r3, [r7, #28]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3728      	adds	r7, #40	; 0x28
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	200044ac 	.word	0x200044ac
 800e6cc:	200044c0 	.word	0x200044c0
 800e6d0:	200044b0 	.word	0x200044b0
 800e6d4:	200044a4 	.word	0x200044a4
 800e6d8:	200044b4 	.word	0x200044b4
 800e6dc:	200044b8 	.word	0x200044b8

0800e6e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d04d      	beq.n	800e78e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6f2:	2308      	movs	r3, #8
 800e6f4:	425b      	negs	r3, r3
 800e6f6:	697a      	ldr	r2, [r7, #20]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	4b24      	ldr	r3, [pc, #144]	; (800e798 <vPortFree+0xb8>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4013      	ands	r3, r2
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d10a      	bne.n	800e724 <vPortFree+0x44>
	__asm volatile
 800e70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	60fb      	str	r3, [r7, #12]
}
 800e720:	bf00      	nop
 800e722:	e7fe      	b.n	800e722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00a      	beq.n	800e742 <vPortFree+0x62>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	60bb      	str	r3, [r7, #8]
}
 800e73e:	bf00      	nop
 800e740:	e7fe      	b.n	800e740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	685a      	ldr	r2, [r3, #4]
 800e746:	4b14      	ldr	r3, [pc, #80]	; (800e798 <vPortFree+0xb8>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4013      	ands	r3, r2
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d01e      	beq.n	800e78e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d11a      	bne.n	800e78e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	4b0e      	ldr	r3, [pc, #56]	; (800e798 <vPortFree+0xb8>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	43db      	mvns	r3, r3
 800e762:	401a      	ands	r2, r3
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e768:	f7fe fed4 	bl	800d514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <vPortFree+0xbc>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4413      	add	r3, r2
 800e776:	4a09      	ldr	r2, [pc, #36]	; (800e79c <vPortFree+0xbc>)
 800e778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e77a:	6938      	ldr	r0, [r7, #16]
 800e77c:	f000 f874 	bl	800e868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e780:	4b07      	ldr	r3, [pc, #28]	; (800e7a0 <vPortFree+0xc0>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	3301      	adds	r3, #1
 800e786:	4a06      	ldr	r2, [pc, #24]	; (800e7a0 <vPortFree+0xc0>)
 800e788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e78a:	f7fe fed1 	bl	800d530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e78e:	bf00      	nop
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	200044c0 	.word	0x200044c0
 800e79c:	200044b0 	.word	0x200044b0
 800e7a0:	200044bc 	.word	0x200044bc

0800e7a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e7ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7b0:	4b27      	ldr	r3, [pc, #156]	; (800e850 <prvHeapInit+0xac>)
 800e7b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f003 0307 	and.w	r3, r3, #7
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00c      	beq.n	800e7d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	3307      	adds	r3, #7
 800e7c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f023 0307 	bic.w	r3, r3, #7
 800e7ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e7cc:	68ba      	ldr	r2, [r7, #8]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	4a1f      	ldr	r2, [pc, #124]	; (800e850 <prvHeapInit+0xac>)
 800e7d4:	4413      	add	r3, r2
 800e7d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e7dc:	4a1d      	ldr	r2, [pc, #116]	; (800e854 <prvHeapInit+0xb0>)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e7e2:	4b1c      	ldr	r3, [pc, #112]	; (800e854 <prvHeapInit+0xb0>)
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e7f0:	2208      	movs	r2, #8
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	1a9b      	subs	r3, r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f023 0307 	bic.w	r3, r3, #7
 800e7fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	4a15      	ldr	r2, [pc, #84]	; (800e858 <prvHeapInit+0xb4>)
 800e804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e806:	4b14      	ldr	r3, [pc, #80]	; (800e858 <prvHeapInit+0xb4>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2200      	movs	r2, #0
 800e80c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e80e:	4b12      	ldr	r3, [pc, #72]	; (800e858 <prvHeapInit+0xb4>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2200      	movs	r2, #0
 800e814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	68fa      	ldr	r2, [r7, #12]
 800e81e:	1ad2      	subs	r2, r2, r3
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e824:	4b0c      	ldr	r3, [pc, #48]	; (800e858 <prvHeapInit+0xb4>)
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	4a0a      	ldr	r2, [pc, #40]	; (800e85c <prvHeapInit+0xb8>)
 800e832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	4a09      	ldr	r2, [pc, #36]	; (800e860 <prvHeapInit+0xbc>)
 800e83a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e83c:	4b09      	ldr	r3, [pc, #36]	; (800e864 <prvHeapInit+0xc0>)
 800e83e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e842:	601a      	str	r2, [r3, #0]
}
 800e844:	bf00      	nop
 800e846:	3714      	adds	r7, #20
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr
 800e850:	200008a4 	.word	0x200008a4
 800e854:	200044a4 	.word	0x200044a4
 800e858:	200044ac 	.word	0x200044ac
 800e85c:	200044b4 	.word	0x200044b4
 800e860:	200044b0 	.word	0x200044b0
 800e864:	200044c0 	.word	0x200044c0

0800e868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e868:	b480      	push	{r7}
 800e86a:	b085      	sub	sp, #20
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e870:	4b28      	ldr	r3, [pc, #160]	; (800e914 <prvInsertBlockIntoFreeList+0xac>)
 800e872:	60fb      	str	r3, [r7, #12]
 800e874:	e002      	b.n	800e87c <prvInsertBlockIntoFreeList+0x14>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	60fb      	str	r3, [r7, #12]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	429a      	cmp	r2, r3
 800e884:	d8f7      	bhi.n	800e876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	68ba      	ldr	r2, [r7, #8]
 800e890:	4413      	add	r3, r2
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	429a      	cmp	r2, r3
 800e896:	d108      	bne.n	800e8aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	685a      	ldr	r2, [r3, #4]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	441a      	add	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	441a      	add	r2, r3
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d118      	bne.n	800e8f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	4b15      	ldr	r3, [pc, #84]	; (800e918 <prvInsertBlockIntoFreeList+0xb0>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d00d      	beq.n	800e8e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685a      	ldr	r2, [r3, #4]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	441a      	add	r2, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	601a      	str	r2, [r3, #0]
 800e8e4:	e008      	b.n	800e8f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e8e6:	4b0c      	ldr	r3, [pc, #48]	; (800e918 <prvInsertBlockIntoFreeList+0xb0>)
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	e003      	b.n	800e8f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d002      	beq.n	800e906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e906:	bf00      	nop
 800e908:	3714      	adds	r7, #20
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	200044a4 	.word	0x200044a4
 800e918:	200044ac 	.word	0x200044ac

0800e91c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e920:	2201      	movs	r2, #1
 800e922:	4912      	ldr	r1, [pc, #72]	; (800e96c <MX_USB_DEVICE_Init+0x50>)
 800e924:	4812      	ldr	r0, [pc, #72]	; (800e970 <MX_USB_DEVICE_Init+0x54>)
 800e926:	f7fc f945 	bl	800abb4 <USBD_Init>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d001      	beq.n	800e934 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e930:	f7f2 fd3c 	bl	80013ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e934:	490f      	ldr	r1, [pc, #60]	; (800e974 <MX_USB_DEVICE_Init+0x58>)
 800e936:	480e      	ldr	r0, [pc, #56]	; (800e970 <MX_USB_DEVICE_Init+0x54>)
 800e938:	f7fc f96c 	bl	800ac14 <USBD_RegisterClass>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e942:	f7f2 fd33 	bl	80013ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e946:	490c      	ldr	r1, [pc, #48]	; (800e978 <MX_USB_DEVICE_Init+0x5c>)
 800e948:	4809      	ldr	r0, [pc, #36]	; (800e970 <MX_USB_DEVICE_Init+0x54>)
 800e94a:	f7fc f8a3 	bl	800aa94 <USBD_CDC_RegisterInterface>
 800e94e:	4603      	mov	r3, r0
 800e950:	2b00      	cmp	r3, #0
 800e952:	d001      	beq.n	800e958 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e954:	f7f2 fd2a 	bl	80013ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e958:	4805      	ldr	r0, [pc, #20]	; (800e970 <MX_USB_DEVICE_Init+0x54>)
 800e95a:	f7fc f991 	bl	800ac80 <USBD_Start>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d001      	beq.n	800e968 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e964:	f7f2 fd22 	bl	80013ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e968:	bf00      	nop
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	200000c0 	.word	0x200000c0
 800e970:	200044c4 	.word	0x200044c4
 800e974:	20000028 	.word	0x20000028
 800e978:	200000ac 	.word	0x200000ac

0800e97c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e980:	2200      	movs	r2, #0
 800e982:	4905      	ldr	r1, [pc, #20]	; (800e998 <CDC_Init_HS+0x1c>)
 800e984:	4805      	ldr	r0, [pc, #20]	; (800e99c <CDC_Init_HS+0x20>)
 800e986:	f7fc f89f 	bl	800aac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e98a:	4905      	ldr	r1, [pc, #20]	; (800e9a0 <CDC_Init_HS+0x24>)
 800e98c:	4803      	ldr	r0, [pc, #12]	; (800e99c <CDC_Init_HS+0x20>)
 800e98e:	f7fc f8bd 	bl	800ab0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e992:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e994:	4618      	mov	r0, r3
 800e996:	bd80      	pop	{r7, pc}
 800e998:	20004fa0 	.word	0x20004fa0
 800e99c:	200044c4 	.word	0x200044c4
 800e9a0:	200047a0 	.word	0x200047a0

0800e9a4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e9a8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	6039      	str	r1, [r7, #0]
 800e9be:	71fb      	strb	r3, [r7, #7]
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e9c4:	79fb      	ldrb	r3, [r7, #7]
 800e9c6:	2b23      	cmp	r3, #35	; 0x23
 800e9c8:	d84a      	bhi.n	800ea60 <CDC_Control_HS+0xac>
 800e9ca:	a201      	add	r2, pc, #4	; (adr r2, 800e9d0 <CDC_Control_HS+0x1c>)
 800e9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d0:	0800ea61 	.word	0x0800ea61
 800e9d4:	0800ea61 	.word	0x0800ea61
 800e9d8:	0800ea61 	.word	0x0800ea61
 800e9dc:	0800ea61 	.word	0x0800ea61
 800e9e0:	0800ea61 	.word	0x0800ea61
 800e9e4:	0800ea61 	.word	0x0800ea61
 800e9e8:	0800ea61 	.word	0x0800ea61
 800e9ec:	0800ea61 	.word	0x0800ea61
 800e9f0:	0800ea61 	.word	0x0800ea61
 800e9f4:	0800ea61 	.word	0x0800ea61
 800e9f8:	0800ea61 	.word	0x0800ea61
 800e9fc:	0800ea61 	.word	0x0800ea61
 800ea00:	0800ea61 	.word	0x0800ea61
 800ea04:	0800ea61 	.word	0x0800ea61
 800ea08:	0800ea61 	.word	0x0800ea61
 800ea0c:	0800ea61 	.word	0x0800ea61
 800ea10:	0800ea61 	.word	0x0800ea61
 800ea14:	0800ea61 	.word	0x0800ea61
 800ea18:	0800ea61 	.word	0x0800ea61
 800ea1c:	0800ea61 	.word	0x0800ea61
 800ea20:	0800ea61 	.word	0x0800ea61
 800ea24:	0800ea61 	.word	0x0800ea61
 800ea28:	0800ea61 	.word	0x0800ea61
 800ea2c:	0800ea61 	.word	0x0800ea61
 800ea30:	0800ea61 	.word	0x0800ea61
 800ea34:	0800ea61 	.word	0x0800ea61
 800ea38:	0800ea61 	.word	0x0800ea61
 800ea3c:	0800ea61 	.word	0x0800ea61
 800ea40:	0800ea61 	.word	0x0800ea61
 800ea44:	0800ea61 	.word	0x0800ea61
 800ea48:	0800ea61 	.word	0x0800ea61
 800ea4c:	0800ea61 	.word	0x0800ea61
 800ea50:	0800ea61 	.word	0x0800ea61
 800ea54:	0800ea61 	.word	0x0800ea61
 800ea58:	0800ea61 	.word	0x0800ea61
 800ea5c:	0800ea61 	.word	0x0800ea61
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea60:	bf00      	nop
  }

  return (USBD_OK);
 800ea62:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ea7a:	6879      	ldr	r1, [r7, #4]
 800ea7c:	4805      	ldr	r0, [pc, #20]	; (800ea94 <CDC_Receive_HS+0x24>)
 800ea7e:	f7fc f845 	bl	800ab0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ea82:	4804      	ldr	r0, [pc, #16]	; (800ea94 <CDC_Receive_HS+0x24>)
 800ea84:	f7fc f860 	bl	800ab48 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea88:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	200044c4 	.word	0x200044c4

0800ea98 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b087      	sub	sp, #28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800eaaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	371c      	adds	r7, #28
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
	...

0800eabc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	4603      	mov	r3, r0
 800eac4:	6039      	str	r1, [r7, #0]
 800eac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	2212      	movs	r2, #18
 800eacc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800eace:	4b03      	ldr	r3, [pc, #12]	; (800eadc <USBD_HS_DeviceDescriptor+0x20>)
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	200000dc 	.word	0x200000dc

0800eae0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	4603      	mov	r3, r0
 800eae8:	6039      	str	r1, [r7, #0]
 800eaea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	2204      	movs	r2, #4
 800eaf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eaf2:	4b03      	ldr	r3, [pc, #12]	; (800eb00 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	200000f0 	.word	0x200000f0

0800eb04 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	6039      	str	r1, [r7, #0]
 800eb0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb10:	79fb      	ldrb	r3, [r7, #7]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d105      	bne.n	800eb22 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	4907      	ldr	r1, [pc, #28]	; (800eb38 <USBD_HS_ProductStrDescriptor+0x34>)
 800eb1a:	4808      	ldr	r0, [pc, #32]	; (800eb3c <USBD_HS_ProductStrDescriptor+0x38>)
 800eb1c:	f7fd fa5c 	bl	800bfd8 <USBD_GetString>
 800eb20:	e004      	b.n	800eb2c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800eb22:	683a      	ldr	r2, [r7, #0]
 800eb24:	4904      	ldr	r1, [pc, #16]	; (800eb38 <USBD_HS_ProductStrDescriptor+0x34>)
 800eb26:	4805      	ldr	r0, [pc, #20]	; (800eb3c <USBD_HS_ProductStrDescriptor+0x38>)
 800eb28:	f7fd fa56 	bl	800bfd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb2c:	4b02      	ldr	r3, [pc, #8]	; (800eb38 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3708      	adds	r7, #8
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	200057a0 	.word	0x200057a0
 800eb3c:	0800fef4 	.word	0x0800fef4

0800eb40 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	4603      	mov	r3, r0
 800eb48:	6039      	str	r1, [r7, #0]
 800eb4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb4c:	683a      	ldr	r2, [r7, #0]
 800eb4e:	4904      	ldr	r1, [pc, #16]	; (800eb60 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800eb50:	4804      	ldr	r0, [pc, #16]	; (800eb64 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800eb52:	f7fd fa41 	bl	800bfd8 <USBD_GetString>
  return USBD_StrDesc;
 800eb56:	4b02      	ldr	r3, [pc, #8]	; (800eb60 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	200057a0 	.word	0x200057a0
 800eb64:	0800ff0c 	.word	0x0800ff0c

0800eb68 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	6039      	str	r1, [r7, #0]
 800eb72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	221a      	movs	r2, #26
 800eb78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb7a:	f000 f843 	bl	800ec04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800eb7e:	4b02      	ldr	r3, [pc, #8]	; (800eb88 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	200000f4 	.word	0x200000f4

0800eb8c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	4603      	mov	r3, r0
 800eb94:	6039      	str	r1, [r7, #0]
 800eb96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb98:	79fb      	ldrb	r3, [r7, #7]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d105      	bne.n	800ebaa <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800eb9e:	683a      	ldr	r2, [r7, #0]
 800eba0:	4907      	ldr	r1, [pc, #28]	; (800ebc0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800eba2:	4808      	ldr	r0, [pc, #32]	; (800ebc4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800eba4:	f7fd fa18 	bl	800bfd8 <USBD_GetString>
 800eba8:	e004      	b.n	800ebb4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	4904      	ldr	r1, [pc, #16]	; (800ebc0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ebae:	4805      	ldr	r0, [pc, #20]	; (800ebc4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ebb0:	f7fd fa12 	bl	800bfd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebb4:	4b02      	ldr	r3, [pc, #8]	; (800ebc0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	200057a0 	.word	0x200057a0
 800ebc4:	0800ff20 	.word	0x0800ff20

0800ebc8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	4603      	mov	r3, r0
 800ebd0:	6039      	str	r1, [r7, #0]
 800ebd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d105      	bne.n	800ebe6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	4907      	ldr	r1, [pc, #28]	; (800ebfc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ebde:	4808      	ldr	r0, [pc, #32]	; (800ec00 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ebe0:	f7fd f9fa 	bl	800bfd8 <USBD_GetString>
 800ebe4:	e004      	b.n	800ebf0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ebe6:	683a      	ldr	r2, [r7, #0]
 800ebe8:	4904      	ldr	r1, [pc, #16]	; (800ebfc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ebea:	4805      	ldr	r0, [pc, #20]	; (800ec00 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ebec:	f7fd f9f4 	bl	800bfd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebf0:	4b02      	ldr	r3, [pc, #8]	; (800ebfc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	200057a0 	.word	0x200057a0
 800ec00:	0800ff2c 	.word	0x0800ff2c

0800ec04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec0a:	4b0f      	ldr	r3, [pc, #60]	; (800ec48 <Get_SerialNum+0x44>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec10:	4b0e      	ldr	r3, [pc, #56]	; (800ec4c <Get_SerialNum+0x48>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec16:	4b0e      	ldr	r3, [pc, #56]	; (800ec50 <Get_SerialNum+0x4c>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4413      	add	r3, r2
 800ec22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d009      	beq.n	800ec3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec2a:	2208      	movs	r2, #8
 800ec2c:	4909      	ldr	r1, [pc, #36]	; (800ec54 <Get_SerialNum+0x50>)
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f000 f814 	bl	800ec5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec34:	2204      	movs	r2, #4
 800ec36:	4908      	ldr	r1, [pc, #32]	; (800ec58 <Get_SerialNum+0x54>)
 800ec38:	68b8      	ldr	r0, [r7, #8]
 800ec3a:	f000 f80f 	bl	800ec5c <IntToUnicode>
  }
}
 800ec3e:	bf00      	nop
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	1fff7a10 	.word	0x1fff7a10
 800ec4c:	1fff7a14 	.word	0x1fff7a14
 800ec50:	1fff7a18 	.word	0x1fff7a18
 800ec54:	200000f6 	.word	0x200000f6
 800ec58:	20000106 	.word	0x20000106

0800ec5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b087      	sub	sp, #28
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	4613      	mov	r3, r2
 800ec68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec6e:	2300      	movs	r3, #0
 800ec70:	75fb      	strb	r3, [r7, #23]
 800ec72:	e027      	b.n	800ecc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	0f1b      	lsrs	r3, r3, #28
 800ec78:	2b09      	cmp	r3, #9
 800ec7a:	d80b      	bhi.n	800ec94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	0f1b      	lsrs	r3, r3, #28
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	7dfb      	ldrb	r3, [r7, #23]
 800ec84:	005b      	lsls	r3, r3, #1
 800ec86:	4619      	mov	r1, r3
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	440b      	add	r3, r1
 800ec8c:	3230      	adds	r2, #48	; 0x30
 800ec8e:	b2d2      	uxtb	r2, r2
 800ec90:	701a      	strb	r2, [r3, #0]
 800ec92:	e00a      	b.n	800ecaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	0f1b      	lsrs	r3, r3, #28
 800ec98:	b2da      	uxtb	r2, r3
 800ec9a:	7dfb      	ldrb	r3, [r7, #23]
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	4619      	mov	r1, r3
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	440b      	add	r3, r1
 800eca4:	3237      	adds	r2, #55	; 0x37
 800eca6:	b2d2      	uxtb	r2, r2
 800eca8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	011b      	lsls	r3, r3, #4
 800ecae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecb0:	7dfb      	ldrb	r3, [r7, #23]
 800ecb2:	005b      	lsls	r3, r3, #1
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	68ba      	ldr	r2, [r7, #8]
 800ecb8:	4413      	add	r3, r2
 800ecba:	2200      	movs	r2, #0
 800ecbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecbe:	7dfb      	ldrb	r3, [r7, #23]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	75fb      	strb	r3, [r7, #23]
 800ecc4:	7dfa      	ldrb	r2, [r7, #23]
 800ecc6:	79fb      	ldrb	r3, [r7, #7]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d3d3      	bcc.n	800ec74 <IntToUnicode+0x18>
  }
}
 800eccc:	bf00      	nop
 800ecce:	bf00      	nop
 800ecd0:	371c      	adds	r7, #28
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
	...

0800ecdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08a      	sub	sp, #40	; 0x28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ece4:	f107 0314 	add.w	r3, r7, #20
 800ece8:	2200      	movs	r2, #0
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	605a      	str	r2, [r3, #4]
 800ecee:	609a      	str	r2, [r3, #8]
 800ecf0:	60da      	str	r2, [r3, #12]
 800ecf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a1d      	ldr	r2, [pc, #116]	; (800ed70 <HAL_PCD_MspInit+0x94>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d134      	bne.n	800ed68 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ecfe:	2300      	movs	r3, #0
 800ed00:	613b      	str	r3, [r7, #16]
 800ed02:	4b1c      	ldr	r3, [pc, #112]	; (800ed74 <HAL_PCD_MspInit+0x98>)
 800ed04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed06:	4a1b      	ldr	r2, [pc, #108]	; (800ed74 <HAL_PCD_MspInit+0x98>)
 800ed08:	f043 0302 	orr.w	r3, r3, #2
 800ed0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ed0e:	4b19      	ldr	r3, [pc, #100]	; (800ed74 <HAL_PCD_MspInit+0x98>)
 800ed10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed12:	f003 0302 	and.w	r3, r3, #2
 800ed16:	613b      	str	r3, [r7, #16]
 800ed18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800ed1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ed1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed20:	2302      	movs	r3, #2
 800ed22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed24:	2300      	movs	r3, #0
 800ed26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed28:	2303      	movs	r3, #3
 800ed2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ed2c:	230c      	movs	r3, #12
 800ed2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ed30:	f107 0314 	add.w	r3, r7, #20
 800ed34:	4619      	mov	r1, r3
 800ed36:	4810      	ldr	r0, [pc, #64]	; (800ed78 <HAL_PCD_MspInit+0x9c>)
 800ed38:	f7f4 fb26 	bl	8003388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	4b0c      	ldr	r3, [pc, #48]	; (800ed74 <HAL_PCD_MspInit+0x98>)
 800ed42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed44:	4a0b      	ldr	r2, [pc, #44]	; (800ed74 <HAL_PCD_MspInit+0x98>)
 800ed46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed4a:	6313      	str	r3, [r2, #48]	; 0x30
 800ed4c:	4b09      	ldr	r3, [pc, #36]	; (800ed74 <HAL_PCD_MspInit+0x98>)
 800ed4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed54:	60fb      	str	r3, [r7, #12]
 800ed56:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ed58:	2200      	movs	r2, #0
 800ed5a:	2105      	movs	r1, #5
 800ed5c:	204d      	movs	r0, #77	; 0x4d
 800ed5e:	f7f4 fac7 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ed62:	204d      	movs	r0, #77	; 0x4d
 800ed64:	f7f4 fae0 	bl	8003328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ed68:	bf00      	nop
 800ed6a:	3728      	adds	r7, #40	; 0x28
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	40040000 	.word	0x40040000
 800ed74:	40023800 	.word	0x40023800
 800ed78:	40020400 	.word	0x40020400

0800ed7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ed90:	4619      	mov	r1, r3
 800ed92:	4610      	mov	r0, r2
 800ed94:	f7fb ffc1 	bl	800ad1a <USBD_LL_SetupStage>
}
 800ed98:	bf00      	nop
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	460b      	mov	r3, r1
 800edaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800edb2:	78fa      	ldrb	r2, [r7, #3]
 800edb4:	6879      	ldr	r1, [r7, #4]
 800edb6:	4613      	mov	r3, r2
 800edb8:	00db      	lsls	r3, r3, #3
 800edba:	4413      	add	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	440b      	add	r3, r1
 800edc0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	78fb      	ldrb	r3, [r7, #3]
 800edc8:	4619      	mov	r1, r3
 800edca:	f7fb fffb 	bl	800adc4 <USBD_LL_DataOutStage>
}
 800edce:	bf00      	nop
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b082      	sub	sp, #8
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	460b      	mov	r3, r1
 800ede0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ede8:	78fa      	ldrb	r2, [r7, #3]
 800edea:	6879      	ldr	r1, [r7, #4]
 800edec:	4613      	mov	r3, r2
 800edee:	00db      	lsls	r3, r3, #3
 800edf0:	4413      	add	r3, r2
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	440b      	add	r3, r1
 800edf6:	334c      	adds	r3, #76	; 0x4c
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	78fb      	ldrb	r3, [r7, #3]
 800edfc:	4619      	mov	r1, r3
 800edfe:	f7fc f894 	bl	800af2a <USBD_LL_DataInStage>
}
 800ee02:	bf00      	nop
 800ee04:	3708      	adds	r7, #8
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b082      	sub	sp, #8
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fc f9c8 	bl	800b1ae <USBD_LL_SOF>
}
 800ee1e:	bf00      	nop
 800ee20:	3708      	adds	r7, #8
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b084      	sub	sp, #16
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	73fb      	strb	r3, [r7, #15]
 800ee3e:	e008      	b.n	800ee52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	d102      	bne.n	800ee4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	73fb      	strb	r3, [r7, #15]
 800ee4c:	e001      	b.n	800ee52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ee4e:	f7f2 faad 	bl	80013ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee58:	7bfa      	ldrb	r2, [r7, #15]
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fc f968 	bl	800b132 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fc f910 	bl	800b08e <USBD_LL_Reset>
}
 800ee6e:	bf00      	nop
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
	...

0800ee78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fc f963 	bl	800b152 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	6812      	ldr	r2, [r2, #0]
 800ee9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee9e:	f043 0301 	orr.w	r3, r3, #1
 800eea2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a1b      	ldr	r3, [r3, #32]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d005      	beq.n	800eeb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eeac:	4b04      	ldr	r3, [pc, #16]	; (800eec0 <HAL_PCD_SuspendCallback+0x48>)
 800eeae:	691b      	ldr	r3, [r3, #16]
 800eeb0:	4a03      	ldr	r2, [pc, #12]	; (800eec0 <HAL_PCD_SuspendCallback+0x48>)
 800eeb2:	f043 0306 	orr.w	r3, r3, #6
 800eeb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eeb8:	bf00      	nop
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	e000ed00 	.word	0xe000ed00

0800eec4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fc f953 	bl	800b17e <USBD_LL_Resume>
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	460b      	mov	r3, r1
 800eeea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eef2:	78fa      	ldrb	r2, [r7, #3]
 800eef4:	4611      	mov	r1, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7fc f9ab 	bl	800b252 <USBD_LL_IsoOUTIncomplete>
}
 800eefc:	bf00      	nop
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef16:	78fa      	ldrb	r2, [r7, #3]
 800ef18:	4611      	mov	r1, r2
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fc f967 	bl	800b1ee <USBD_LL_IsoINIncomplete>
}
 800ef20:	bf00      	nop
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fc f9bd 	bl	800b2b6 <USBD_LL_DevConnected>
}
 800ef3c:	bf00      	nop
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fc f9ba 	bl	800b2cc <USBD_LL_DevDisconnected>
}
 800ef58:	bf00      	nop
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d140      	bne.n	800eff2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ef70:	4a22      	ldr	r2, [pc, #136]	; (800effc <USBD_LL_Init+0x9c>)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4a20      	ldr	r2, [pc, #128]	; (800effc <USBD_LL_Init+0x9c>)
 800ef7c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ef80:	4b1e      	ldr	r3, [pc, #120]	; (800effc <USBD_LL_Init+0x9c>)
 800ef82:	4a1f      	ldr	r2, [pc, #124]	; (800f000 <USBD_LL_Init+0xa0>)
 800ef84:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800ef86:	4b1d      	ldr	r3, [pc, #116]	; (800effc <USBD_LL_Init+0x9c>)
 800ef88:	2206      	movs	r2, #6
 800ef8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800ef8c:	4b1b      	ldr	r3, [pc, #108]	; (800effc <USBD_LL_Init+0x9c>)
 800ef8e:	2202      	movs	r2, #2
 800ef90:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ef92:	4b1a      	ldr	r3, [pc, #104]	; (800effc <USBD_LL_Init+0x9c>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ef98:	4b18      	ldr	r3, [pc, #96]	; (800effc <USBD_LL_Init+0x9c>)
 800ef9a:	2202      	movs	r2, #2
 800ef9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ef9e:	4b17      	ldr	r3, [pc, #92]	; (800effc <USBD_LL_Init+0x9c>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800efa4:	4b15      	ldr	r3, [pc, #84]	; (800effc <USBD_LL_Init+0x9c>)
 800efa6:	2200      	movs	r2, #0
 800efa8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800efaa:	4b14      	ldr	r3, [pc, #80]	; (800effc <USBD_LL_Init+0x9c>)
 800efac:	2200      	movs	r2, #0
 800efae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800efb0:	4b12      	ldr	r3, [pc, #72]	; (800effc <USBD_LL_Init+0x9c>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800efb6:	4b11      	ldr	r3, [pc, #68]	; (800effc <USBD_LL_Init+0x9c>)
 800efb8:	2200      	movs	r2, #0
 800efba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800efbc:	4b0f      	ldr	r3, [pc, #60]	; (800effc <USBD_LL_Init+0x9c>)
 800efbe:	2200      	movs	r2, #0
 800efc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800efc2:	480e      	ldr	r0, [pc, #56]	; (800effc <USBD_LL_Init+0x9c>)
 800efc4:	f7f5 fbf8 	bl	80047b8 <HAL_PCD_Init>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d001      	beq.n	800efd2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800efce:	f7f2 f9ed 	bl	80013ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800efd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800efd6:	4809      	ldr	r0, [pc, #36]	; (800effc <USBD_LL_Init+0x9c>)
 800efd8:	f7f6 fe4f 	bl	8005c7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800efdc:	2280      	movs	r2, #128	; 0x80
 800efde:	2100      	movs	r1, #0
 800efe0:	4806      	ldr	r0, [pc, #24]	; (800effc <USBD_LL_Init+0x9c>)
 800efe2:	f7f6 fe03 	bl	8005bec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800efe6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800efea:	2101      	movs	r1, #1
 800efec:	4803      	ldr	r0, [pc, #12]	; (800effc <USBD_LL_Init+0x9c>)
 800efee:	f7f6 fdfd 	bl	8005bec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3708      	adds	r7, #8
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	200059a0 	.word	0x200059a0
 800f000:	40040000 	.word	0x40040000

0800f004 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f00c:	2300      	movs	r3, #0
 800f00e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f010:	2300      	movs	r3, #0
 800f012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7f5 fce9 	bl	80049f2 <HAL_PCD_Start>
 800f020:	4603      	mov	r3, r0
 800f022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f024:	7bfb      	ldrb	r3, [r7, #15]
 800f026:	4618      	mov	r0, r3
 800f028:	f000 f942 	bl	800f2b0 <USBD_Get_USB_Status>
 800f02c:	4603      	mov	r3, r0
 800f02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f030:	7bbb      	ldrb	r3, [r7, #14]
}
 800f032:	4618      	mov	r0, r3
 800f034:	3710      	adds	r7, #16
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b084      	sub	sp, #16
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	4608      	mov	r0, r1
 800f044:	4611      	mov	r1, r2
 800f046:	461a      	mov	r2, r3
 800f048:	4603      	mov	r3, r0
 800f04a:	70fb      	strb	r3, [r7, #3]
 800f04c:	460b      	mov	r3, r1
 800f04e:	70bb      	strb	r3, [r7, #2]
 800f050:	4613      	mov	r3, r2
 800f052:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f062:	78bb      	ldrb	r3, [r7, #2]
 800f064:	883a      	ldrh	r2, [r7, #0]
 800f066:	78f9      	ldrb	r1, [r7, #3]
 800f068:	f7f6 f9ba 	bl	80053e0 <HAL_PCD_EP_Open>
 800f06c:	4603      	mov	r3, r0
 800f06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f070:	7bfb      	ldrb	r3, [r7, #15]
 800f072:	4618      	mov	r0, r3
 800f074:	f000 f91c 	bl	800f2b0 <USBD_Get_USB_Status>
 800f078:	4603      	mov	r3, r0
 800f07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b084      	sub	sp, #16
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	460b      	mov	r3, r1
 800f090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f092:	2300      	movs	r3, #0
 800f094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f096:	2300      	movs	r3, #0
 800f098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0a0:	78fa      	ldrb	r2, [r7, #3]
 800f0a2:	4611      	mov	r1, r2
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f6 fa03 	bl	80054b0 <HAL_PCD_EP_Close>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0ae:	7bfb      	ldrb	r3, [r7, #15]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f000 f8fd 	bl	800f2b0 <USBD_Get_USB_Status>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0de:	78fa      	ldrb	r2, [r7, #3]
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7f6 fadb 	bl	800569e <HAL_PCD_EP_SetStall>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 f8de 	bl	800f2b0 <USBD_Get_USB_Status>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b084      	sub	sp, #16
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	460b      	mov	r3, r1
 800f10c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f10e:	2300      	movs	r3, #0
 800f110:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f11c:	78fa      	ldrb	r2, [r7, #3]
 800f11e:	4611      	mov	r1, r2
 800f120:	4618      	mov	r0, r3
 800f122:	f7f6 fb20 	bl	8005766 <HAL_PCD_EP_ClrStall>
 800f126:	4603      	mov	r3, r0
 800f128:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f12a:	7bfb      	ldrb	r3, [r7, #15]
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 f8bf 	bl	800f2b0 <USBD_Get_USB_Status>
 800f132:	4603      	mov	r3, r0
 800f134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f136:	7bbb      	ldrb	r3, [r7, #14]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3710      	adds	r7, #16
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f140:	b480      	push	{r7}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	460b      	mov	r3, r1
 800f14a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f152:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	da0b      	bge.n	800f174 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f15c:	78fb      	ldrb	r3, [r7, #3]
 800f15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f162:	68f9      	ldr	r1, [r7, #12]
 800f164:	4613      	mov	r3, r2
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	4413      	add	r3, r2
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	440b      	add	r3, r1
 800f16e:	333e      	adds	r3, #62	; 0x3e
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	e00b      	b.n	800f18c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f174:	78fb      	ldrb	r3, [r7, #3]
 800f176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f17a:	68f9      	ldr	r1, [r7, #12]
 800f17c:	4613      	mov	r3, r2
 800f17e:	00db      	lsls	r3, r3, #3
 800f180:	4413      	add	r3, r2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	440b      	add	r3, r1
 800f186:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f18a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3714      	adds	r7, #20
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1b2:	78fa      	ldrb	r2, [r7, #3]
 800f1b4:	4611      	mov	r1, r2
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7f6 f8ed 	bl	8005396 <HAL_PCD_SetAddress>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1c0:	7bfb      	ldrb	r3, [r7, #15]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 f874 	bl	800f2b0 <USBD_Get_USB_Status>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b086      	sub	sp, #24
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	60f8      	str	r0, [r7, #12]
 800f1de:	607a      	str	r2, [r7, #4]
 800f1e0:	603b      	str	r3, [r7, #0]
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f1f4:	7af9      	ldrb	r1, [r7, #11]
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	f7f6 fa06 	bl	800560a <HAL_PCD_EP_Transmit>
 800f1fe:	4603      	mov	r3, r0
 800f200:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f202:	7dfb      	ldrb	r3, [r7, #23]
 800f204:	4618      	mov	r0, r3
 800f206:	f000 f853 	bl	800f2b0 <USBD_Get_USB_Status>
 800f20a:	4603      	mov	r3, r0
 800f20c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f20e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f210:	4618      	mov	r0, r3
 800f212:	3718      	adds	r7, #24
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b086      	sub	sp, #24
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	607a      	str	r2, [r7, #4]
 800f222:	603b      	str	r3, [r7, #0]
 800f224:	460b      	mov	r3, r1
 800f226:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f228:	2300      	movs	r3, #0
 800f22a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f22c:	2300      	movs	r3, #0
 800f22e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f236:	7af9      	ldrb	r1, [r7, #11]
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	f7f6 f982 	bl	8005544 <HAL_PCD_EP_Receive>
 800f240:	4603      	mov	r3, r0
 800f242:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f244:	7dfb      	ldrb	r3, [r7, #23]
 800f246:	4618      	mov	r0, r3
 800f248:	f000 f832 	bl	800f2b0 <USBD_Get_USB_Status>
 800f24c:	4603      	mov	r3, r0
 800f24e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f250:	7dbb      	ldrb	r3, [r7, #22]
}
 800f252:	4618      	mov	r0, r3
 800f254:	3718      	adds	r7, #24
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b082      	sub	sp, #8
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
 800f262:	460b      	mov	r3, r1
 800f264:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f26c:	78fa      	ldrb	r2, [r7, #3]
 800f26e:	4611      	mov	r1, r2
 800f270:	4618      	mov	r0, r3
 800f272:	f7f6 f9b2 	bl	80055da <HAL_PCD_EP_GetRxCount>
 800f276:	4603      	mov	r3, r0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f288:	4b03      	ldr	r3, [pc, #12]	; (800f298 <USBD_static_malloc+0x18>)
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	370c      	adds	r7, #12
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	20005eac 	.word	0x20005eac

0800f29c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]

}
 800f2a4:	bf00      	nop
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2be:	79fb      	ldrb	r3, [r7, #7]
 800f2c0:	2b03      	cmp	r3, #3
 800f2c2:	d817      	bhi.n	800f2f4 <USBD_Get_USB_Status+0x44>
 800f2c4:	a201      	add	r2, pc, #4	; (adr r2, 800f2cc <USBD_Get_USB_Status+0x1c>)
 800f2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ca:	bf00      	nop
 800f2cc:	0800f2dd 	.word	0x0800f2dd
 800f2d0:	0800f2e3 	.word	0x0800f2e3
 800f2d4:	0800f2e9 	.word	0x0800f2e9
 800f2d8:	0800f2ef 	.word	0x0800f2ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e0:	e00b      	b.n	800f2fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2e2:	2303      	movs	r3, #3
 800f2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e6:	e008      	b.n	800f2fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ec:	e005      	b.n	800f2fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2ee:	2303      	movs	r3, #3
 800f2f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2f2:	e002      	b.n	800f2fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2f4:	2303      	movs	r3, #3
 800f2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2f8:	bf00      	nop
  }
  return usb_status;
 800f2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <__errno>:
 800f308:	4b01      	ldr	r3, [pc, #4]	; (800f310 <__errno+0x8>)
 800f30a:	6818      	ldr	r0, [r3, #0]
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	20000110 	.word	0x20000110

0800f314 <__libc_init_array>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	4d0d      	ldr	r5, [pc, #52]	; (800f34c <__libc_init_array+0x38>)
 800f318:	4c0d      	ldr	r4, [pc, #52]	; (800f350 <__libc_init_array+0x3c>)
 800f31a:	1b64      	subs	r4, r4, r5
 800f31c:	10a4      	asrs	r4, r4, #2
 800f31e:	2600      	movs	r6, #0
 800f320:	42a6      	cmp	r6, r4
 800f322:	d109      	bne.n	800f338 <__libc_init_array+0x24>
 800f324:	4d0b      	ldr	r5, [pc, #44]	; (800f354 <__libc_init_array+0x40>)
 800f326:	4c0c      	ldr	r4, [pc, #48]	; (800f358 <__libc_init_array+0x44>)
 800f328:	f000 fcf8 	bl	800fd1c <_init>
 800f32c:	1b64      	subs	r4, r4, r5
 800f32e:	10a4      	asrs	r4, r4, #2
 800f330:	2600      	movs	r6, #0
 800f332:	42a6      	cmp	r6, r4
 800f334:	d105      	bne.n	800f342 <__libc_init_array+0x2e>
 800f336:	bd70      	pop	{r4, r5, r6, pc}
 800f338:	f855 3b04 	ldr.w	r3, [r5], #4
 800f33c:	4798      	blx	r3
 800f33e:	3601      	adds	r6, #1
 800f340:	e7ee      	b.n	800f320 <__libc_init_array+0xc>
 800f342:	f855 3b04 	ldr.w	r3, [r5], #4
 800f346:	4798      	blx	r3
 800f348:	3601      	adds	r6, #1
 800f34a:	e7f2      	b.n	800f332 <__libc_init_array+0x1e>
 800f34c:	0800fff0 	.word	0x0800fff0
 800f350:	0800fff0 	.word	0x0800fff0
 800f354:	0800fff0 	.word	0x0800fff0
 800f358:	0800fff4 	.word	0x0800fff4

0800f35c <__retarget_lock_acquire_recursive>:
 800f35c:	4770      	bx	lr

0800f35e <__retarget_lock_release_recursive>:
 800f35e:	4770      	bx	lr

0800f360 <memcpy>:
 800f360:	440a      	add	r2, r1
 800f362:	4291      	cmp	r1, r2
 800f364:	f100 33ff 	add.w	r3, r0, #4294967295
 800f368:	d100      	bne.n	800f36c <memcpy+0xc>
 800f36a:	4770      	bx	lr
 800f36c:	b510      	push	{r4, lr}
 800f36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f372:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f376:	4291      	cmp	r1, r2
 800f378:	d1f9      	bne.n	800f36e <memcpy+0xe>
 800f37a:	bd10      	pop	{r4, pc}

0800f37c <memset>:
 800f37c:	4402      	add	r2, r0
 800f37e:	4603      	mov	r3, r0
 800f380:	4293      	cmp	r3, r2
 800f382:	d100      	bne.n	800f386 <memset+0xa>
 800f384:	4770      	bx	lr
 800f386:	f803 1b01 	strb.w	r1, [r3], #1
 800f38a:	e7f9      	b.n	800f380 <memset+0x4>

0800f38c <sbrk_aligned>:
 800f38c:	b570      	push	{r4, r5, r6, lr}
 800f38e:	4e0e      	ldr	r6, [pc, #56]	; (800f3c8 <sbrk_aligned+0x3c>)
 800f390:	460c      	mov	r4, r1
 800f392:	6831      	ldr	r1, [r6, #0]
 800f394:	4605      	mov	r5, r0
 800f396:	b911      	cbnz	r1, 800f39e <sbrk_aligned+0x12>
 800f398:	f000 f8f6 	bl	800f588 <_sbrk_r>
 800f39c:	6030      	str	r0, [r6, #0]
 800f39e:	4621      	mov	r1, r4
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	f000 f8f1 	bl	800f588 <_sbrk_r>
 800f3a6:	1c43      	adds	r3, r0, #1
 800f3a8:	d00a      	beq.n	800f3c0 <sbrk_aligned+0x34>
 800f3aa:	1cc4      	adds	r4, r0, #3
 800f3ac:	f024 0403 	bic.w	r4, r4, #3
 800f3b0:	42a0      	cmp	r0, r4
 800f3b2:	d007      	beq.n	800f3c4 <sbrk_aligned+0x38>
 800f3b4:	1a21      	subs	r1, r4, r0
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f000 f8e6 	bl	800f588 <_sbrk_r>
 800f3bc:	3001      	adds	r0, #1
 800f3be:	d101      	bne.n	800f3c4 <sbrk_aligned+0x38>
 800f3c0:	f04f 34ff 	mov.w	r4, #4294967295
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	bd70      	pop	{r4, r5, r6, pc}
 800f3c8:	200060d4 	.word	0x200060d4

0800f3cc <_malloc_r>:
 800f3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d0:	1ccd      	adds	r5, r1, #3
 800f3d2:	f025 0503 	bic.w	r5, r5, #3
 800f3d6:	3508      	adds	r5, #8
 800f3d8:	2d0c      	cmp	r5, #12
 800f3da:	bf38      	it	cc
 800f3dc:	250c      	movcc	r5, #12
 800f3de:	2d00      	cmp	r5, #0
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	db01      	blt.n	800f3e8 <_malloc_r+0x1c>
 800f3e4:	42a9      	cmp	r1, r5
 800f3e6:	d905      	bls.n	800f3f4 <_malloc_r+0x28>
 800f3e8:	230c      	movs	r3, #12
 800f3ea:	603b      	str	r3, [r7, #0]
 800f3ec:	2600      	movs	r6, #0
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f4:	4e2e      	ldr	r6, [pc, #184]	; (800f4b0 <_malloc_r+0xe4>)
 800f3f6:	f000 f8f7 	bl	800f5e8 <__malloc_lock>
 800f3fa:	6833      	ldr	r3, [r6, #0]
 800f3fc:	461c      	mov	r4, r3
 800f3fe:	bb34      	cbnz	r4, 800f44e <_malloc_r+0x82>
 800f400:	4629      	mov	r1, r5
 800f402:	4638      	mov	r0, r7
 800f404:	f7ff ffc2 	bl	800f38c <sbrk_aligned>
 800f408:	1c43      	adds	r3, r0, #1
 800f40a:	4604      	mov	r4, r0
 800f40c:	d14d      	bne.n	800f4aa <_malloc_r+0xde>
 800f40e:	6834      	ldr	r4, [r6, #0]
 800f410:	4626      	mov	r6, r4
 800f412:	2e00      	cmp	r6, #0
 800f414:	d140      	bne.n	800f498 <_malloc_r+0xcc>
 800f416:	6823      	ldr	r3, [r4, #0]
 800f418:	4631      	mov	r1, r6
 800f41a:	4638      	mov	r0, r7
 800f41c:	eb04 0803 	add.w	r8, r4, r3
 800f420:	f000 f8b2 	bl	800f588 <_sbrk_r>
 800f424:	4580      	cmp	r8, r0
 800f426:	d13a      	bne.n	800f49e <_malloc_r+0xd2>
 800f428:	6821      	ldr	r1, [r4, #0]
 800f42a:	3503      	adds	r5, #3
 800f42c:	1a6d      	subs	r5, r5, r1
 800f42e:	f025 0503 	bic.w	r5, r5, #3
 800f432:	3508      	adds	r5, #8
 800f434:	2d0c      	cmp	r5, #12
 800f436:	bf38      	it	cc
 800f438:	250c      	movcc	r5, #12
 800f43a:	4629      	mov	r1, r5
 800f43c:	4638      	mov	r0, r7
 800f43e:	f7ff ffa5 	bl	800f38c <sbrk_aligned>
 800f442:	3001      	adds	r0, #1
 800f444:	d02b      	beq.n	800f49e <_malloc_r+0xd2>
 800f446:	6823      	ldr	r3, [r4, #0]
 800f448:	442b      	add	r3, r5
 800f44a:	6023      	str	r3, [r4, #0]
 800f44c:	e00e      	b.n	800f46c <_malloc_r+0xa0>
 800f44e:	6822      	ldr	r2, [r4, #0]
 800f450:	1b52      	subs	r2, r2, r5
 800f452:	d41e      	bmi.n	800f492 <_malloc_r+0xc6>
 800f454:	2a0b      	cmp	r2, #11
 800f456:	d916      	bls.n	800f486 <_malloc_r+0xba>
 800f458:	1961      	adds	r1, r4, r5
 800f45a:	42a3      	cmp	r3, r4
 800f45c:	6025      	str	r5, [r4, #0]
 800f45e:	bf18      	it	ne
 800f460:	6059      	strne	r1, [r3, #4]
 800f462:	6863      	ldr	r3, [r4, #4]
 800f464:	bf08      	it	eq
 800f466:	6031      	streq	r1, [r6, #0]
 800f468:	5162      	str	r2, [r4, r5]
 800f46a:	604b      	str	r3, [r1, #4]
 800f46c:	4638      	mov	r0, r7
 800f46e:	f104 060b 	add.w	r6, r4, #11
 800f472:	f000 f8bf 	bl	800f5f4 <__malloc_unlock>
 800f476:	f026 0607 	bic.w	r6, r6, #7
 800f47a:	1d23      	adds	r3, r4, #4
 800f47c:	1af2      	subs	r2, r6, r3
 800f47e:	d0b6      	beq.n	800f3ee <_malloc_r+0x22>
 800f480:	1b9b      	subs	r3, r3, r6
 800f482:	50a3      	str	r3, [r4, r2]
 800f484:	e7b3      	b.n	800f3ee <_malloc_r+0x22>
 800f486:	6862      	ldr	r2, [r4, #4]
 800f488:	42a3      	cmp	r3, r4
 800f48a:	bf0c      	ite	eq
 800f48c:	6032      	streq	r2, [r6, #0]
 800f48e:	605a      	strne	r2, [r3, #4]
 800f490:	e7ec      	b.n	800f46c <_malloc_r+0xa0>
 800f492:	4623      	mov	r3, r4
 800f494:	6864      	ldr	r4, [r4, #4]
 800f496:	e7b2      	b.n	800f3fe <_malloc_r+0x32>
 800f498:	4634      	mov	r4, r6
 800f49a:	6876      	ldr	r6, [r6, #4]
 800f49c:	e7b9      	b.n	800f412 <_malloc_r+0x46>
 800f49e:	230c      	movs	r3, #12
 800f4a0:	603b      	str	r3, [r7, #0]
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	f000 f8a6 	bl	800f5f4 <__malloc_unlock>
 800f4a8:	e7a1      	b.n	800f3ee <_malloc_r+0x22>
 800f4aa:	6025      	str	r5, [r4, #0]
 800f4ac:	e7de      	b.n	800f46c <_malloc_r+0xa0>
 800f4ae:	bf00      	nop
 800f4b0:	200060d0 	.word	0x200060d0

0800f4b4 <cleanup_glue>:
 800f4b4:	b538      	push	{r3, r4, r5, lr}
 800f4b6:	460c      	mov	r4, r1
 800f4b8:	6809      	ldr	r1, [r1, #0]
 800f4ba:	4605      	mov	r5, r0
 800f4bc:	b109      	cbz	r1, 800f4c2 <cleanup_glue+0xe>
 800f4be:	f7ff fff9 	bl	800f4b4 <cleanup_glue>
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4ca:	f000 b899 	b.w	800f600 <_free_r>
	...

0800f4d0 <_reclaim_reent>:
 800f4d0:	4b2c      	ldr	r3, [pc, #176]	; (800f584 <_reclaim_reent+0xb4>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4283      	cmp	r3, r0
 800f4d6:	b570      	push	{r4, r5, r6, lr}
 800f4d8:	4604      	mov	r4, r0
 800f4da:	d051      	beq.n	800f580 <_reclaim_reent+0xb0>
 800f4dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f4de:	b143      	cbz	r3, 800f4f2 <_reclaim_reent+0x22>
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d14a      	bne.n	800f57c <_reclaim_reent+0xac>
 800f4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4e8:	6819      	ldr	r1, [r3, #0]
 800f4ea:	b111      	cbz	r1, 800f4f2 <_reclaim_reent+0x22>
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f000 f887 	bl	800f600 <_free_r>
 800f4f2:	6961      	ldr	r1, [r4, #20]
 800f4f4:	b111      	cbz	r1, 800f4fc <_reclaim_reent+0x2c>
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	f000 f882 	bl	800f600 <_free_r>
 800f4fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f4fe:	b111      	cbz	r1, 800f506 <_reclaim_reent+0x36>
 800f500:	4620      	mov	r0, r4
 800f502:	f000 f87d 	bl	800f600 <_free_r>
 800f506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f508:	b111      	cbz	r1, 800f510 <_reclaim_reent+0x40>
 800f50a:	4620      	mov	r0, r4
 800f50c:	f000 f878 	bl	800f600 <_free_r>
 800f510:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f512:	b111      	cbz	r1, 800f51a <_reclaim_reent+0x4a>
 800f514:	4620      	mov	r0, r4
 800f516:	f000 f873 	bl	800f600 <_free_r>
 800f51a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f51c:	b111      	cbz	r1, 800f524 <_reclaim_reent+0x54>
 800f51e:	4620      	mov	r0, r4
 800f520:	f000 f86e 	bl	800f600 <_free_r>
 800f524:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f526:	b111      	cbz	r1, 800f52e <_reclaim_reent+0x5e>
 800f528:	4620      	mov	r0, r4
 800f52a:	f000 f869 	bl	800f600 <_free_r>
 800f52e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f530:	b111      	cbz	r1, 800f538 <_reclaim_reent+0x68>
 800f532:	4620      	mov	r0, r4
 800f534:	f000 f864 	bl	800f600 <_free_r>
 800f538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f53a:	b111      	cbz	r1, 800f542 <_reclaim_reent+0x72>
 800f53c:	4620      	mov	r0, r4
 800f53e:	f000 f85f 	bl	800f600 <_free_r>
 800f542:	69a3      	ldr	r3, [r4, #24]
 800f544:	b1e3      	cbz	r3, 800f580 <_reclaim_reent+0xb0>
 800f546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f548:	4620      	mov	r0, r4
 800f54a:	4798      	blx	r3
 800f54c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f54e:	b1b9      	cbz	r1, 800f580 <_reclaim_reent+0xb0>
 800f550:	4620      	mov	r0, r4
 800f552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f556:	f7ff bfad 	b.w	800f4b4 <cleanup_glue>
 800f55a:	5949      	ldr	r1, [r1, r5]
 800f55c:	b941      	cbnz	r1, 800f570 <_reclaim_reent+0xa0>
 800f55e:	3504      	adds	r5, #4
 800f560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f562:	2d80      	cmp	r5, #128	; 0x80
 800f564:	68d9      	ldr	r1, [r3, #12]
 800f566:	d1f8      	bne.n	800f55a <_reclaim_reent+0x8a>
 800f568:	4620      	mov	r0, r4
 800f56a:	f000 f849 	bl	800f600 <_free_r>
 800f56e:	e7ba      	b.n	800f4e6 <_reclaim_reent+0x16>
 800f570:	680e      	ldr	r6, [r1, #0]
 800f572:	4620      	mov	r0, r4
 800f574:	f000 f844 	bl	800f600 <_free_r>
 800f578:	4631      	mov	r1, r6
 800f57a:	e7ef      	b.n	800f55c <_reclaim_reent+0x8c>
 800f57c:	2500      	movs	r5, #0
 800f57e:	e7ef      	b.n	800f560 <_reclaim_reent+0x90>
 800f580:	bd70      	pop	{r4, r5, r6, pc}
 800f582:	bf00      	nop
 800f584:	20000110 	.word	0x20000110

0800f588 <_sbrk_r>:
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4d06      	ldr	r5, [pc, #24]	; (800f5a4 <_sbrk_r+0x1c>)
 800f58c:	2300      	movs	r3, #0
 800f58e:	4604      	mov	r4, r0
 800f590:	4608      	mov	r0, r1
 800f592:	602b      	str	r3, [r5, #0]
 800f594:	f7f2 f9ec 	bl	8001970 <_sbrk>
 800f598:	1c43      	adds	r3, r0, #1
 800f59a:	d102      	bne.n	800f5a2 <_sbrk_r+0x1a>
 800f59c:	682b      	ldr	r3, [r5, #0]
 800f59e:	b103      	cbz	r3, 800f5a2 <_sbrk_r+0x1a>
 800f5a0:	6023      	str	r3, [r4, #0]
 800f5a2:	bd38      	pop	{r3, r4, r5, pc}
 800f5a4:	200060d8 	.word	0x200060d8

0800f5a8 <siprintf>:
 800f5a8:	b40e      	push	{r1, r2, r3}
 800f5aa:	b500      	push	{lr}
 800f5ac:	b09c      	sub	sp, #112	; 0x70
 800f5ae:	ab1d      	add	r3, sp, #116	; 0x74
 800f5b0:	9002      	str	r0, [sp, #8]
 800f5b2:	9006      	str	r0, [sp, #24]
 800f5b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f5b8:	4809      	ldr	r0, [pc, #36]	; (800f5e0 <siprintf+0x38>)
 800f5ba:	9107      	str	r1, [sp, #28]
 800f5bc:	9104      	str	r1, [sp, #16]
 800f5be:	4909      	ldr	r1, [pc, #36]	; (800f5e4 <siprintf+0x3c>)
 800f5c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5c4:	9105      	str	r1, [sp, #20]
 800f5c6:	6800      	ldr	r0, [r0, #0]
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	a902      	add	r1, sp, #8
 800f5cc:	f000 f8c0 	bl	800f750 <_svfiprintf_r>
 800f5d0:	9b02      	ldr	r3, [sp, #8]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	701a      	strb	r2, [r3, #0]
 800f5d6:	b01c      	add	sp, #112	; 0x70
 800f5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5dc:	b003      	add	sp, #12
 800f5de:	4770      	bx	lr
 800f5e0:	20000110 	.word	0x20000110
 800f5e4:	ffff0208 	.word	0xffff0208

0800f5e8 <__malloc_lock>:
 800f5e8:	4801      	ldr	r0, [pc, #4]	; (800f5f0 <__malloc_lock+0x8>)
 800f5ea:	f7ff beb7 	b.w	800f35c <__retarget_lock_acquire_recursive>
 800f5ee:	bf00      	nop
 800f5f0:	200060cc 	.word	0x200060cc

0800f5f4 <__malloc_unlock>:
 800f5f4:	4801      	ldr	r0, [pc, #4]	; (800f5fc <__malloc_unlock+0x8>)
 800f5f6:	f7ff beb2 	b.w	800f35e <__retarget_lock_release_recursive>
 800f5fa:	bf00      	nop
 800f5fc:	200060cc 	.word	0x200060cc

0800f600 <_free_r>:
 800f600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f602:	2900      	cmp	r1, #0
 800f604:	d044      	beq.n	800f690 <_free_r+0x90>
 800f606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f60a:	9001      	str	r0, [sp, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f1a1 0404 	sub.w	r4, r1, #4
 800f612:	bfb8      	it	lt
 800f614:	18e4      	addlt	r4, r4, r3
 800f616:	f7ff ffe7 	bl	800f5e8 <__malloc_lock>
 800f61a:	4a1e      	ldr	r2, [pc, #120]	; (800f694 <_free_r+0x94>)
 800f61c:	9801      	ldr	r0, [sp, #4]
 800f61e:	6813      	ldr	r3, [r2, #0]
 800f620:	b933      	cbnz	r3, 800f630 <_free_r+0x30>
 800f622:	6063      	str	r3, [r4, #4]
 800f624:	6014      	str	r4, [r2, #0]
 800f626:	b003      	add	sp, #12
 800f628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f62c:	f7ff bfe2 	b.w	800f5f4 <__malloc_unlock>
 800f630:	42a3      	cmp	r3, r4
 800f632:	d908      	bls.n	800f646 <_free_r+0x46>
 800f634:	6825      	ldr	r5, [r4, #0]
 800f636:	1961      	adds	r1, r4, r5
 800f638:	428b      	cmp	r3, r1
 800f63a:	bf01      	itttt	eq
 800f63c:	6819      	ldreq	r1, [r3, #0]
 800f63e:	685b      	ldreq	r3, [r3, #4]
 800f640:	1949      	addeq	r1, r1, r5
 800f642:	6021      	streq	r1, [r4, #0]
 800f644:	e7ed      	b.n	800f622 <_free_r+0x22>
 800f646:	461a      	mov	r2, r3
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	b10b      	cbz	r3, 800f650 <_free_r+0x50>
 800f64c:	42a3      	cmp	r3, r4
 800f64e:	d9fa      	bls.n	800f646 <_free_r+0x46>
 800f650:	6811      	ldr	r1, [r2, #0]
 800f652:	1855      	adds	r5, r2, r1
 800f654:	42a5      	cmp	r5, r4
 800f656:	d10b      	bne.n	800f670 <_free_r+0x70>
 800f658:	6824      	ldr	r4, [r4, #0]
 800f65a:	4421      	add	r1, r4
 800f65c:	1854      	adds	r4, r2, r1
 800f65e:	42a3      	cmp	r3, r4
 800f660:	6011      	str	r1, [r2, #0]
 800f662:	d1e0      	bne.n	800f626 <_free_r+0x26>
 800f664:	681c      	ldr	r4, [r3, #0]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	6053      	str	r3, [r2, #4]
 800f66a:	4421      	add	r1, r4
 800f66c:	6011      	str	r1, [r2, #0]
 800f66e:	e7da      	b.n	800f626 <_free_r+0x26>
 800f670:	d902      	bls.n	800f678 <_free_r+0x78>
 800f672:	230c      	movs	r3, #12
 800f674:	6003      	str	r3, [r0, #0]
 800f676:	e7d6      	b.n	800f626 <_free_r+0x26>
 800f678:	6825      	ldr	r5, [r4, #0]
 800f67a:	1961      	adds	r1, r4, r5
 800f67c:	428b      	cmp	r3, r1
 800f67e:	bf04      	itt	eq
 800f680:	6819      	ldreq	r1, [r3, #0]
 800f682:	685b      	ldreq	r3, [r3, #4]
 800f684:	6063      	str	r3, [r4, #4]
 800f686:	bf04      	itt	eq
 800f688:	1949      	addeq	r1, r1, r5
 800f68a:	6021      	streq	r1, [r4, #0]
 800f68c:	6054      	str	r4, [r2, #4]
 800f68e:	e7ca      	b.n	800f626 <_free_r+0x26>
 800f690:	b003      	add	sp, #12
 800f692:	bd30      	pop	{r4, r5, pc}
 800f694:	200060d0 	.word	0x200060d0

0800f698 <__ssputs_r>:
 800f698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f69c:	688e      	ldr	r6, [r1, #8]
 800f69e:	429e      	cmp	r6, r3
 800f6a0:	4682      	mov	sl, r0
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	4690      	mov	r8, r2
 800f6a6:	461f      	mov	r7, r3
 800f6a8:	d838      	bhi.n	800f71c <__ssputs_r+0x84>
 800f6aa:	898a      	ldrh	r2, [r1, #12]
 800f6ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6b0:	d032      	beq.n	800f718 <__ssputs_r+0x80>
 800f6b2:	6825      	ldr	r5, [r4, #0]
 800f6b4:	6909      	ldr	r1, [r1, #16]
 800f6b6:	eba5 0901 	sub.w	r9, r5, r1
 800f6ba:	6965      	ldr	r5, [r4, #20]
 800f6bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	444b      	add	r3, r9
 800f6c8:	106d      	asrs	r5, r5, #1
 800f6ca:	429d      	cmp	r5, r3
 800f6cc:	bf38      	it	cc
 800f6ce:	461d      	movcc	r5, r3
 800f6d0:	0553      	lsls	r3, r2, #21
 800f6d2:	d531      	bpl.n	800f738 <__ssputs_r+0xa0>
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	f7ff fe79 	bl	800f3cc <_malloc_r>
 800f6da:	4606      	mov	r6, r0
 800f6dc:	b950      	cbnz	r0, 800f6f4 <__ssputs_r+0x5c>
 800f6de:	230c      	movs	r3, #12
 800f6e0:	f8ca 3000 	str.w	r3, [sl]
 800f6e4:	89a3      	ldrh	r3, [r4, #12]
 800f6e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6ea:	81a3      	strh	r3, [r4, #12]
 800f6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6f4:	6921      	ldr	r1, [r4, #16]
 800f6f6:	464a      	mov	r2, r9
 800f6f8:	f7ff fe32 	bl	800f360 <memcpy>
 800f6fc:	89a3      	ldrh	r3, [r4, #12]
 800f6fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f706:	81a3      	strh	r3, [r4, #12]
 800f708:	6126      	str	r6, [r4, #16]
 800f70a:	6165      	str	r5, [r4, #20]
 800f70c:	444e      	add	r6, r9
 800f70e:	eba5 0509 	sub.w	r5, r5, r9
 800f712:	6026      	str	r6, [r4, #0]
 800f714:	60a5      	str	r5, [r4, #8]
 800f716:	463e      	mov	r6, r7
 800f718:	42be      	cmp	r6, r7
 800f71a:	d900      	bls.n	800f71e <__ssputs_r+0x86>
 800f71c:	463e      	mov	r6, r7
 800f71e:	6820      	ldr	r0, [r4, #0]
 800f720:	4632      	mov	r2, r6
 800f722:	4641      	mov	r1, r8
 800f724:	f000 faa8 	bl	800fc78 <memmove>
 800f728:	68a3      	ldr	r3, [r4, #8]
 800f72a:	1b9b      	subs	r3, r3, r6
 800f72c:	60a3      	str	r3, [r4, #8]
 800f72e:	6823      	ldr	r3, [r4, #0]
 800f730:	4433      	add	r3, r6
 800f732:	6023      	str	r3, [r4, #0]
 800f734:	2000      	movs	r0, #0
 800f736:	e7db      	b.n	800f6f0 <__ssputs_r+0x58>
 800f738:	462a      	mov	r2, r5
 800f73a:	f000 fab7 	bl	800fcac <_realloc_r>
 800f73e:	4606      	mov	r6, r0
 800f740:	2800      	cmp	r0, #0
 800f742:	d1e1      	bne.n	800f708 <__ssputs_r+0x70>
 800f744:	6921      	ldr	r1, [r4, #16]
 800f746:	4650      	mov	r0, sl
 800f748:	f7ff ff5a 	bl	800f600 <_free_r>
 800f74c:	e7c7      	b.n	800f6de <__ssputs_r+0x46>
	...

0800f750 <_svfiprintf_r>:
 800f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f754:	4698      	mov	r8, r3
 800f756:	898b      	ldrh	r3, [r1, #12]
 800f758:	061b      	lsls	r3, r3, #24
 800f75a:	b09d      	sub	sp, #116	; 0x74
 800f75c:	4607      	mov	r7, r0
 800f75e:	460d      	mov	r5, r1
 800f760:	4614      	mov	r4, r2
 800f762:	d50e      	bpl.n	800f782 <_svfiprintf_r+0x32>
 800f764:	690b      	ldr	r3, [r1, #16]
 800f766:	b963      	cbnz	r3, 800f782 <_svfiprintf_r+0x32>
 800f768:	2140      	movs	r1, #64	; 0x40
 800f76a:	f7ff fe2f 	bl	800f3cc <_malloc_r>
 800f76e:	6028      	str	r0, [r5, #0]
 800f770:	6128      	str	r0, [r5, #16]
 800f772:	b920      	cbnz	r0, 800f77e <_svfiprintf_r+0x2e>
 800f774:	230c      	movs	r3, #12
 800f776:	603b      	str	r3, [r7, #0]
 800f778:	f04f 30ff 	mov.w	r0, #4294967295
 800f77c:	e0d1      	b.n	800f922 <_svfiprintf_r+0x1d2>
 800f77e:	2340      	movs	r3, #64	; 0x40
 800f780:	616b      	str	r3, [r5, #20]
 800f782:	2300      	movs	r3, #0
 800f784:	9309      	str	r3, [sp, #36]	; 0x24
 800f786:	2320      	movs	r3, #32
 800f788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f78c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f790:	2330      	movs	r3, #48	; 0x30
 800f792:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f93c <_svfiprintf_r+0x1ec>
 800f796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f79a:	f04f 0901 	mov.w	r9, #1
 800f79e:	4623      	mov	r3, r4
 800f7a0:	469a      	mov	sl, r3
 800f7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7a6:	b10a      	cbz	r2, 800f7ac <_svfiprintf_r+0x5c>
 800f7a8:	2a25      	cmp	r2, #37	; 0x25
 800f7aa:	d1f9      	bne.n	800f7a0 <_svfiprintf_r+0x50>
 800f7ac:	ebba 0b04 	subs.w	fp, sl, r4
 800f7b0:	d00b      	beq.n	800f7ca <_svfiprintf_r+0x7a>
 800f7b2:	465b      	mov	r3, fp
 800f7b4:	4622      	mov	r2, r4
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	4638      	mov	r0, r7
 800f7ba:	f7ff ff6d 	bl	800f698 <__ssputs_r>
 800f7be:	3001      	adds	r0, #1
 800f7c0:	f000 80aa 	beq.w	800f918 <_svfiprintf_r+0x1c8>
 800f7c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7c6:	445a      	add	r2, fp
 800f7c8:	9209      	str	r2, [sp, #36]	; 0x24
 800f7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f000 80a2 	beq.w	800f918 <_svfiprintf_r+0x1c8>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f7da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7de:	f10a 0a01 	add.w	sl, sl, #1
 800f7e2:	9304      	str	r3, [sp, #16]
 800f7e4:	9307      	str	r3, [sp, #28]
 800f7e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7ea:	931a      	str	r3, [sp, #104]	; 0x68
 800f7ec:	4654      	mov	r4, sl
 800f7ee:	2205      	movs	r2, #5
 800f7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7f4:	4851      	ldr	r0, [pc, #324]	; (800f93c <_svfiprintf_r+0x1ec>)
 800f7f6:	f7f0 fd03 	bl	8000200 <memchr>
 800f7fa:	9a04      	ldr	r2, [sp, #16]
 800f7fc:	b9d8      	cbnz	r0, 800f836 <_svfiprintf_r+0xe6>
 800f7fe:	06d0      	lsls	r0, r2, #27
 800f800:	bf44      	itt	mi
 800f802:	2320      	movmi	r3, #32
 800f804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f808:	0711      	lsls	r1, r2, #28
 800f80a:	bf44      	itt	mi
 800f80c:	232b      	movmi	r3, #43	; 0x2b
 800f80e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f812:	f89a 3000 	ldrb.w	r3, [sl]
 800f816:	2b2a      	cmp	r3, #42	; 0x2a
 800f818:	d015      	beq.n	800f846 <_svfiprintf_r+0xf6>
 800f81a:	9a07      	ldr	r2, [sp, #28]
 800f81c:	4654      	mov	r4, sl
 800f81e:	2000      	movs	r0, #0
 800f820:	f04f 0c0a 	mov.w	ip, #10
 800f824:	4621      	mov	r1, r4
 800f826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f82a:	3b30      	subs	r3, #48	; 0x30
 800f82c:	2b09      	cmp	r3, #9
 800f82e:	d94e      	bls.n	800f8ce <_svfiprintf_r+0x17e>
 800f830:	b1b0      	cbz	r0, 800f860 <_svfiprintf_r+0x110>
 800f832:	9207      	str	r2, [sp, #28]
 800f834:	e014      	b.n	800f860 <_svfiprintf_r+0x110>
 800f836:	eba0 0308 	sub.w	r3, r0, r8
 800f83a:	fa09 f303 	lsl.w	r3, r9, r3
 800f83e:	4313      	orrs	r3, r2
 800f840:	9304      	str	r3, [sp, #16]
 800f842:	46a2      	mov	sl, r4
 800f844:	e7d2      	b.n	800f7ec <_svfiprintf_r+0x9c>
 800f846:	9b03      	ldr	r3, [sp, #12]
 800f848:	1d19      	adds	r1, r3, #4
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	9103      	str	r1, [sp, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	bfbb      	ittet	lt
 800f852:	425b      	neglt	r3, r3
 800f854:	f042 0202 	orrlt.w	r2, r2, #2
 800f858:	9307      	strge	r3, [sp, #28]
 800f85a:	9307      	strlt	r3, [sp, #28]
 800f85c:	bfb8      	it	lt
 800f85e:	9204      	strlt	r2, [sp, #16]
 800f860:	7823      	ldrb	r3, [r4, #0]
 800f862:	2b2e      	cmp	r3, #46	; 0x2e
 800f864:	d10c      	bne.n	800f880 <_svfiprintf_r+0x130>
 800f866:	7863      	ldrb	r3, [r4, #1]
 800f868:	2b2a      	cmp	r3, #42	; 0x2a
 800f86a:	d135      	bne.n	800f8d8 <_svfiprintf_r+0x188>
 800f86c:	9b03      	ldr	r3, [sp, #12]
 800f86e:	1d1a      	adds	r2, r3, #4
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	9203      	str	r2, [sp, #12]
 800f874:	2b00      	cmp	r3, #0
 800f876:	bfb8      	it	lt
 800f878:	f04f 33ff 	movlt.w	r3, #4294967295
 800f87c:	3402      	adds	r4, #2
 800f87e:	9305      	str	r3, [sp, #20]
 800f880:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f94c <_svfiprintf_r+0x1fc>
 800f884:	7821      	ldrb	r1, [r4, #0]
 800f886:	2203      	movs	r2, #3
 800f888:	4650      	mov	r0, sl
 800f88a:	f7f0 fcb9 	bl	8000200 <memchr>
 800f88e:	b140      	cbz	r0, 800f8a2 <_svfiprintf_r+0x152>
 800f890:	2340      	movs	r3, #64	; 0x40
 800f892:	eba0 000a 	sub.w	r0, r0, sl
 800f896:	fa03 f000 	lsl.w	r0, r3, r0
 800f89a:	9b04      	ldr	r3, [sp, #16]
 800f89c:	4303      	orrs	r3, r0
 800f89e:	3401      	adds	r4, #1
 800f8a0:	9304      	str	r3, [sp, #16]
 800f8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a6:	4826      	ldr	r0, [pc, #152]	; (800f940 <_svfiprintf_r+0x1f0>)
 800f8a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8ac:	2206      	movs	r2, #6
 800f8ae:	f7f0 fca7 	bl	8000200 <memchr>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	d038      	beq.n	800f928 <_svfiprintf_r+0x1d8>
 800f8b6:	4b23      	ldr	r3, [pc, #140]	; (800f944 <_svfiprintf_r+0x1f4>)
 800f8b8:	bb1b      	cbnz	r3, 800f902 <_svfiprintf_r+0x1b2>
 800f8ba:	9b03      	ldr	r3, [sp, #12]
 800f8bc:	3307      	adds	r3, #7
 800f8be:	f023 0307 	bic.w	r3, r3, #7
 800f8c2:	3308      	adds	r3, #8
 800f8c4:	9303      	str	r3, [sp, #12]
 800f8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c8:	4433      	add	r3, r6
 800f8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800f8cc:	e767      	b.n	800f79e <_svfiprintf_r+0x4e>
 800f8ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	2001      	movs	r0, #1
 800f8d6:	e7a5      	b.n	800f824 <_svfiprintf_r+0xd4>
 800f8d8:	2300      	movs	r3, #0
 800f8da:	3401      	adds	r4, #1
 800f8dc:	9305      	str	r3, [sp, #20]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	f04f 0c0a 	mov.w	ip, #10
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8ea:	3a30      	subs	r2, #48	; 0x30
 800f8ec:	2a09      	cmp	r2, #9
 800f8ee:	d903      	bls.n	800f8f8 <_svfiprintf_r+0x1a8>
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d0c5      	beq.n	800f880 <_svfiprintf_r+0x130>
 800f8f4:	9105      	str	r1, [sp, #20]
 800f8f6:	e7c3      	b.n	800f880 <_svfiprintf_r+0x130>
 800f8f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8fc:	4604      	mov	r4, r0
 800f8fe:	2301      	movs	r3, #1
 800f900:	e7f0      	b.n	800f8e4 <_svfiprintf_r+0x194>
 800f902:	ab03      	add	r3, sp, #12
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	462a      	mov	r2, r5
 800f908:	4b0f      	ldr	r3, [pc, #60]	; (800f948 <_svfiprintf_r+0x1f8>)
 800f90a:	a904      	add	r1, sp, #16
 800f90c:	4638      	mov	r0, r7
 800f90e:	f3af 8000 	nop.w
 800f912:	1c42      	adds	r2, r0, #1
 800f914:	4606      	mov	r6, r0
 800f916:	d1d6      	bne.n	800f8c6 <_svfiprintf_r+0x176>
 800f918:	89ab      	ldrh	r3, [r5, #12]
 800f91a:	065b      	lsls	r3, r3, #25
 800f91c:	f53f af2c 	bmi.w	800f778 <_svfiprintf_r+0x28>
 800f920:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f922:	b01d      	add	sp, #116	; 0x74
 800f924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f928:	ab03      	add	r3, sp, #12
 800f92a:	9300      	str	r3, [sp, #0]
 800f92c:	462a      	mov	r2, r5
 800f92e:	4b06      	ldr	r3, [pc, #24]	; (800f948 <_svfiprintf_r+0x1f8>)
 800f930:	a904      	add	r1, sp, #16
 800f932:	4638      	mov	r0, r7
 800f934:	f000 f87a 	bl	800fa2c <_printf_i>
 800f938:	e7eb      	b.n	800f912 <_svfiprintf_r+0x1c2>
 800f93a:	bf00      	nop
 800f93c:	0800ffb4 	.word	0x0800ffb4
 800f940:	0800ffbe 	.word	0x0800ffbe
 800f944:	00000000 	.word	0x00000000
 800f948:	0800f699 	.word	0x0800f699
 800f94c:	0800ffba 	.word	0x0800ffba

0800f950 <_printf_common>:
 800f950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f954:	4616      	mov	r6, r2
 800f956:	4699      	mov	r9, r3
 800f958:	688a      	ldr	r2, [r1, #8]
 800f95a:	690b      	ldr	r3, [r1, #16]
 800f95c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f960:	4293      	cmp	r3, r2
 800f962:	bfb8      	it	lt
 800f964:	4613      	movlt	r3, r2
 800f966:	6033      	str	r3, [r6, #0]
 800f968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f96c:	4607      	mov	r7, r0
 800f96e:	460c      	mov	r4, r1
 800f970:	b10a      	cbz	r2, 800f976 <_printf_common+0x26>
 800f972:	3301      	adds	r3, #1
 800f974:	6033      	str	r3, [r6, #0]
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	0699      	lsls	r1, r3, #26
 800f97a:	bf42      	ittt	mi
 800f97c:	6833      	ldrmi	r3, [r6, #0]
 800f97e:	3302      	addmi	r3, #2
 800f980:	6033      	strmi	r3, [r6, #0]
 800f982:	6825      	ldr	r5, [r4, #0]
 800f984:	f015 0506 	ands.w	r5, r5, #6
 800f988:	d106      	bne.n	800f998 <_printf_common+0x48>
 800f98a:	f104 0a19 	add.w	sl, r4, #25
 800f98e:	68e3      	ldr	r3, [r4, #12]
 800f990:	6832      	ldr	r2, [r6, #0]
 800f992:	1a9b      	subs	r3, r3, r2
 800f994:	42ab      	cmp	r3, r5
 800f996:	dc26      	bgt.n	800f9e6 <_printf_common+0x96>
 800f998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f99c:	1e13      	subs	r3, r2, #0
 800f99e:	6822      	ldr	r2, [r4, #0]
 800f9a0:	bf18      	it	ne
 800f9a2:	2301      	movne	r3, #1
 800f9a4:	0692      	lsls	r2, r2, #26
 800f9a6:	d42b      	bmi.n	800fa00 <_printf_common+0xb0>
 800f9a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9ac:	4649      	mov	r1, r9
 800f9ae:	4638      	mov	r0, r7
 800f9b0:	47c0      	blx	r8
 800f9b2:	3001      	adds	r0, #1
 800f9b4:	d01e      	beq.n	800f9f4 <_printf_common+0xa4>
 800f9b6:	6823      	ldr	r3, [r4, #0]
 800f9b8:	68e5      	ldr	r5, [r4, #12]
 800f9ba:	6832      	ldr	r2, [r6, #0]
 800f9bc:	f003 0306 	and.w	r3, r3, #6
 800f9c0:	2b04      	cmp	r3, #4
 800f9c2:	bf08      	it	eq
 800f9c4:	1aad      	subeq	r5, r5, r2
 800f9c6:	68a3      	ldr	r3, [r4, #8]
 800f9c8:	6922      	ldr	r2, [r4, #16]
 800f9ca:	bf0c      	ite	eq
 800f9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9d0:	2500      	movne	r5, #0
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	bfc4      	itt	gt
 800f9d6:	1a9b      	subgt	r3, r3, r2
 800f9d8:	18ed      	addgt	r5, r5, r3
 800f9da:	2600      	movs	r6, #0
 800f9dc:	341a      	adds	r4, #26
 800f9de:	42b5      	cmp	r5, r6
 800f9e0:	d11a      	bne.n	800fa18 <_printf_common+0xc8>
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	e008      	b.n	800f9f8 <_printf_common+0xa8>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	4652      	mov	r2, sl
 800f9ea:	4649      	mov	r1, r9
 800f9ec:	4638      	mov	r0, r7
 800f9ee:	47c0      	blx	r8
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	d103      	bne.n	800f9fc <_printf_common+0xac>
 800f9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9fc:	3501      	adds	r5, #1
 800f9fe:	e7c6      	b.n	800f98e <_printf_common+0x3e>
 800fa00:	18e1      	adds	r1, r4, r3
 800fa02:	1c5a      	adds	r2, r3, #1
 800fa04:	2030      	movs	r0, #48	; 0x30
 800fa06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa0a:	4422      	add	r2, r4
 800fa0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa14:	3302      	adds	r3, #2
 800fa16:	e7c7      	b.n	800f9a8 <_printf_common+0x58>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	4622      	mov	r2, r4
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	4638      	mov	r0, r7
 800fa20:	47c0      	blx	r8
 800fa22:	3001      	adds	r0, #1
 800fa24:	d0e6      	beq.n	800f9f4 <_printf_common+0xa4>
 800fa26:	3601      	adds	r6, #1
 800fa28:	e7d9      	b.n	800f9de <_printf_common+0x8e>
	...

0800fa2c <_printf_i>:
 800fa2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa30:	7e0f      	ldrb	r7, [r1, #24]
 800fa32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa34:	2f78      	cmp	r7, #120	; 0x78
 800fa36:	4691      	mov	r9, r2
 800fa38:	4680      	mov	r8, r0
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	469a      	mov	sl, r3
 800fa3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa42:	d807      	bhi.n	800fa54 <_printf_i+0x28>
 800fa44:	2f62      	cmp	r7, #98	; 0x62
 800fa46:	d80a      	bhi.n	800fa5e <_printf_i+0x32>
 800fa48:	2f00      	cmp	r7, #0
 800fa4a:	f000 80d8 	beq.w	800fbfe <_printf_i+0x1d2>
 800fa4e:	2f58      	cmp	r7, #88	; 0x58
 800fa50:	f000 80a3 	beq.w	800fb9a <_printf_i+0x16e>
 800fa54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa5c:	e03a      	b.n	800fad4 <_printf_i+0xa8>
 800fa5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa62:	2b15      	cmp	r3, #21
 800fa64:	d8f6      	bhi.n	800fa54 <_printf_i+0x28>
 800fa66:	a101      	add	r1, pc, #4	; (adr r1, 800fa6c <_printf_i+0x40>)
 800fa68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa6c:	0800fac5 	.word	0x0800fac5
 800fa70:	0800fad9 	.word	0x0800fad9
 800fa74:	0800fa55 	.word	0x0800fa55
 800fa78:	0800fa55 	.word	0x0800fa55
 800fa7c:	0800fa55 	.word	0x0800fa55
 800fa80:	0800fa55 	.word	0x0800fa55
 800fa84:	0800fad9 	.word	0x0800fad9
 800fa88:	0800fa55 	.word	0x0800fa55
 800fa8c:	0800fa55 	.word	0x0800fa55
 800fa90:	0800fa55 	.word	0x0800fa55
 800fa94:	0800fa55 	.word	0x0800fa55
 800fa98:	0800fbe5 	.word	0x0800fbe5
 800fa9c:	0800fb09 	.word	0x0800fb09
 800faa0:	0800fbc7 	.word	0x0800fbc7
 800faa4:	0800fa55 	.word	0x0800fa55
 800faa8:	0800fa55 	.word	0x0800fa55
 800faac:	0800fc07 	.word	0x0800fc07
 800fab0:	0800fa55 	.word	0x0800fa55
 800fab4:	0800fb09 	.word	0x0800fb09
 800fab8:	0800fa55 	.word	0x0800fa55
 800fabc:	0800fa55 	.word	0x0800fa55
 800fac0:	0800fbcf 	.word	0x0800fbcf
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	1d1a      	adds	r2, r3, #4
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	602a      	str	r2, [r5, #0]
 800facc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fad4:	2301      	movs	r3, #1
 800fad6:	e0a3      	b.n	800fc20 <_printf_i+0x1f4>
 800fad8:	6820      	ldr	r0, [r4, #0]
 800fada:	6829      	ldr	r1, [r5, #0]
 800fadc:	0606      	lsls	r6, r0, #24
 800fade:	f101 0304 	add.w	r3, r1, #4
 800fae2:	d50a      	bpl.n	800fafa <_printf_i+0xce>
 800fae4:	680e      	ldr	r6, [r1, #0]
 800fae6:	602b      	str	r3, [r5, #0]
 800fae8:	2e00      	cmp	r6, #0
 800faea:	da03      	bge.n	800faf4 <_printf_i+0xc8>
 800faec:	232d      	movs	r3, #45	; 0x2d
 800faee:	4276      	negs	r6, r6
 800faf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800faf4:	485e      	ldr	r0, [pc, #376]	; (800fc70 <_printf_i+0x244>)
 800faf6:	230a      	movs	r3, #10
 800faf8:	e019      	b.n	800fb2e <_printf_i+0x102>
 800fafa:	680e      	ldr	r6, [r1, #0]
 800fafc:	602b      	str	r3, [r5, #0]
 800fafe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb02:	bf18      	it	ne
 800fb04:	b236      	sxthne	r6, r6
 800fb06:	e7ef      	b.n	800fae8 <_printf_i+0xbc>
 800fb08:	682b      	ldr	r3, [r5, #0]
 800fb0a:	6820      	ldr	r0, [r4, #0]
 800fb0c:	1d19      	adds	r1, r3, #4
 800fb0e:	6029      	str	r1, [r5, #0]
 800fb10:	0601      	lsls	r1, r0, #24
 800fb12:	d501      	bpl.n	800fb18 <_printf_i+0xec>
 800fb14:	681e      	ldr	r6, [r3, #0]
 800fb16:	e002      	b.n	800fb1e <_printf_i+0xf2>
 800fb18:	0646      	lsls	r6, r0, #25
 800fb1a:	d5fb      	bpl.n	800fb14 <_printf_i+0xe8>
 800fb1c:	881e      	ldrh	r6, [r3, #0]
 800fb1e:	4854      	ldr	r0, [pc, #336]	; (800fc70 <_printf_i+0x244>)
 800fb20:	2f6f      	cmp	r7, #111	; 0x6f
 800fb22:	bf0c      	ite	eq
 800fb24:	2308      	moveq	r3, #8
 800fb26:	230a      	movne	r3, #10
 800fb28:	2100      	movs	r1, #0
 800fb2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb2e:	6865      	ldr	r5, [r4, #4]
 800fb30:	60a5      	str	r5, [r4, #8]
 800fb32:	2d00      	cmp	r5, #0
 800fb34:	bfa2      	ittt	ge
 800fb36:	6821      	ldrge	r1, [r4, #0]
 800fb38:	f021 0104 	bicge.w	r1, r1, #4
 800fb3c:	6021      	strge	r1, [r4, #0]
 800fb3e:	b90e      	cbnz	r6, 800fb44 <_printf_i+0x118>
 800fb40:	2d00      	cmp	r5, #0
 800fb42:	d04d      	beq.n	800fbe0 <_printf_i+0x1b4>
 800fb44:	4615      	mov	r5, r2
 800fb46:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb4a:	fb03 6711 	mls	r7, r3, r1, r6
 800fb4e:	5dc7      	ldrb	r7, [r0, r7]
 800fb50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb54:	4637      	mov	r7, r6
 800fb56:	42bb      	cmp	r3, r7
 800fb58:	460e      	mov	r6, r1
 800fb5a:	d9f4      	bls.n	800fb46 <_printf_i+0x11a>
 800fb5c:	2b08      	cmp	r3, #8
 800fb5e:	d10b      	bne.n	800fb78 <_printf_i+0x14c>
 800fb60:	6823      	ldr	r3, [r4, #0]
 800fb62:	07de      	lsls	r6, r3, #31
 800fb64:	d508      	bpl.n	800fb78 <_printf_i+0x14c>
 800fb66:	6923      	ldr	r3, [r4, #16]
 800fb68:	6861      	ldr	r1, [r4, #4]
 800fb6a:	4299      	cmp	r1, r3
 800fb6c:	bfde      	ittt	le
 800fb6e:	2330      	movle	r3, #48	; 0x30
 800fb70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb78:	1b52      	subs	r2, r2, r5
 800fb7a:	6122      	str	r2, [r4, #16]
 800fb7c:	f8cd a000 	str.w	sl, [sp]
 800fb80:	464b      	mov	r3, r9
 800fb82:	aa03      	add	r2, sp, #12
 800fb84:	4621      	mov	r1, r4
 800fb86:	4640      	mov	r0, r8
 800fb88:	f7ff fee2 	bl	800f950 <_printf_common>
 800fb8c:	3001      	adds	r0, #1
 800fb8e:	d14c      	bne.n	800fc2a <_printf_i+0x1fe>
 800fb90:	f04f 30ff 	mov.w	r0, #4294967295
 800fb94:	b004      	add	sp, #16
 800fb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb9a:	4835      	ldr	r0, [pc, #212]	; (800fc70 <_printf_i+0x244>)
 800fb9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fba0:	6829      	ldr	r1, [r5, #0]
 800fba2:	6823      	ldr	r3, [r4, #0]
 800fba4:	f851 6b04 	ldr.w	r6, [r1], #4
 800fba8:	6029      	str	r1, [r5, #0]
 800fbaa:	061d      	lsls	r5, r3, #24
 800fbac:	d514      	bpl.n	800fbd8 <_printf_i+0x1ac>
 800fbae:	07df      	lsls	r7, r3, #31
 800fbb0:	bf44      	itt	mi
 800fbb2:	f043 0320 	orrmi.w	r3, r3, #32
 800fbb6:	6023      	strmi	r3, [r4, #0]
 800fbb8:	b91e      	cbnz	r6, 800fbc2 <_printf_i+0x196>
 800fbba:	6823      	ldr	r3, [r4, #0]
 800fbbc:	f023 0320 	bic.w	r3, r3, #32
 800fbc0:	6023      	str	r3, [r4, #0]
 800fbc2:	2310      	movs	r3, #16
 800fbc4:	e7b0      	b.n	800fb28 <_printf_i+0xfc>
 800fbc6:	6823      	ldr	r3, [r4, #0]
 800fbc8:	f043 0320 	orr.w	r3, r3, #32
 800fbcc:	6023      	str	r3, [r4, #0]
 800fbce:	2378      	movs	r3, #120	; 0x78
 800fbd0:	4828      	ldr	r0, [pc, #160]	; (800fc74 <_printf_i+0x248>)
 800fbd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fbd6:	e7e3      	b.n	800fba0 <_printf_i+0x174>
 800fbd8:	0659      	lsls	r1, r3, #25
 800fbda:	bf48      	it	mi
 800fbdc:	b2b6      	uxthmi	r6, r6
 800fbde:	e7e6      	b.n	800fbae <_printf_i+0x182>
 800fbe0:	4615      	mov	r5, r2
 800fbe2:	e7bb      	b.n	800fb5c <_printf_i+0x130>
 800fbe4:	682b      	ldr	r3, [r5, #0]
 800fbe6:	6826      	ldr	r6, [r4, #0]
 800fbe8:	6961      	ldr	r1, [r4, #20]
 800fbea:	1d18      	adds	r0, r3, #4
 800fbec:	6028      	str	r0, [r5, #0]
 800fbee:	0635      	lsls	r5, r6, #24
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	d501      	bpl.n	800fbf8 <_printf_i+0x1cc>
 800fbf4:	6019      	str	r1, [r3, #0]
 800fbf6:	e002      	b.n	800fbfe <_printf_i+0x1d2>
 800fbf8:	0670      	lsls	r0, r6, #25
 800fbfa:	d5fb      	bpl.n	800fbf4 <_printf_i+0x1c8>
 800fbfc:	8019      	strh	r1, [r3, #0]
 800fbfe:	2300      	movs	r3, #0
 800fc00:	6123      	str	r3, [r4, #16]
 800fc02:	4615      	mov	r5, r2
 800fc04:	e7ba      	b.n	800fb7c <_printf_i+0x150>
 800fc06:	682b      	ldr	r3, [r5, #0]
 800fc08:	1d1a      	adds	r2, r3, #4
 800fc0a:	602a      	str	r2, [r5, #0]
 800fc0c:	681d      	ldr	r5, [r3, #0]
 800fc0e:	6862      	ldr	r2, [r4, #4]
 800fc10:	2100      	movs	r1, #0
 800fc12:	4628      	mov	r0, r5
 800fc14:	f7f0 faf4 	bl	8000200 <memchr>
 800fc18:	b108      	cbz	r0, 800fc1e <_printf_i+0x1f2>
 800fc1a:	1b40      	subs	r0, r0, r5
 800fc1c:	6060      	str	r0, [r4, #4]
 800fc1e:	6863      	ldr	r3, [r4, #4]
 800fc20:	6123      	str	r3, [r4, #16]
 800fc22:	2300      	movs	r3, #0
 800fc24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc28:	e7a8      	b.n	800fb7c <_printf_i+0x150>
 800fc2a:	6923      	ldr	r3, [r4, #16]
 800fc2c:	462a      	mov	r2, r5
 800fc2e:	4649      	mov	r1, r9
 800fc30:	4640      	mov	r0, r8
 800fc32:	47d0      	blx	sl
 800fc34:	3001      	adds	r0, #1
 800fc36:	d0ab      	beq.n	800fb90 <_printf_i+0x164>
 800fc38:	6823      	ldr	r3, [r4, #0]
 800fc3a:	079b      	lsls	r3, r3, #30
 800fc3c:	d413      	bmi.n	800fc66 <_printf_i+0x23a>
 800fc3e:	68e0      	ldr	r0, [r4, #12]
 800fc40:	9b03      	ldr	r3, [sp, #12]
 800fc42:	4298      	cmp	r0, r3
 800fc44:	bfb8      	it	lt
 800fc46:	4618      	movlt	r0, r3
 800fc48:	e7a4      	b.n	800fb94 <_printf_i+0x168>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	4632      	mov	r2, r6
 800fc4e:	4649      	mov	r1, r9
 800fc50:	4640      	mov	r0, r8
 800fc52:	47d0      	blx	sl
 800fc54:	3001      	adds	r0, #1
 800fc56:	d09b      	beq.n	800fb90 <_printf_i+0x164>
 800fc58:	3501      	adds	r5, #1
 800fc5a:	68e3      	ldr	r3, [r4, #12]
 800fc5c:	9903      	ldr	r1, [sp, #12]
 800fc5e:	1a5b      	subs	r3, r3, r1
 800fc60:	42ab      	cmp	r3, r5
 800fc62:	dcf2      	bgt.n	800fc4a <_printf_i+0x21e>
 800fc64:	e7eb      	b.n	800fc3e <_printf_i+0x212>
 800fc66:	2500      	movs	r5, #0
 800fc68:	f104 0619 	add.w	r6, r4, #25
 800fc6c:	e7f5      	b.n	800fc5a <_printf_i+0x22e>
 800fc6e:	bf00      	nop
 800fc70:	0800ffc5 	.word	0x0800ffc5
 800fc74:	0800ffd6 	.word	0x0800ffd6

0800fc78 <memmove>:
 800fc78:	4288      	cmp	r0, r1
 800fc7a:	b510      	push	{r4, lr}
 800fc7c:	eb01 0402 	add.w	r4, r1, r2
 800fc80:	d902      	bls.n	800fc88 <memmove+0x10>
 800fc82:	4284      	cmp	r4, r0
 800fc84:	4623      	mov	r3, r4
 800fc86:	d807      	bhi.n	800fc98 <memmove+0x20>
 800fc88:	1e43      	subs	r3, r0, #1
 800fc8a:	42a1      	cmp	r1, r4
 800fc8c:	d008      	beq.n	800fca0 <memmove+0x28>
 800fc8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc96:	e7f8      	b.n	800fc8a <memmove+0x12>
 800fc98:	4402      	add	r2, r0
 800fc9a:	4601      	mov	r1, r0
 800fc9c:	428a      	cmp	r2, r1
 800fc9e:	d100      	bne.n	800fca2 <memmove+0x2a>
 800fca0:	bd10      	pop	{r4, pc}
 800fca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcaa:	e7f7      	b.n	800fc9c <memmove+0x24>

0800fcac <_realloc_r>:
 800fcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb0:	4680      	mov	r8, r0
 800fcb2:	4614      	mov	r4, r2
 800fcb4:	460e      	mov	r6, r1
 800fcb6:	b921      	cbnz	r1, 800fcc2 <_realloc_r+0x16>
 800fcb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	f7ff bb85 	b.w	800f3cc <_malloc_r>
 800fcc2:	b92a      	cbnz	r2, 800fcd0 <_realloc_r+0x24>
 800fcc4:	f7ff fc9c 	bl	800f600 <_free_r>
 800fcc8:	4625      	mov	r5, r4
 800fcca:	4628      	mov	r0, r5
 800fccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd0:	f000 f81b 	bl	800fd0a <_malloc_usable_size_r>
 800fcd4:	4284      	cmp	r4, r0
 800fcd6:	4607      	mov	r7, r0
 800fcd8:	d802      	bhi.n	800fce0 <_realloc_r+0x34>
 800fcda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fcde:	d812      	bhi.n	800fd06 <_realloc_r+0x5a>
 800fce0:	4621      	mov	r1, r4
 800fce2:	4640      	mov	r0, r8
 800fce4:	f7ff fb72 	bl	800f3cc <_malloc_r>
 800fce8:	4605      	mov	r5, r0
 800fcea:	2800      	cmp	r0, #0
 800fcec:	d0ed      	beq.n	800fcca <_realloc_r+0x1e>
 800fcee:	42bc      	cmp	r4, r7
 800fcf0:	4622      	mov	r2, r4
 800fcf2:	4631      	mov	r1, r6
 800fcf4:	bf28      	it	cs
 800fcf6:	463a      	movcs	r2, r7
 800fcf8:	f7ff fb32 	bl	800f360 <memcpy>
 800fcfc:	4631      	mov	r1, r6
 800fcfe:	4640      	mov	r0, r8
 800fd00:	f7ff fc7e 	bl	800f600 <_free_r>
 800fd04:	e7e1      	b.n	800fcca <_realloc_r+0x1e>
 800fd06:	4635      	mov	r5, r6
 800fd08:	e7df      	b.n	800fcca <_realloc_r+0x1e>

0800fd0a <_malloc_usable_size_r>:
 800fd0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd0e:	1f18      	subs	r0, r3, #4
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	bfbc      	itt	lt
 800fd14:	580b      	ldrlt	r3, [r1, r0]
 800fd16:	18c0      	addlt	r0, r0, r3
 800fd18:	4770      	bx	lr
	...

0800fd1c <_init>:
 800fd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd1e:	bf00      	nop
 800fd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd22:	bc08      	pop	{r3}
 800fd24:	469e      	mov	lr, r3
 800fd26:	4770      	bx	lr

0800fd28 <_fini>:
 800fd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2a:	bf00      	nop
 800fd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd2e:	bc08      	pop	{r3}
 800fd30:	469e      	mov	lr, r3
 800fd32:	4770      	bx	lr
